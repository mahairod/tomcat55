# Comments will be lost when protocol-based config will be used
# ( at least in the first version ). In a future version we'll save
# the comments before every section and property and save ( maybe )

# Global options ( in addition to the pre-defined fs, ps, java_home
[config]
#TOMCAT_HOME=/opt/tomcat
TOMCAT_HOME=/opt/40
JAVA_HOME=/usr/java/ibm1.3


# Logger options. For apache2 only level can be set ( it logs to apache's error.log )
[logger]
level=DEBUG
# File property is not used on Apache2 or if a 'native' logger is available
# The Apache2 ( or native ) log file is used instead
# For apache1 the file must be specified if you want logging.
# file=logs/mod_jk.log


#################### Channels ####################
# Each channel defines a communication mechanism to a tomcat instance.
# Each channel is associated with a worker.ajp13:NAME, with the same local name


# Default channel 
[channel.socket:localhost:8009]
# lbfactor=1


# Example additional socket channel. The location is in the name ( URL-style
[channel.socket:localhost:8019]


# Example 2 - explicitely set the host/port, the name can be anything.
# [channel.socket:myWorker]
# host=myHost
# port=8109


# Example unix socket.
# XXX We must use an explicit setting to use substitution - resolve this
[channel.apr:unixSocket]
file=${TOMCAT_HOME}/work/jk2.socket


[channel.jni:jni]

#################### Workers ####################
# All non-ajp13 workers or workers with special configurations

# The status worker. 
[worker.status]


# This is created by default - and used for all webapps that don't specify 
# explicitely an worker.
# It'll automatically get all the 'forwarding' workers/channels.
# [worker.lb]


# Note that we use separate lines instead of , separated values. 
# This is also created by default - when a forwarding worker has a 
# 'group' property
# [worker.lb:group1]


# Requirements: libjvm.so MUST BE INCLUDED in LD_LIBRARY_PATH for this 
# to work reliably and on all platforms. Same for other java libs. 
# "java" script is a good example, Sun needs it to start java and we need it to.
# JAVA_HOME and TOMCAT_HOME can be set as environment variables
[vm]
# Optional: JVM= PATH_TO_libjvm.so ( standard locations are searched )
#OPT=-Djava.class.path=${TOMCAT_HOME}/lib/tomcat.jar
OPT=-Djava.class.path=${TOMCAT_HOME}/bin/bootstrap.jar
#OPT=-Djava.class.path=${TOMCAT_HOME}/lib/container/tomcat-jk2.jar${ps}${TOMCAT_HOME}/lib/common/tomcat-util.jar
#OPT=-Djava.class.path=${TOMCAT_HOME}/server/lib/tomcat-jk2.jar${ps}${TOMCAT_HOME}/server/lib/tomcat-util.jar
OPT=-Xmx128M
OPT=-Dtomcat.home=${TOMCAT_HOME}
OPT=-Dcatalina.home=${TOMCAT_HOME}
OPT=-Djava.compiler=NONE


# Call org.apache.jk.server.JniMain with the 3 params.
# XXX make it more generic
[worker.jni:jniCmd1]
# For 3.3
#class=org/apache/tomcat/startup/Main

# For 4.0
class=org/apache/catalina/startup/Bootstrap
ARG=start

# For JkMain ( testing )
#ARG=-out
#ARG=${serverRoot}${fs}logs${fs}java.out
#ARG=-err
#ARG=${serverRoot}${fs}logs${fs}java.err


#################### Locations #################### 
# XXX Uris to be read from separate file, one per webapp.
# XXX Webapps to be declared automatically, using webapps/ content :-)

[uri:/examples/*]
worker=ajp13:jni
# worker=ajp13:localhost:8009
# worker=ajp13:unixSocket


# Status worker. XXX protect it with <Location> and security settings,
# it'll display all properties - including eventual secrets.
[uri:/jkstatus/*]
worker=worker.status
