# Workers.properties like file for the java side.
# It should be easy to read from C as well, to avoid duplication
# There are many ways to configure jk2 - including 'native' interceptor
# conf in server.xml, servlet and web.xml, properties file. For the first,
# version we'll use the file. If/when xml is used ( any form ), we'll
# generate this file automatically.


# Pattern ( similar with server.xml, but for properties ) : 
#
# handler.NAME.className=[class name to be loaded]
# handler.NAME.property=value : a setter will be called, with int,boolean
# conversions if needed.  


# Handlers that will be loaded by jk2:
# Default:
# handler.list=channel,request,container

# Transport handler. 
# Default:
#handler.channel.className=org.apache.jk.common.ChannelSocket
#handler.channel.debug=0
#handler.channel.port=8009

# Other options:
#handler.channel.className=org.apache.jk.common.ChannelUn
#handler.channel.file=${jk.home}/jk2.socket

#handler.channel.className=org.apache.jk.common.ChannelJni

# Optional - right now request handles all messages
# handler.dispatch.className=org.apache.jk.common.HandlerDispatch
# handler.dispatch.debug=0


# The only request handler we have right now, for ajp13 requests.
# Default:
#handler.request.className=org.apache.jk.common.HandlerRequest
#handler.request.debug=0


#handler.container.className=org.apache.jk.common.WorkerDummy

# This will be added automatically by the server adapter. Only dummy
# needs to be added for testing purpose
# handler.container.className=org.apache.jk.server.tomcat33.Worker33
# handler.container.className=org.apache.jk.server.tomcat40.Worker40
