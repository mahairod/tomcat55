Information on building mod_jk2:

  Starting with 2.0.4, APR is mandatory for jk2. For Apache 2.0
  or greater jk2 will use APR that was used to build Apache 2.0.
  For Apache 1.3, jk2 must build APR and APR_UTIL from source. 

DSO build instructions for Unix-like systems:

  The compiler used to build jk2 must match the one used to build
  Apache. You may need to set an environment variable before 
  configuring such as CC=cc. `apxs -q CC` will tell you what 
  compiler was used for Apache.

  The most straightforward way to configure jk2 is to use apxs 
  that comes with Apache. Linux distributions may need to have 
  additional rpm's installed such as Apache2 devel rpm, 
  httpd-devel or apache2-devel or for Apache 13, Apache devel 
  rpm, httpd-devel or apache-devel depending on your 
  distribution.

  Example Apache2 build and install:

    cd jakarta-tomcat-connectors/jk/native2
    ./configure --with-apxs2=/your/path/to/apxs
    make
    cd ../build/jk2/apache2
    apxs -n jk2 -i mod_jk2.so

  Example Apache13 build and install:

    apr and apr-util will be configured and built for you while
    configuring and building jk2. There is no need to separately
    configure and build them. 

      cd jakarta-tomcat-connectors/jk/native2
      ./configure --with-apxs=/your/path/to/apxs \
                  --with-apr=/absolute/path/to/apr-source \
                  --with-apr-util=/absolute/path/to/apr-util-source
      make
      cd ../build/jk2/apache13
      apxs -n jk2 -i mod_jk2.so

    NOTE: pthread support may be automatically detected and built
    into apr. If apache13 was not built with pthread support, you
    can either disable it by adding --disable-apr-threads while
    configuring, or load the pthread library in httpd.conf using
    the LoadFile directive.

  Optional configure arguments (for 1.3 and 2.0):

    If you want to have JNI support, add --with-jni and be sure
    to have the JAVA_HOME environment variable point to your Java
    Environment. This will build inprocess jni support into
    mod_jk2.so and additionally build libjkjni.so. libjkjni.so
    can be used by tomcat to provide support for channel unix and
    should be installed in the apache libexec dir. Use 
    `apxs -q LIBEXECDIR` if you are unsure of its location. 
    Libjkjni.so will be located in the same directory as 
    mod_jk2.so after building with this option.

    If you want to have PCRE (Perl Compatible Regular
    Expressions) support for jk2 uri directives, add --with-pcre
    while configuring.


Quick information on building mod_jk2 :

* IIS 

There is a known issue with the latest APR 1.0 and MSVC6.
If you want to use MSVC6, please use APR 0.9.x for now.
MSVC7 doesn't have this issue, and could be used with APR 1.0.

Isapi redirector requires the following libraries to build:
apr, apr-util, apr-iconv and pcre.
The easiest way to obtain all those libraries is to download
the httpd-2.0.49-win32-src.zip from http://www.apache.org/dist/httpd or
from any of the mirror sites.
You will only need the srclib part (apr, apr-util, apr-iconv and pcre)
Unzip the entire srclib folder to j-t-c native2 folder.
Now open the isapi.dsw from MSVC6 and build.

Building using VS.NET:
Make sure that the required libraries are inside native2/srclib.
Open the idapi.dsw and select 'Yes to all' when prompted to convert the project.
During conversion the custom build adds extra quotations for
jk_logger_win32_message.mc. Right click on that file and select Properties.
For Custom Build Step remove all the quotations around ${InputDir}
and ${InputPath}.



* Netware

Buid the JK2 connector for NetWare platform.

The current NWNGUmakefile uses the same build system as Apache2 self for NetWare target.
Simply extract the downloaded archive, and follow the guideline which describes compilation of Apache2 self. 

After you have compiled Apache2 (this is mandatory for now since the prebuild process must have finished) 
you can simply call the makefile with 'make -f NWGNUmakefile', this builds the connector for Apache2 in a 
release or debug subdirectory, dependent if you specify to build a debug version or not.

It is recommended to use Metrowerks CodeWarrior compiler for now; although the connector builds with GCC 
for NetWare, it is not tested yet if it works - there are known issues with a bitfied and alignment which 
have to be solved.


