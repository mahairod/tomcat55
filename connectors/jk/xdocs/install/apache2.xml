<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="apache2.html">

    &project; 

    <properties>
        <author email="mturk@apache.org">Mladen Turk</author>
        <title>Installation for Apache 2.0.x</title>
    </properties>

<body>

<section name="Building mod_jk on Unix">
<p>
The mod_jk build use the widely used configure system.
</p>
<subsection name="Prepare your mod_jk configure from CVS">
<p>
In case you get source from CVS, ie without an existing configure script,
you should have autoconf for configuration and installation.
To create jakarta-tomcat-connectors's autoconf script, you will need libtool 1.3.3 or higher, 
and autoconf 2.13 or newer.
Those tools will not be required if you are just using a package downloaded from apache.org, 
they are only required for developers.
</p>

<p>
To create the configure script just type :
<screen>
<read />
<type>./buildconf.sh</type>
</screen>
</p>
</subsection>

<subsection name="Using configure to build mod_jk">
<p>The configure file produced using buildconf script will create all necesary make files.
Here's how to use configure to prepare mod_jk for building, just type: 
<screen>
<read />
<type>./configure [autoconf arguments] [jakarta-tomcat-connectors arguments]</type>
</screen>
</p>

<p>
You could set <b>CFLAGS</b> and <b>LDFLAGS</b> to add some platform specifics:
</p>

<screen>
<read />
<type>LDFLAGS=-lc ./configure -with-apxs=/home2/local/apache/bin/apxs</type>
</screen>

<p>
If you want to build mod_jk for 2.0, you should 
<ul>
<li>
use configure and indicate Apache 2.0 apxs location,
</li>
<li>
then make.
</li>
</ul>
</p>

</subsection>

<subsection name="configure arguments">
<p>Apache related parameters :</p>
<attributes name="Parameter">
  <attribute name="--with-apxs[=FILE]" required="true">
  <p>FILE is the location of the apxs tool. Default is finding apxs in PATH.
It builds a shared Apache module. It detects automaticly the Apache version.
    </p>
  </attribute>
  <attribute name="--with-apache=DIR" required="false">
  <p>DIR is the path where apache sources are located.
The apache sources should have been configured before configuring mod_jk.
DIR is something like: /home/apache/apache_1.3.33
It builds a static Apache module.</p>
  </attribute>
</attributes>

<p>JNI related parameters :</p>
<attributes name="Parameter">
  <attribute name="--enable-jni" required="false">
  <p>Build the JNI worker and so the build process will require 
some informations about your Java Environment. Most of the options are
autodetected.</p>
  </attribute>
  <attribute name="--with-java-home=DIR" required="false">
  <p>DIR is the  patch to the JDK root directory. Something like: /opt/java/jdk12</p>
  </attribute>
  <attribute name="--with-os-type=SUBDIR" required="false">
  <p>SUBDIR is the os-type subdirectory, 
  configure should guess it correctly.</p>
  </attribute>
  <attribute name="--with-arch-type=SUBDIR" required="false">
  <p>SUBDIR is the arch subdirectory, 
  configure should guess it correctly.</p>
  </attribute>
  <attribute name="--with-java-platform=VAL" required="false">
  <p>VAL is the Java platform 1 is 1.1.x and 2 is for 1.2 anf higher, 
  configure should guess it correctly.</p>
  </attribute>
  
</attributes>

<p>Examples of configure use :</p>

<screen>
<note>Apache 2.0 build</note>
<type>./configure --with-apxs=/usr/sbin/apxs2</type><br/>
<type>make</type><br/>
<type>cp ./apache-2.0/mod_jk.so /usr/lib/apache2</type><br/>
</screen>

<screen>
<note>Apache 2.0 build with JNI support</note>
<type>./configure --with-apxs=/opt/apache2/bin/apxs \</type>
<typenext>--with-java-home=${JAVA_HOME} --with-java-platform=2 \</typenext>
<typenext>--enable-jni</typenext><br/>
</screen>

</subsection>

</section>

<section name="Building mod_jk for Apache on Windows NT/2K/XP">
<p>
The module was developed using Visual C++ version 6.0, so having this environment is a prerequisite 
if you want to perform a custom build.
</p>
<p>
The steps that you need to take are:
</p>
<ul>
<li>
Change directory to the 2.0 source directory depending on your version of Apache.
</li>
<li>
If you want to build mod_jk for Apache 2.0, set an <b>APACHE2_HOME</b> environment variable which points 
to where your Apache 2.0 is installed.
</li>
<li>
Copy mod_jk.dll to Apache's modules directory.
</li>
</ul>

<p>
An example on how to build mod_jk for Apache 2.0:
</p>
<screen>
<note>Set location for Apache 2.0 sources</note>
<typedos>set APACHE2_HOME=c:\apache20</typedos>
<note>Change directory to the mod_jk module for Apache 2.0</note>
<typedos>cd c:\home\apache\jk\native\apache-2.0</typedos>
<note>Build the sources using MSDEV</note>
<typedos>MSDEV mod_jk.dsp /MAKE ALL</typedos>
<note>Copy the dll to your apache modules directory</note>
<typedos>cp release\mod_jk.dll c:\apache20\modules\</typedos>
</screen>

<p>
If msdev is not in your path, enter the full path to msdev.exe. 
Also, ApacheCore.lib is expected to exist in the <b>${APACHEX_HOME}\src\CoreD</b> and 
<b>${APACHEX_HOME}\src\CoreR</b> directories before linking will succeed.
You will need to build enough of the Apache source to create these libraries.
This will build both release and debug versions of the redirector plug-in (mod_jk).
An alternative will be to open mod_jk.dsp in msdev and build it using the build menu.
</p>
</section>

<section name="Building mod_jk for Apache on iSeries/OS400">
<p>
Since OS400 V4R5, iSeries (AS/400) has used Apache 2.0 as their primary web server, 
replacing the old IBM webserver.
It's now possible to build mod_jk on iSeries thanks to the help of the IBM 
Rochester Labs which has provided information and patches
to adapt mod_jk to OS400.
</p>
<p>
You should have at least Apache 2.0.39, a C Compiler and IFS.
Apache 2.0.39 is provided with the most recent set of PTFs for the iSeries Apache
server, which can be found at <a href="http://www.ibm.com/servers/eserver/iseries/software/http/">
http://www.ibm.com/servers/eserver/iseries/software/http/</a>
</p>

<p>
To configure mod_jk on iSeries use the CL source provided with the mod_jk source.
</p>
<ul>
<li>
Get the latest mod_jk source and untar it on a Windows or Unix boxes
</li>
<li>
Create a directory in IFS, ie /home/apache
</li>
<li>
Send the whole jk source directory to iSeries directory via FTP.
</li>
<li>
Then go to the iSeries command line :
</li>
</ul>
<screen>
<note>Create mod_jk library</note>
<type5250>CRTLIB MOD_JK TEXT('Apache mod_jk tomcat connector module')</type5250>
<note>Create service program source file</note>
<type5250>CRTSRCPF MOD_JK/QSRVSRC TEXT('Service program source file')</type5250>
<note>Create the CL build program source file</note>
<type5250>CRTSRCPF FILE(MOD_JK/QCLSRC) TEXT('Build program source file')</type5250>
<note>Edit the service program source file</note>
<type5250>STRSEU MOD_JK/QSRVSRC MOD_JK</type5250>
</screen>
<p>
In the edited file, specify that only jk_module should be exported :
<screen>
<note> Columns   . . :    1  71     Edit                               MOD_JK/QSRVSRC </note>
<note> SEU==>                                                                  MOD_JK </note>
<note>        *************** Beginning of data ************************************* </note>
<note>0001.00 STRPGMEXP PGMLVL(*CURRENT)                                              </note>
<note>0002.00 EXPORT SYMBOL("jk_module")                                              </note>
<note>0003.00 ENDPGMEXP                                                               </note>
<note>        ****************** End of data **************************************** </note>        
</screen>
</p>
<p>
You could start to build all the modules of mod_jk :
</p>
<screen>
<note>Copy the CL build program source from IFS</note>
<type5250>CPYFRMSTMF FROMSTMF('/home/apache/jk/native/apache-2.0/bldjk.qclsrc') +</type5250>
<note>TOMBR('/QSYS.LIB/MOD_JK.LIB/QCLSRC.FILE/BLDJK.MBR') MBROPT(*REPLACE)</note>
<note>Build the CL build program</note>
<type5250>CRTCLPGM PGM(MOD_JK/BLDJK) SRCFILE(MOD_JK/QCLSRC) TEXT('Apache mod_jk build program')</type5250>
<note>Launch the build</note>
<type5250>CALL MOD_JK/BLDJK</type5250>
<note>If the build if successfull, copy the new mod_jk module</note>
<type5250>CRTDUPOBJ OBJ(MOD_JK) FROMLIB(MOD_JK) OBJTYPE(*SRVPGM) TOLIB(QHTTPSVR) NEWOBJ(MOD_JK)</type5250>
</screen>
<p>
Next, you should restart your Apache 2.0 server and enjoy this piece of OpenSource on iSeries.
</p>
</section>

<section name="Building mod_jk for Apache on MacOS/X">
<p>
The configure file produced using buildconf script will create all necesary make files.
The build process is the same as for Unix platforms. Here are the <b>Mac OS X (10.2.x)</b> build notes :
</p>
<p>
Assuming that you are root :
</p>
<screen>
<note>For Apache 2.0:</note>
<type>./configure --with-apxs=/usr/local/apache2/bin/apxs</type>
<note>(you should point to the directory where you installed Apache 2.0)</note>
<type>cd apache-2.0</type>
<type>make -f Makefile.apxs install</type>
</screen>
</section>

<section name="Getting mod_jk linked statically with Apache">
<p>
mod_jk allows to install mod_jk in the Apache source tree to get a statically
linked mod_jk. Having mod_jk in the httpd executable brings some performance
improvements. The configure option --with-apache prepare mod_jk to install it
in the Apache source tree.
The examples below show how to get mod_jk in the httpd process.
</p>

<p>Installation in Apache-2.0 :</p>
<screen>
<note> /home/apache20/httpd-2.0.52 is the directory where the httpd-2.0 sources
are located. </note>
<type>./configure --with-apache=/home/apache20/httpd-2.0.52</type><br/>
<type>make</type><br/>
<note>Install the mod_jk library and other files in
/home/apache20/httpd-2.0.52/modules: </note>
<type>make install</type><br/>
<note> It is not possible to configure Apache directly because the config.m4 of mod_jk must
be added to the configure of httpd-2.0. </note>
<type>cd /home/apache20/httpd-2.0.52</type>
<type>sh buildconf</type>
<type>configure ... --with-mod_jk</type>
<type>make</type>
<type>make install</type><br/>
</screen>

<p>
The enable-jk=share and enable-jk=static are not supported. --with-mod_jk only
allow static linking of mod_jk.
</p>
</section>
 
</body>
</document>
