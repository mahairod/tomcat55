<project name="Webapp" default="compile" basedir=".">


<!--
        "Coyote" connector framework for Jakarta Tomcat
        $Id$
-->


<!-- ========== Initialize Properties ===================================== -->


  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->


<!-- ========== External Dependencies ===================================== -->


  <!-- The directories corresponding to your necessary dependencies -->
  <property name="junit.home"              value="/usr/local/junit3.5"/>


<!-- ========== Derived Values ============================================ -->


  <!-- The locations of necessary jar files -->
  <property name="tomcat-util.jar"  value="../util/build/lib/tomcat-util.jar"/>
  <property name="junit.jar"        value="${junit.home}/junit.jar"/>


<!-- ========== Component Declarations ==================================== -->


  <!-- The name of this component -->
  <property name="component.name"          value="webapp"/>

  <!-- The title of this component -->
  <property name="component.title"         value="Webapp"/>

  <!-- The current version number of this component -->
  <property name="component.version"       value="1.0"/>

  <!-- The base directory for compilation targets -->
  <property name="build.home"              value="build"/>

  <!-- The base directory for component configuration files -->
  <property name="conf.home"               value="conf"/>

  <!-- The base directory for component sources -->
  <property name="source.home"             value="java"/>

  <!-- The base directory for unit test sources -->
  <property name="test.home"               value="test"/>

<!-- ========== Compiler Defaults ========================================= -->


  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug"           value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation"     value="false"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize"        value="true"/>

    <!-- default locations -->
    <property name="tomcat33.home" 
	      location="../../jakarta-tomcat/build/tomcat" />
    <property name="catalina.home" 
	      location="../../jakarta-tomcat-4.0/build" />

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${tomcat-util.jar}"/>
    <pathelement location="${catalina.home}/server/lib/catalina.jar"/>
    <pathelement location="${catalina.home}/common/lib/servlet.jar"/>
  </path>


<!-- ========== Test Execution Defaults =================================== -->


  <!-- Construct unit test classpath -->
  <path id="test.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${build.home}/tests"/>
    <pathelement location="${tomcat-util.jar}"/>
    <pathelement location="${junit.jar}"/>
  </path>

  <!-- Should all tests fail if one does? -->
  <property name="test.failonerror"        value="true"/>

  <!-- The test runner to execute -->
  <property name="test.runner"             value="junit.textui.TestRunner"/>
  <property name="test.entry" value="org.apache.coyote.TestAll"/>


<!-- ========== Detection and Reports ===================================== -->


    <target name="report-tc4" if="tomcat4.detect" >
	<echo message="Tomcat4 detected "  />
    </target>

    <target name="report" depends="report-tc4" />


<!-- ========== Executable Targets ======================================== -->


  <target name="init"
   description="Initialize and evaluate conditionals">
    <echo message="-------- ${component.title} ${component.version} --------"/>
    <filter  token="name"                  value="${component.name}"/>
    <filter  token="version"               value="${component.version}"/>
  </target>


  <target name="prepare" depends="init"
   description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${build.home}/conf"/>
    <mkdir dir="${build.home}/docs"/>
    <mkdir dir="${build.home}/docs/api-java"/>
    <mkdir dir="${build.home}/lib"/>
    <mkdir dir="${build.home}/tests"/>
    <available property="tomcat4.detect" file="${catalina.home}/server/lib/catalina.jar" />
  </target>


  <target name="static" depends="prepare"
   description="Copy static files to build directory">
    <tstamp/>
    <!--
    <copy  todir="${build.home}/conf" filtering="on">
      <fileset dir="${conf.home}" includes="*.MF"/>
    </copy>
    -->
  </target>


  <target name="compile"
   depends="static,report"
   description="Compile Webapp components">
    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy    todir="${build.home}/classes" filtering="on">
      <fileset dir="${source.home}" excludes="**/*.java"/>
    </copy>
    <jar    jarfile="${build.home}/lib/tomcat-${component.name}.jar"
            basedir="${build.home}/classes" />
  </target>


  <target name="compile.tests" depends="compile"
   description="Compile unit test cases">
    <javac  srcdir="${test.home}"
           destdir="${build.home}/tests"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="test.classpath"/>
    </javac>
    <copy    todir="${build.home}/tests" filtering="on">
      <fileset dir="${test.home}" excludes="**/*.java"/>
    </copy>
  </target>


  <target name="clean"
   description="Clean build and distribution directories">
    <delete    dir="${build.home}"/>
  </target>


  <target name="all" depends="clean,compile"
   description="Clean and compile all components"/>


  <target name="javadoc" depends="prepare"
   description="Create Java API documentation">
    <javadoc sourcepath="${source.home}"
                destdir="${build.home}/docs/api-java"
           packagenames="org.apache.*"
                 author="true"
                private="true"
                version="true"
               doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
            windowtitle="${component.title} (Version ${component.version})"
                 bottom="Copyright (c) 2001-2002 - Apache Software Foundation">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>

  <target name="docs" depends="javadoc"
   description="Create Documentation">
    <copy todir="${build.home}/docs" >
      <fileset dir="./docs">
        <exclude name="**.xml"/>
        <exclude name="**.xsl"/>
        <exclude name="**.idx"/>
      </fileset>
    </copy>

    <style
      basedir="./docs"
      destdir="${build.home}/docs"
      style="./docs/style.xsl"
      includes="**.xml"
    />
  </target>



<!-- ========== Unit Test Targets ========================================= -->


  <target name="test"  depends="compile.tests" if="test.entry"
   description="Run all unit test cases">
      <!--
      <junit printsummary="yes" fork="on" haltonfailure="yes">
      	<formatter type="plain" usefile="false"/>
      	<test name="${test.entry}"/>
        <classpath refid="test.classpath"/>
      </junit>
      -->

      <java classname="${test.runner}" fork="yes"
       failonerror="${test.failonerror}">
        <jvmarg value="${java.protocol.handler.pkgs}"/>
        <arg value="${test.entry}"/>
        <classpath refid="test.classpath"/>
      </java>
  </target>


</project>
