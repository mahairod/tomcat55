<?xml version="1.0"?>
<document>
<properties>
<title>Configuration file</title>
<author email="cmanolache@yahoo.com">Costin Manolache</author>
<author email="jfrederic.clere@fujitsu-siemens.com">Jean-Frederic Clere</author>
<date>$Date$</date>
</properties>
    <section name="Intro">
        <p>Jk2 uses a config file ( workers2.properties ) in the style of a .properties or ini
 file. It can be configured to use any other backend that provides similar
 capabilities.
  </p>
        <p>
  This document describes the format of this configuration file. Its default name is ${serverRoot}/conf/workers2.properties,
  where ${serverRoot} is something like /opt/apache.
</p>
    </section>
    <section name="Config file">
        <p> The default config file is user editable, but mod_jk will persist the 
changes requested by protocol( not implemented). If you manually change the file while jk2 is 
working, your changes will be lost. 
  </p>
        <p>The default configuration format . .  Each setting consists of an object 
name and a property, with the associated value. The property name is a simple
 string, with no '.' in it. The name can be anything, but it must have a
known  'type' as prefix.  
  </p>
        <p>2 formats are supported:   
            <source>
                TYPE:NAME.PROPERTY=VALUE 
            </source>
        </p>
        <p>and
            <source>
                [TYPE:NAME]
                PROPERTY=VALUE
            </source>
        </p>
    </section>

    <section name="Advanced: reconfiguration">
        <p>One of the features ok jk2 is support for (partial) reconfiguration at runtime, without a restart. The main 
use is to add/remove/change workers and uris. This allows smooth updates, without server restarts, where each 
worker is upgraded while the other workers server content. </p>

<p>The jk2 architecture is modeled after JMX, and in future it'll have a JMX proxy that will make most 
reconfiguration transparent. This section describes the mechanisms used for reconfiguration.</p>

<p>Each Jk2 component has a name and a number of attributes. The config is abstracted - but for simplicity
we'll discuss the default ( ini-file ) format. Some of the attributes and components support run time
changes. The most important is "disabled", that allows a component to be included or excluded from
the runtime. </p>

<p>The easiest way to reconfigure jk2 is by making modifications to the config file. Jk will 
process the file again and call the setters for attributes - including disabled, etc. Only 
components and attributes that include support for reloading will be affected.
</p>

<p>The reconfig is enabled by using a flag in the scoreboard. The flag can be set programmatically,
or it'll be set automatically every time the jk_status page is displayed if a change is
detected in the config file </p>

<p>A more advanced ( and less tested ) reconfiguration mechanism uses the jk_config API, called
programmatically using messages from server or using jk_status web interfaces. Every time 
a change is made, the config file will be written ( for persistence and to allow other processes to
get the same change ). The scoreboard will be changed, and then all other server processes will 
act just like in the case of a file change.</p>   

<p>A typical user will just edit the config file, add more workers or URIs or change disabled flag
of existing workers/uris. Then it'll access the jk_status page, which will detect the config
file changes and reload the config in the current server process, and use the scoreboard to 
inform other server processes of the change. </p>

 

</document>
