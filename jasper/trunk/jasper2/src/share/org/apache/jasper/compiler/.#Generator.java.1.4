package org.apache.jasper.compiler;

import java.util.*;
import java.net.URLEncoder;
import org.xml.sax.Attributes;
import org.apache.jasper.JasperException;
import org.apache.jasper.JspCompilationContext;
import org.apache.jasper.runtime.JspRuntimeLibrary;

public class Generator {

    private ServletWriter out;
    private BeanRepository beanInfo;
    private JspCompilationContext ctxt;
    private boolean breakAtLF;

    /**
     * @param s the input string
     * @return quoted and escaped string, per Java rule
     */
    private String quote(String s) {
	StringBuffer b = new StringBuffer();
	b.append('"');
	for (int i = 0; i < s.length(); i++) {
	    char c = s.charAt(i);
	    if (c == '"' || c == '\\')
		b.append('\\');
	    b.append(c);
	}
	b.append('"');
	return b.toString();
    }

    private void generateDeclarations(Node.Nodes page) {

	class DeclarationVisitor extends Node.Visitor {

	    public void visit(PageDirective n) throws JasperException {
		String info = n.getAttributeValue();
		if (info == null)
		    return;

		out.printIndentLn("public String getServletInfo() {");
		out.pushIndent();
		out.printIndent("return \"");
		out.print(info);
		out.println("\";");
		out.popIndent();
		out.print('}');
		out.println();
	    }

	    public void visit(Declaration n) throws JasperException {
		out.printMultiLn(new String(n.getText()));
	    }
	}

	out.println();
	page.visitor(new DeclarationVisitor());
    }

    /**
     *
     */
    private void generatePreamble(Node.Nodes page) {

	String servletPackageName = ctxt.getServletPackageName();
	String servletClassName = ctxt.getServletClassName();
	String serviceMethodName = Constants.SERVICE_METHOD_NAME;
	String servletContentType = Constants.SERVLET_CONTENT_TYPE;

	// First the package name:

	if (! "".equals(servletPackageName) && servletPackageName != null) {
	    out.printIndentLn("package "+servletPackageName+";");
	    out.println();
        }

	// Generate imports

	Iterator iter = pageInfo.getImports().iterator();
	while (iter.hasNext()) {
	    out.printin("import ");
	    out.print((String)iter.next());
	    out.println(";");
	}

	// Generate class declaration

	out.printin("public class ");
	out.print(servletClassName);
	out.print(" extends ");
	out.print(pageInfo.getExtends());
	if (pageInfo.isThreadSafe()) {
	    out.print("implements SingleThreadModel");
	}
	out.println(" {");

	// Class body begins here

	out.pushIndent();
	generateDeclrartions(page);
	out.println();

	// Static initializations (none yet) here

	// Constructor (empty so far) here
	// Other methods here

	// Now the service method
	out.printin("public void ");
	out.print(serviceMethodName);
	out.println("(HttpServletRequest request, HttpServletResponse response)");
	out.println("        throws java.io.IOException, ServletException {");

	out.pushIndent();
	out.println();

	// Local variable declarations
	out.printil("JspFactory _jspxFactory = null;");
	out.printil("PageContext pageContext = null;");
	if (pageInfo.isSession())
	    out.printil(""HttpSession session = null;");

	if (ctxt.isErrorPage())
            out.printil("Throwable exception = (Throwable) request.getAttribute(\"javax.servlet.jsp.jspException\");");

	out.printil("ServletContext application = null;");
	out.printil("ServletConfig config = null;");
	out.printil("JspWriter out = null;");
	out.printil("Object page = this;");

	out.printil("try {");
	out.pushIndent();

	out.printil("_jspxFactory = JspFactory.getDefaultFactory();");

	printin();
	if (pageInfo.getContentType() != null) {
	    servletContentType = pageInfo.getContentType();
	    out.print("response.setContentType(");
	    out.print(quote(servletContentType);
	    out.println(");");
	}
	else {
	    out.print("response.setContentType(\"");
	    out.print(servletContentType);
	    out.println(";charset=ISO-8859-1\");");
	}

	out.printil("pageContext = _jspxFactory.getPageContext(" +
			"this, request, response,");
	out.printin("\t\t\t");
	out.print(quote(pageInfo.getErrorPage()));
	out.print(", " + pageInfo.isSession());
	out.print(", " + pageInfo.getBufferSize());
	out.print(", " + pageInfo.isAutoFlush());
	out.print(");");

	out.printil("application = pageContext.getServletContext();");
	out.printil("config = pageContext.getServletConfig();");

	if (pageInfo.isSession())
	    out.printil("session = pageContext.getSession();");
	out.printil("out = pageContext.getOut();");
    }

    /**
     * A visitor that generates codes for the elements in the page.
     */
    class GenerateVisitor extends Node.Visitor {

	/**
	 * Returns an attribute value, optionally URL encoded.  If
	 * the value is a runtime expression, the result is the string for
	 * the expression, otherwise the result is the string literal,
	 * quoted and escaped.
	 * @param attr An JspAttribute object
	 * @param encode true if to be URL encoded
	 */
	private String attributeValue(Node.JspAttribute attr, boolean encode) {
	    String v = attr.getValue();
	    if (attr.isExpression())
		return v;
	    else {
		if (encode) 
		    v = URLEncoder.encode(v);
		return quote(v);
	    }
	}

	/**
	 * Prints the attrribut value specified in the param action, in the
	 * form of name=value string.
	 * @param n the parent node for the param action nodes.
	 */
	private void printParams(Node n) throws JasperException {

	    class ParamVisitor extends Node.Visitor {
		char separator='?';

		public void visit(Node.ParamAction n) throws JasperException {

		    out.print(separator);
		    out.print(n.getAttributeValue("name"));
		    out.print('=');
		    out.print(attributeValue(n.getValue(), true));

		    // The separator is '&' after the second use
		    separator = '&';
		}
	    }

	    n.getBody().visit(new ParamVisitor());
	}

        public void visit(Node.PageDirective n) throws JasperException {
        }

        public void visit(Node.Declaration n) throws JasperException {
	    out.printMultiLn(new String(n.getText()));
        }

        public void visit(Node.Expression n) throws JasperException {
	    out.print("out.print(" + new String(n.getText()) + ");");
        }

	public void visit(Node.Scriptlet n) throws JasperException {
	    out.printMultiLn(new String(n.getText()));
	}

	public void visit(Node.IncludeAction n) throws JasperException {

	    String flush = n.getAttributeValue("flush");

	    boolean isFlush = false;	// default to false;
	    if (flush != null && flush.equalsIgnoreCase("true"))
		isFlush = true;

	    out.printIndent("pageContext.include(request, response, ");
	    out.print(attributeValue(n.getPage(), true));
	    printParams(n);

	    out.println(", out, " + isFlush + ");");
        }

	public void visit(Node.ForwardAction n) throws JasperException {
	    String page = n.getAttributeValue("page");

	    out.printIndentLn("out.clear();");
	    out.printIndent("pageContext.forward(");
	    out.print(attributeValue(n.getPage(), true));
	    printParams(n);

	    out.println(");");
	    out.printIndentLn("return;");

	    // Not sure if we can eliminate dead codes after this.
	}

	public void visit(Node.GetProperty n) throws JasperException {
	    String name = n.getAttributeValue("name");
	    String property = n.getAttributeValue("property");

	    if (beanInfo.checkVariable(name)) {
		// Bean is defined using useBean, introspect at compile time
		Class bean = beanInfo.getBeanType(name);
		String beanName = bean.getName();
		java.lang.reflect.Method meth =
			JspRuntimeLibrary.getReadMethod(bean, property);
		String methodName = meth.getName();
		out.printIndentLn("out.print(JspRuntimeLibrary.toString(" +
			"(((" + beanName + ")pageContext.findAttribute(" +
			"\"" + name + "\"))." + methodName + "())));");
	    } else {
		// The object could be a custom action with an associated
		// VariableInfo entry for this name.
		// Get the class name and then introspect at runtime.
		out.printIndentLn("out.print(JspRuntimeLibrary.toString" +
			"(JspRuntimeLibrary.handleGetProperty" +
			"(pageContext.findAttribute(\"" +
			name + "\"), \"" + property + "\")));");
            }
        }

        public void visit(Node.SetProperty n) throws JasperException {
	    String name = n.getAttributeValue("name");
	    String property = n.getAttributeValue("property");
	    String param = n.getAttributeValue("param");
	    Node.JspAttribute value = n.getValue();

	    if ("*".equals(property)){
		out.printIndentLn("JspRuntimeLibrary.introspect(" +
				"pageContext.findAttribute(" +
				"\"" + name + "\"), request);");
	    }
	    else if (value == null) {
		if (param == null)
		    param = property;	// default to same as property
		out.printIndentLn("JspRuntimeLibrary.introspecthelper(" +
			"pageContext.findAttribute(\"" + name + "\"), \"" +
			property + "\", request.getParameter(\"" + param +
			"\"), " + "request, \"" + param + "\", false);");
	    }
	    else if (value.isExpression()) {
		out.printIndent("JspRuntimeLibrary.handleSetProperty(" + 
			"pageContext.findAttribute(\""  + name + "\"), \"" +
			property + "\","); 
		out.print(attributeValue(value, false));
		out.println(");");
	    }
	    else {
		out.printIndentLn("JspRuntimeLibrary.introspecthelper(" +
			"pageContext.findAttribute(\"" + name + "\"), \"" +
			property + "\",");
		out.print(attributeValue(value, false));
		out.println(",null, null, false);");
	    }
        }

        public void visit(Node.ParamsAction n) throws JasperException {
        }

        public void visit(Node.UseBean n) throws JasperException {
	    visitBody(n);
        }
	
        public void visit(Node.PlugIn n) throws JasperException {
	    visitBody(n);
	}

        public void visit(Node.CustomTag n) throws JasperException {
	    visitBody(n);
        }

	public void visit(Node.UninterpretedTag n) throws JasperException {
	    visitBody(n);
        }

	private static final int CHUNKSIZE = 1024;

	public void visit(Node.TemplateText n) throws JasperException {

	    char[] chars = n.getText();
	    int size = chars.length;

	    out.printIndent();
	    StringBuffer sb = new StringBuffer("out.write(\"");
	    int initLength = sb.length();
	    int count = CHUNKSIZE;
	    for (int i = 0 ; i < size ; i++) {
		char ch = chars[i];
		--count;
		switch(ch) {
		case '"':
		    sb.append('\\');
		    sb.append('\"');
		    break;
		case '\\':
		    sb.append('\\');
		    sb.append('\\');
		    break;
		case '\r':
		    break;
		case '\n':
		    sb.append('\\');
		    sb.append('n');

		    if (breakAtLF || count < 0) {
			// Generate an out.write() when see a '\n' in template
			sb.append("\");");
			out.println(sb.toString());
			out.printIndent();
			sb.setLength(initLength);
			count = CHUNKSIZE;
		    }
		    break;
		case '\t':	// Not sure we need this
		    sb.append('\\');
		    sb.append('t');
		    break;
		default:
		    sb.append(ch);
	        }
	    }

	    if (sb.length() > initLength) {
		sb.append("\");");
  		out.println(sb.toString());
	    }
	}
    }

    public void generate(Node.Nodes page) throws JasperException {
	generatePreamble(page);
	page.visit(new GenerateVisitor());
    }

    Generator(ServletWriter out, Compiler compiler) {
	this.ctxt = compiler.getCompilationContext();
	this.out = out;
	beanInfo = compiler.getPageInfo().getBeanRepository();
	breakAtLF = ctxt.getOptions().getMappedFile();
    }
}

