<project name="Tomcat 5.0" default="deploy" basedir=".">


  <!-- ===================== Initialize Property Values =================== -->

  <!-- See "build.properties.sample" in the top level directory for all     -->
  <!-- property values you must customize for successful building!!!        -->
  <property file="${user.home}/build.properties"/>
  <property file="build.properties"/>
  <property file="build.properties.default"/>

  <!-- Project Properties -->
  <property name="name"                  value="Apache Tomcat" />
  <property name="year"                  value="2002" />
  <property name="version"               value="5.0" />
  <property name="project"               value="jakarta-tomcat" />
  <property name="final.name"            value="${project}-${version}" />
  <property name="final-src.name"        value="${project}-${version}-src" />

  <!-- Subprojects -->
  <property name="api.project"           value="jakarta-servletapi-5" />
  <property name="tomcat.project"        value="jakarta-tomcat-5" />
  <property name="catalina.project"      value="jakarta-tomcat-catalina" />
  <property name="jtc.project"           value="jakarta-tomcat-connectors" />
  <property name="jasper.project"        value="jakarta-tomcat-jasper_tc5" />

  <property name="cvs.base"
           value="${basedir}/.."/>

  <!-- Source dependencies -->
  <property name="api.home"
           value="${basedir}/../${api.project}"/>
  <property name="catalina.home" 
           value="${basedir}/../${catalina.project}"/>
  <property name="jasper.home"
           value="${basedir}/../${jasper.project}/jasper2"/>
  <property name="jtc.home"
           value="${basedir}/../${jtc.project}"/>
  <property name="tomcat.home"
           value="${basedir}/../${tomcat.project}"/>

  <!-- Build Defaults -->
  <property name="catalina.build"   value="${catalina.home}/build"/>
  <property name="jasper.build"     value="${jasper.home}/build"/>
  <property name="javaservice.home" value="../javaservice"/>
  <property name="nsis.home"        value="c:\program files\nsis"/>
  <property name="servlet.home"     value="../jakarta-servletapi-4/dist"/>
  <property name="tomcat.build"     value="${basedir}/build"/>
  <property name="tomcat.dist"      value="${basedir}/dist"/>
  <property name="tomcat.release"   value="${basedir}/release"/>
  <property name="webapps.build"    value="${catalina.home}/webapps/build"/>
  <property name="webapps.dist"     value="${catalina.home}/webapps/dist"/>
  
  <!-- Some compilers will disable debugging if true. And it doesn't do anything 
       in most cases -->
  <property name="compile.optimize"     value="false"/>


  <!-- =================== DETECT: Display configuration ================== -->
  <target name="detect"
   description="Display configuration and conditional compilation flags">

    <echo message="--- ${name} ${version} Build ---"/>
    <echo message="api.home=${api.home}"/>
    <echo message="catalina.home=${catalina.home}"/>
    <echo message="jasper.home=${jasper.home}"/>
    <echo message="jtc.home=${jtc.home}"/>

    <ant dir="${catalina.home}" target="flags.display"/>

  </target>


  <!-- ===================== DEPLOY: Create Directories =================== -->
  <target name="init">
    <mkdir dir="${tomcat.build}"/>
    <mkdir dir="${tomcat.build}/classes" />

    <uptodate property="servletapi.build.notrequired"
              targetfile="${tomcat.build}/common/lib/servlet-api.jar">
      <srcfiles dir="${api.home}/jsr154/src" includes="**" />
    </uptodate>
    <uptodate property="jspapi.build.notrequired"
              targetfile="${tomcat.build}/common/lib/jsp-api.jar">
      <srcfiles dir="${api.home}/jsr152/src" includes="**" />
    </uptodate>

    <uptodate property="tomcatutil.build.notrequired"
              targetfile="${tomcat.build}/server/lib/tomcat-util.jar">
      <srcfiles dir="${jtc.home}/util/java" includes="**" />
    </uptodate>

    <uptodate property="tomcatjk.build.notrequired"
              targetfile="${tomcat.build}/server/lib/tomcat-jk2.jar">
      <srcfiles dir="${jtc.home}/jk/java" includes="**" />
    </uptodate>

    <uptodate property="tomcatcoyote.build.notrequired"
              targetfile="${tomcat.build}/server/lib/tomcat-coyote.jar">
      <srcfiles dir="${jtc.home}/coyote/src" includes="**" />
    </uptodate>

    <uptodate property="tomcathttp11.build.notrequired"
              targetfile="${tomcat.build}/server/lib/tomcat-http11.jar">
      <srcfiles dir="${jtc.home}/http11/src" includes="**" />
    </uptodate>

    <uptodate property="admin.build.notrequired" 
              targetfile="${tomcat.build}/server/webapps/admin/WEB-INF/web.xml">
      <srcfiles dir="${catalina.home}/webapps/admin" includes="**" />
    </uptodate>

  </target>


  <!-- ====================== DEPLOY: Copy Static Files =================== -->
  <target name="deploy-static" depends="init"/>


  <!-- ====================== Build all components =================== -->
  <target name="build-servletapi" unless="servletapi.build.notrequired" >
    <echo>========== Building: ${servlet-api.jar}</echo>

    <ant dir="${api.home}/jsr154" target="jar" >
        <property name="servlet-api.build" value="${tomcat.build}" />
        <property name="servlet-api.jar" value="${tomcat.build}/common/lib/servlet-api.jar"/>
    </ant>
  </target>

  <target name="build-jspapi" unless="jspapi.build.notrequired" >
    <echo>========== Building: ${jsp-api.jar}</echo>
    <ant dir="${api.home}/jsr152" target="jar">
        <property name="jsp-api.build" value="${tomcat.build}" />
        <property name="jsp-api.jar" value="${tomcat.build}/common/lib/jsp-api.jar"/>
    </ant>
  </target>

  <target name="build-tomcatutil" unless="tomcatutil.build.notrequired" >
    <echo>========== Building: tomcat-util </echo>

    <ant dir="${jtc.home}/util" target="build-main">
       <property name="jmx.jar" value="${jmx.jar}" />
       <property name="puretls.jar" value="${puretls.jar}" />
       <property name="jsse.lib" value="${jsse.lib}" />

       <property name="tomcat-util.build" value="${tomcat.build}" />
       <property name="tomcat-util.lib" value="${tomcat.build}/server/lib" />
    </ant>
  </target>

  <target name="build-tomcatjk" unless="tomcatjk.build.notrequired" >
    <echo>========== Building: tomcat-jk </echo>

    <ant dir="${jtc.home}/jk" target="jkjava">
      <property name="tomcat5.home" value="${catalina.build}"/>
      <property name="tomcat5.detect" value="true"/>
      <property name="commons-logging.jar" value="${commons-logging.jar}"/>
      <property name="jmx.jar" value="${jmx.jar}"/>
      <property name="tomcat-coyote.jar" value="${tomcat.build}/server/lib/tomcat-coyote.jar" />

      <property name="jk.build" value="${tomcat.build}"/>

      <property name="tomcat-jk.jar" value="${tomcat.build}/server/lib/tomcat-jk.jar" />
      <property name="tomcat-jkconfig.jar" value="${tomcat.build}/server/lib/jkconfig.jar" />
      <property name="tomcat-jkshm.jar" value="${tomcat.build}/server/lib/jkshm.jar" />
      <property name="tomcat-jk2.jar" value="${tomcat.build}/server/lib/tomcat-jk2.jar" />
      <property name="tomcat-jni.jar" value="${tomcat.build}/server/lib/tomcat-jni.jar" />

    </ant>
  </target>

  <target name="build-tomcatcoyote" 
          unless="tomcatcoyote.build.notrequired" 
          depends="init">
    <echo>========== Building: tomcat-coyote </echo>

    <ant dir="${jtc.home}/coyote" target="jar.tomcat5">
      <property name="catalina.home" value="${tomcat.build}"/>
      <property name="build.home" value="${tomcat.build}"/>
      <property name="tomcat5.detect" value="true"/>
      <property name="tomcat-coyote.jar" value="${tomcat.build}/server/lib/tomcat-coyote.jar" />
      <property name="servlet.jar"   value="${tomcat.build}/common/lib/servlet-api.jar"/>
    </ant>
  </target>

  <target name="build-tomcathttp11" 
          unless="tomcathttp11.build.notrequired" 
          depends="init">
    <echo>========== Building: tomcat-http11 </echo>

    <ant dir="${jtc.home}/http11" target="compile-only">
      <property name="build.home" value="${tomcat.build}"/>
      <property name="tomcat-http11.jar" value="${tomcat.build}/server/lib/tomcat-http11.jar"/>
      <property name="tomcat-coyote.jar" value="${tomcat.build}/server/lib/tomcat-coyote.jar" />
      <property name="commons-logging.jar" value="${commons-logging.jar}"/>
    </ant>
  </target>

  <target name="build-admin" unless="admin.build.notrequired" 
          depends="init" >
    <echo>========== Building: admin </echo>
    <ant dir="${catalina.home}/webapps/admin" target="build-main">
      <!-- property name="flags.hide" value="true" / -->
      <property name="webapps.build" value="${tomcat.build}/server/webapps"/>
    </ant>

    <touch file="${tomcat.build}/server/webapps/admin/WEB-INF/web.xml" />
  </target>

  <target name="build-admin-precompile" 
          depends="init" description="Builds the admin webapp" >
    <echo>========== Building: admin to  ${tomcat.build}/server/webapps </echo>
    <ant dir="${catalina.home}/webapps/admin" target="build-main">
      <property name="flags.hide" value="true" />
      <property name="webapps.build" value="${tomcat.build}/server/webapps"/>
    </ant>

    <!-- JSPC -->
    <property name="admin.base" location="${tomcat.build}/server/webapps/admin" />

    <mkdir dir="${admin.base}/WEB-INF/src/admin" />

    <taskdef classname="org.apache.jasper.JspC" name="jasper2" >
      <classpath id="jspc.classpath">
        <pathelement location="${java.home}/../lib/tools.jar"/>
        <fileset dir="${tomcat.build}/server/lib">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${tomcat.build}/common/lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="${build.dir}/classes"/>
      </classpath>
    </taskdef>

    <jasper2 verbose="0"
             package="admin"
             compile="false"
             validateXml="false"
             uriroot="${admin.base}"
             webXmlFragment="${admin.base}/WEB-INF/generated_web.xml"
             outputDir="${admin.base}/WEB-INF/src/admin" />

    <loadfile property="generated_web.xml"
              srcFile="${admin.base}/WEB-INF/generated_web.xml"  />

    <replace file="${admin.base}/WEB-INF/web.xml"
             token="&lt;!--GENERATED_JSPS--&gt;" value="${generated_web.xml}" />

    <javac destdir="${admin.base}/WEB-INF/classes"
           optimize="off"
           debug="on"
           srcdir="${admin.base}/WEB-INF/src" >
      <classpath>
        <pathelement location="${java.home}/../lib/tools.jar"/>
        <fileset dir="${tomcat.build}/server/lib">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${admin.base}/WEB-INF/lib">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${tomcat.build}/common/lib">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="${tomcat.build}/classes"/>
      </classpath>
      <include name="admin/**" />
    </javac>


  </target>

  <target name="build" depends="init"
          description="Builds all components">

    <antcall target="build-servletapi"/>
    <antcall target="build-jspapi"/>
    <antcall target="build-tomcatutil"/>

    <echo>========== Building: catalina </echo>

    <ant dir="${catalina.home}/catalina" target="catalina-jars">
        <!-- in-place building -->
        <property name="catalina.build" value="${tomcat.build}" />
        <property name="catalina.deploy" value="${tomcat.build}" />
        <property name="flags.hide" value="true" />
    </ant>

    <antcall target="build-tomcatcoyote"/>

    <antcall target="build-tomcatjk"/>

    <antcall target="build-tomcathttp11"/>
      
    <echo>========== Building: jasper </echo>

    <ant dir="${jasper.home}"   target="deploy">
      <property name="catalina.home" value="${tomcat.build}"/>
    </ant>

    <!-- Correct permissions and line endings on "bin" scripts -->
    <fixcrlf srcdir="${tomcat.build}/bin"   includes="*.sh"  eol="lf"/>
    <fixcrlf srcdir="${tomcat.build}/bin"   includes="*.bat" eol="crlf"/>
    <chmod      dir="${tomcat.build}/bin"   includes="*.sh"  perm="+x"/>
  </target>

  <!-- ====================== Build dependent code =================== -->

  <target name="build-commons-logging" unless="commons-logging.build.notrequired" >
    <echo>========== Building: commons-logging </echo>

    <ant dir="${cvs.base}/jakarta-commons/logging" target="compile-only" >
        <property name="commons-logging-api.jar" location="${tomcat.build}/common/lib/commons-logging-api.jar" />
        <property name="commons-logging.jar" location="${tomcat.build}/server/lib/commons-logging.jar" />
        <property name="build.home" value="${tomcat.build}" />
    </ant>
  </target>

  <target name="build-commons-modeler" unless="commons-modeler.build.notrequired" >
    <echo>========== Building: commons-modeler </echo>

    <ant dir="${cvs.base}/jakarta-commons/modeler" target="jar" >
        <property name="commons-logging.jar" location="${tomcat.build}/server/lib/commons-logging.jar" />
        <property name="commons-modeler.jar" location="${tomcat.build}/server/lib/commons-modeler.jar" />
        <property name="build.home" value="${tomcat.build}" />
    </ant>
  </target>

  <target name="build-depends" depends="init"
          description="Builds various dependent components">
    <antcall target="build-commons-logging" />
    <antcall target="build-commons-modeler" />

  </target>



  <!-- ====================== DEPLOY: Deploy Components =================== -->

  <target name="deploy" depends="deploy-static"
          description="Build and deploy all components">

    <echo>Target: Servlet API - Dist ...</echo>
    <ant dir="${api.home}/jsr154" target="dist"/>

    <echo>Target: JSP API - Dist ...</echo>
    <ant dir="${api.home}/jsr152" target="dist"/>

    <echo>Target: Catalina - Deploy ...</echo>
    <ant dir="${catalina.home}" target="deploy"/>
    <!-- 
    <ant dir="${catalina.home}" target="deploy-catalina"/>
    <antcall target="build-tomcat-coyote"/>
    <antcall target="build-tomcat-jk"/>
    <antcall target="build-tomcat-http11"/>
     -->
    <copy todir="${tomcat.build}">
      <fileset dir="${catalina.home}/build"/>
    </copy>

    <filter token="VERSION" value="${version}"/>

    <!-- Add release notes to the root webapp -->
    <copy file="./RELEASE-NOTES"
        tofile="${tomcat.build}/webapps/ROOT/RELEASE-NOTES.txt"
        filtering="true" />

    <!-- Add documents to the tomcat-docs webapp -->
    <copy todir="${tomcat.build}/webapps/tomcat-docs">
      <fileset dir=".">
        <include name="BUILDING.txt"/>
        <include name="RUNNING.txt"/>
      </fileset>
    </copy>
    <copy file="./RELEASE-NOTES"
        tofile="${tomcat.build}/webapps/tomcat-docs/RELEASE-NOTES.txt"
        filtering="true" />
    <copy file="./CHANGELOG"
        tofile="${tomcat.build}/webapps/tomcat-docs/CHANGELOG.txt" />

    <!-- Copy the examples webapps -->
    <copy file="${api.home}/jsr152/dist/examples/examples.war"
          tofile="${tomcat.build}/webapps/jsp-examples.war" />
    <copy file="${api.home}/jsr154/dist/examples/examples.war"
          tofile="${tomcat.build}/webapps/servlets-examples.war" />

    <echo>Target: Jasper - Deploy ...</echo>
    <ant dir="${jasper.home}"   target="deploy">
      <property name="catalina.home" value="${tomcat.build}"/>
    </ant>

    <!-- Correct permissions and line endings on "bin" scripts -->
    <fixcrlf srcdir="${tomcat.build}/bin"   includes="*.sh"  eol="lf"/>
    <fixcrlf srcdir="${tomcat.build}/bin"   includes="*.bat" eol="crlf"/>
    <chmod      dir="${tomcat.build}/bin"   includes="*.sh"  perm="+x"/>

  </target>


  <!-- ====================== COMBO: Clean All Directories ================ -->
  <target name="clean"
   description="Clean all components">
    <delete dir="${tomcat.build}"/>

    <echo>Target: Servlet API - Clean ...</echo>
    <ant dir="${api.home}/jsr154" target="clean"/>

    <echo>Target: JSP API - Clean ...</echo>
    <ant dir="${api.home}/jsr152" target="clean"/>

    <echo>Target: Catalina - Clean ...</echo>
    <ant dir="${catalina.home}" target="clean"/>

    <echo>Target: Jasper - Clean ...</echo>
    <ant dir="${jasper.home}"   target="clean">
      <property name="catalina.home" value="${tomcat.build}"/>
    </ant>

    <delete dir="${tomcat.dist}"/>

  </target>


  <!-- ======================= COMBO: Build All Components ================ -->
  <target name="all"
   description="Clean, build, and deploy all components">

    <echo>Target: Servlet API - Dist ...</echo>
    <ant dir="${api.home}/jsr154" target="dist"/>

    <echo>Target: JSP API - Dist ...</echo>
    <ant dir="${api.home}/jsr152" target="dist"/>

    <echo>Target: Catalina - All ...</echo>
    <ant dir="${catalina.home}" target="all"/>

    <echo>Target: Jasper - All ...</echo>
    <ant dir="${jasper.home}"   target="all">
      <property name="catalina.home" value="${tomcat.build}"/>
    </ant>
  </target>


  <!-- ======================= COMBO: Test All Components ================= -->
  <target name="test"
   description="Unit tests on all components">
    <echo>Target: Catalina - Test ...</echo>
    <ant dir="${catalina.home}" target="test"/>
    <echo>Target: Jasper - Test ...</echo>
    <ant dir="${jasper.home}"   target="test">
      <property name="catalina.home" value="${tomcat.build}"/>
    </ant>
  </target>

  <!-- ======================= WATCHDOG: Run Watchdog Tests================ -->
  <target name="watchdog"
   description="Watchdog Servlet Container Tests">
    <property name="catalina.base" location="${tomcat.build}/tmp/tomcat"/>
    <delete dir="${catalina.base}"/>
    <mkdir dir="${catalina.base}"/>
    <copy todir="${catalina.base}/conf">
      <fileset dir="${tomcat.build}/conf"/>
    </copy>
    <copy todir="${catalina.base}/webapps">
      <fileset dir="${tomcat.build}/webapps"/> 
    </copy>
    <copy todir="${catalina.base}/work">
      <fileset dir="${tomcat.build}/work"/> 
    </copy>
    <copy todir="${catalina.base}/logs">
      <fileset dir="${tomcat.build}/logs"/> 
    </copy>
    <copy todir="${catalina.base}/server/webapps">
      <fileset dir="${tomcat.build}/server/webapps"/> 
    </copy>
    <copy todir="${catalina.base}/temp">
      <fileset dir="${tomcat.build}/temp"/> 
    </copy>
    <copy todir="${catalina.base}/webapps">
      <fileset dir="${watchdog.home}/dist/webapps"/>
    </copy>

    <java classname="LauncherBootstrap" fork="yes">
      <arg value="-launchfile"/>
      <arg value="catalina.xml"/>
      <arg value="-verbose"/>
      <arg value="catalina"/>
      <arg value="-Dcatalina.base=${catalina.base}"/>
      <arg value="start"/>
      <classpath>
        <pathelement path="${java.class.path}"/>
        <pathelement path="${tomcat.build}/bin"/>
      </classpath>
    </java>

    <sleep seconds="60"/>

    <ant dir="${watchdog.home}/dist" target="all"/>
   
    <java classname="LauncherBootstrap" fork="yes">
      <arg value="-launchfile"/>
      <arg value="catalina.xml"/>
      <arg value="-verbose"/>
      <arg value="catalina"/>
      <arg value="-Dcatalina.base=${catalina.base}"/>
      <arg value="stop"/>
      <classpath>
        <pathelement path="${java.class.path}"/>
        <pathelement path="${tomcat.build}/bin"/>
      </classpath>
    </java>
    
  </target>


  <!-- ====================== DIST: Create Directories ==================== -->
  <target name="dist-prepare">
    <mkdir dir="${tomcat.dist}"/>
    <mkdir dir="${tomcat.dist}/bin"/>
    <mkdir dir="${tomcat.dist}/common"/>
    <mkdir dir="${tomcat.dist}/common/classes"/>
    <mkdir dir="${tomcat.dist}/common/endorsed"/>
    <mkdir dir="${tomcat.dist}/common/lib"/>
    <mkdir dir="${tomcat.dist}/conf"/>
    <mkdir dir="${tomcat.dist}/logs"/>
    <mkdir dir="${tomcat.dist}/server"/>
    <mkdir dir="${tomcat.dist}/server/classes"/>
    <mkdir dir="${tomcat.dist}/server/lib"/>
    <mkdir dir="${tomcat.dist}/shared/classes"/>
    <mkdir dir="${tomcat.dist}/shared/lib"/>
    <mkdir dir="${tomcat.dist}/webapps"/>
    <mkdir dir="${tomcat.dist}/work"/>
    <mkdir dir="${tomcat.dist}/temp"/>
  </target>


  <!-- ====================== DIST: Copy Static Files ===================== -->
  <target name="dist-static" depends="dist-prepare">

    <!-- Copy the top-level documentation files -->
    <copy todir="${tomcat.dist}">
      <fileset dir=".">
        <include name="LICENSE"/>
        <include name="INSTALLING.txt"/>
        <include name="BUILDING.txt"/>
        <include name="README.txt"/>
        <include name="RELEASE*"/>
        <include name="RUNNING.txt"/>
      </fileset>
    </copy>

    <!-- Copy the contents of each "build" directory -->
    <copy todir="${tomcat.dist}/bin">
      <fileset dir="${tomcat.build}/bin" />
    </copy>
    <copy todir="${tomcat.dist}/common/classes">
      <fileset dir="${tomcat.build}/common/classes" />
    </copy>
    <copy todir="${tomcat.dist}/common/endorsed">
      <fileset dir="${tomcat.build}/common/endorsed" />
    </copy>
    <copy todir="${tomcat.dist}/common/lib">
      <fileset dir="${tomcat.build}/common/lib" />
    </copy>
    <copy todir="${tomcat.dist}/conf">
      <fileset dir="${tomcat.build}/conf" />
    </copy>
    <copy todir="${tomcat.dist}/server/lib">
      <fileset dir="${tomcat.build}/server/lib" />
    </copy>
    <copy todir="${tomcat.dist}/server/webapps">
      <fileset dir="${tomcat.build}/server/webapps" />
    </copy>
    <copy todir="${tomcat.dist}/shared/classes">
      <fileset dir="${tomcat.build}/shared/classes" />
    </copy>
    <copy todir="${tomcat.dist}/shared/lib">
      <fileset dir="${tomcat.build}/shared/lib" />
    </copy>
    <copy todir="${tomcat.dist}/webapps">
      <fileset dir="${tomcat.build}/webapps" />
    </copy>

    <!-- Correct permissions and line endings on "bin" scripts -->
    <fixcrlf srcdir="${tomcat.dist}/bin"   includes="*.sh"  eol="lf"/>
    <fixcrlf srcdir="${tomcat.dist}/bin"   includes="*.bat" eol="crlf"/>
    <chmod      dir="${tomcat.dist}/bin"   includes="*.sh"  perm="+x"/>

  </target>


  <!-- ====================== DIST: Create Javadoc ======================== -->
  <target name="dist-javadoc">
    <ant dir="${catalina.home}" target="dist-javadoc"/>
    <mkdir  dir="${tomcat.dist}/webapps/tomcat-docs/catalina/docs/api"/>
    <copy todir="${tomcat.dist}/webapps/tomcat-docs/catalina/docs/api">
      <fileset dir="${catalina.build}/javadoc" />
    </copy>
    <ant dir="${jasper.home}" target="javadoc"/>
    <mkdir  dir="${tomcat.dist}/webapps/tomcat-docs/jasper/docs/api"/>
    <copy todir="${tomcat.dist}/webapps/tomcat-docs/jasper/docs/api">
      <fileset dir="${jasper.build}/javadoc" />
    </copy>
    <mkdir  dir="${tomcat.dist}/webapps/tomcat-docs/servletapi"/>
    <copy todir="${tomcat.dist}/webapps/tomcat-docs/servletapi">
      <fileset dir="${api.home}/jsr154/dist/docs/api" />
    </copy>
    <mkdir  dir="${tomcat.dist}/webapps/tomcat-docs/jspapi"/>
    <copy todir="${tomcat.dist}/webapps/tomcat-docs/jspapi">
      <fileset dir="${api.home}/jsr152/dist/docs/api" />
    </copy>
  </target>


  <!-- ====================== DIST: Create Sources ======================== -->
  <target name="dist-source">

    <mkdir  dir="${tomcat.dist}/src"/>
    <mkdir  dir="${tomcat.dist}/src/${api.project}"/>
    <mkdir  dir="${tomcat.dist}/src/${tomcat.project}"/>
    <mkdir  dir="${tomcat.dist}/src/${catalina.project}"/>
    <mkdir  dir="${tomcat.dist}/src/${jtc.project}"/>
    <mkdir  dir="${tomcat.dist}/src/${jasper.project}"/>
    <mkdir  dir="${tomcat.dist}/src/${jasper.project}/jasper2"/>

    <!-- Main build file -->
    <copy todir="${tomcat.dist}/src">
      <fileset dir="${basedir}/resources">
        <include name="build.xml" />
      </fileset>
    </copy>

    <!-- jakarta-tomcat-5 source -->
    <copy todir="${tomcat.dist}/src/${tomcat.project}">
      <fileset dir="${basedir}">
        <exclude name="build/**"/>
        <exclude name="dist/**"/>
        <exclude name="release/**"/>
        <exclude name="build.properties"/>
      </fileset>
    </copy>

    <!-- jakarta-servletapi-5 source -->
    <copy todir="${tomcat.dist}/src/${api.project}">
      <fileset dir="${api.home}">
        <include name="jsr154/**"/>
        <include name="jsr152/**"/>
        <exclude name="**/build/**"/>
        <exclude name="**/dist/**"/>
        <exclude name="build.properties"/>
      </fileset>
    </copy>

    <!-- jakarta-tomcat-5 source -->
    <copy todir="${tomcat.dist}/src/${catalina.project}">
      <fileset dir="${catalina.home}">
        <exclude name="**/build/**"/>
        <exclude name="**/dist/**"/>
      </fileset>
    </copy>

    <!-- jakarta-tomcat-jasper source -->
    <copy todir="${tomcat.dist}/src/${jasper.project}/jasper2">
      <fileset dir="${jasper.home}">
        <exclude name="**/build/**"/>
        <exclude name="**/dist/**"/>
      </fileset>
    </copy>

    <!-- jakarta-tomcat-connectors source -->
    <copy todir="${tomcat.dist}/src/${jtc.project}">
      <fileset dir="${jtc.home}">
        <exclude name="coyote/build/**"/>
        <exclude name="http11/build/**"/>
        <exclude name="jk/build/**"/>
        <exclude name="util/build/**"/>
        <exclude name="webapp/**"/>
        <exclude name="lib/**"/>
        <exclude name="build.properties"/>
      </fileset>
    </copy>
  </target>


  <!-- ====================== DIST: Create Archives ======================= -->
  <target name="dist" depends="deploy,dist-static,dist-javadoc"
   description="Create binary distribution">
  </target>


  <!-- ================= DIST: Create Windows Installer =================== -->
  <target name="installer"
   description="Create Windows installer" if="execute.installer">
    <echo message="Builds a Windows installer based on Nullsoft Installer"/>
    <echo message="NSIS must be installed in the default directory"/>
    <copy todir="${tomcat.dist}">
      <fileset dir="resources" />
    </copy>
    <copy file="${nsis.installoptions.dll}" todir="${tomcat.dist}" />
    <copy file="${javaservice.exe}" tofile="${tomcat.dist}/bin/tomcat.exe" />
    <filter token="VERSION" value="${version}"/>
    <copy file="tomcat.nsi" tofile="${tomcat.dist}/tomcat.nsi" 
     filtering="true"/>
    <exec dir="${tomcat.dist}" executable="${nsis.exe}">
      <arg value="/DNSISDIR=${nsis.home}" />
      <arg value="tomcat.nsi" />
    </exec>
    <move file="${tomcat.dist}/tomcat-installer.exe" 
     tofile="${tomcat.release}/v${version}/bin/${final.name}.exe" />
  </target>


  <!-- ==================== RELEASE: Create Release ======================= -->
  <target name="release" depends="clean,dist,dist-source,prepare-release,installer,package-zip,package-tgz,package-src-zip,package-src-tgz"
   description="Create a Tomcat 5 packaged distribution">

    <filter token="VERSION" value="${version}"/>
    <copy file="KEYS" 
         todir="${tomcat.release}/v${version}"/>
    <copy file="RELEASE-NOTES" 
         todir="${tomcat.release}/v${version}"
     filtering="true"/>
    <copy file="CHANGELOG" 
         todir="${tomcat.release}/v${version}"
     filtering="true"/>
    <copy file="resources/welcome.main.html" 
        tofile="${tomcat.release}/v${version}/README.html"
     filtering="true"/>
    <copy file="resources/welcome.bin.html" 
        tofile="${tomcat.release}/v${version}/bin/README.html"
     filtering="true"/>

  </target>

  <target name="package-zip">
    <zip zipfile="${tomcat.release}/v${version}/bin/${final.name}.zip">
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="bin/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="common/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="conf/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="logs/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="server/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="shared/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="webapps/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="work/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}"
       includes="temp/**" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="LICENSE" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="README.txt" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="RELEASE-NOTES" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="CHANGELOG" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="RUNNING.txt" />
      <zipfileset dir="${tomcat.dist}" prefix="${final.name}" 
       includes="BENCHMARKS.txt" />
    </zip>
  </target>

  <target name="prepare-release">

    <mkdir dir="${tomcat.release}"/>
    <mkdir dir="${tomcat.release}/v${version}"/>
    <mkdir dir="${tomcat.release}/v${version}/bin"/>
    <mkdir dir="${tomcat.release}/v${version}/src"/>

    <condition property="execute.installer">
      <and>
        <os family="windows" />
        <available file="${javaservice.exe}" />
        <available file="${nsis.exe}" />
        <available file="${nsis.installoptions.dll}" />
      </and>
    </condition>

  </target>

  <target name="package-tgz">
    <fixcrlf srcdir="${tomcat.dist}" 
     includes="*.txt,LICENSE" eol="lf"/>
    <fixcrlf srcdir="${tomcat.dist}/conf" eol="lf"/>
    <tar longfile="gnu" compression="gzip"
          tarfile="${tomcat.release}/v${version}/bin/${final.name}.tar.gz">
      <tarfileset dir="${tomcat.dist}" mode="755" prefix="${final.name}">
        <include name="bin/catalina.sh" />
        <include name="bin/digest.sh" />
        <include name="bin/jasper.sh" />
        <include name="bin/jspc.sh" />
        <include name="bin/setclasspath.sh" />
        <include name="bin/startup.sh" />
        <include name="bin/shutdown.sh" />
        <include name="bin/tool-wrapper.sh" />
      </tarfileset>
      <tarfileset dir="${tomcat.dist}" prefix="${final.name}">
        <exclude name="bin/catalina.sh" />
        <exclude name="bin/digest.sh" />
        <exclude name="bin/jasper.sh" />
        <exclude name="bin/jspc.sh" />
        <exclude name="bin/setclasspath.sh" />
        <exclude name="bin/startup.sh" />
        <exclude name="bin/shutdown.sh" />
        <exclude name="bin/tool-wrapper.sh" />
        <exclude name="src/**" />
      </tarfileset>
    </tar>
  </target>

  <target name="package-src-zip">
    <!-- Package Tomcat Source -->
    <zip zipfile="${tomcat.release}/v${version}/src/${final-src.name}.zip">
      <zipfileset dir="${tomcat.dist}/src" prefix="${final-src.name}" />
    </zip>
  </target>

  <target name="package-src-tgz">
    <!-- Package Tomcat Source -->
    <fixcrlf srcdir="${tomcat.dist}" 
     excludes="**/*.jar,**/*.gif,**/*.bmp,**/*.jpg,**/*.ico" eol="lf"/>
    <tar longfile="gnu" compression="gzip" 
          tarfile="${tomcat.release}/v${version}/src/${final-src.name}.tar.gz">
      <tarfileset dir="${tomcat.dist}" mode="755" prefix="${final-src.name}">
        <include name="${jtc.project}/jk/native/buildconf.sh" />
        <include name="${jtc.project}/jk/native/apache-1.3/build-hpux-cc.sh" />
        <include name="${jtc.project}/jk/native/apache-1.3/build-solaris.sh" />
        <include name="${jtc.project}/jk/native/apache-1.3/build-unix.sh" />
        <include name="${jtc.project}/jk/native/apache-2.0/build-unix.sh" />
        <include name="${jtc.project}/jk/native/apache-2.0/install-unix.sh" />
        <include name="${jtc.project}/jk/native/domino/mkini.sh" />
      </tarfileset>
      <tarfileset dir="${tomcat.dist}" prefix="${final-src.name}">
        <include name="src/**" />
        <exclude name="${jtc.project}/jk/native/buildconf.sh" />
        <exclude name="${jtc.project}/jk/native/apache-1.3/build-hpux-cc.sh" />
        <exclude name="${jtc.project}/jk/native/apache-1.3/build-solaris.sh" />
        <exclude name="${jtc.project}/jk/native/apache-1.3/build-unix.sh" />
        <exclude name="${jtc.project}/jk/native/apache-2.0/build-unix.sh" />
        <exclude name="${jtc.project}/jk/native/apache-2.0/install-unix.sh" />
        <exclude name="${jtc.project}/jk/native/domino/mkini.sh" />
      </tarfileset>
    </tar>
  </target>

  <!-- ==================== Download or build the required binary packages ==================== -->

  <target name="download" depends="proxyflags" 
          description="Download binary packages" >

    <!-- commons-digester needs ../LICENSE -->
    <!-- That is ugly XXX needs a review -->
    <copy file="LICENSE" tofile="../LICENSE"/>
    <copy file="LICENSE" tofile="${base.path}/LICENSE"/>

    <!-- Downdown any sub package or tools needed. -->
    <antcall target="downloadgz">
      <param name="sourcefile" value="${commons-beanutils.loc}"/>
      <param name="destfile" value="${commons-beanutils.jar}"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${commons-collections.loc}"/>
      <param name="destfile" value="${commons-collections.jar}"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${commons-logging.loc}"/>
      <param name="destfile" value="${commons-logging.jar}"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${log4j.loc}"/>
      <param name="destfile" value="${log4j.jar}"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${logkit.loc}"/>
      <param name="destfile" value="${logkit.jar}"/>
    </antcall>

    <antcall target="cvsbuild">
      <param name="location" value="${commons-digester.loc}"/>
      <param name="subdir" value="${commons-digester.home}"/>
      <param name="destfile" value="${commons-digester.jar}"/>
    </antcall>

    <antcall target="cvsbuild">
      <param name="location" value="${commons-fileupload.loc}"/>
      <param name="subdir" value="${commons-fileupload.home}"/>
      <param name="destfile" value="${commons-fileupload.jar}"/>
      <param name="final.name" value="commons-fileupload"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${regexp.loc}"/>
      <param name="destfile" value="${regexp.jar}"/>
    </antcall>

    <antcall target="downloadgz">
      <!-- xerces2 brings 2 files, test for one of them -->
      <param name="sourcefile" value="${xerces.loc}"/>
      <param name="destfile" value="${xmlParserAPIs.jar}"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${jmx.loc}"/>
      <param name="destfile" value="${jmx.jar}"/>
    </antcall>

    <antcall target="downloadzip">
      <param name="sourcefile" value="${junit.loc}"/>
      <param name="destfile" value="${junit.jar}"/>
      <param name="destdir" value="${base.path}"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${commons-launcher.loc}"/>
      <param name="destfile" value="${commons-launcher.jar}"/>
    </antcall>

    <antcall target="downloadgz">
      <param name="sourcefile" value="${commons-pool.loc}"/>
      <param name="destfile" value="${commons-pool.jar}"/>
    </antcall>

    <antcall target="downloadzip">
      <param name="sourcefile" value="${javagroups.loc}"/>
      <param name="destfile" value="${javagroups.jar}"/>
      <param name="destdir" value="${base.path}"/>
    </antcall>

    <antcall target="downloadzip">
      <param name="sourcefile" value="${commons-dbcp.loc}"/>
      <param name="destfile" value="${commons-dbcp.jar}"/>
      <param name="destdir" value="${base.path}"/>
    </antcall>

<!--
    <antcall target="downloadgz">
      <param name="sourcefile" value="${commons-modeler.loc}"/>
      <param name="destfile" value="${commons-modeler.jar}"/>
    </antcall>
--> 

    <antcall target="cvsbuild">
      <param name="location" value="${commons-modeler.cvs.loc}"/>
      <param name="subdir" value="${commons-modeler.home}"/>
      <param name="destfile" value="${commons-modeler.jar}"/>
    </antcall>

    <antcall target="downloadfile">
      <param name="sourcefile" value="${nsis.loc}"/>
      <param name="destfile" value="${nsis.exe}"/>
      <param name="destdir" value="${nsis.home}"/>
    </antcall>
    <antcall target="downloadgz">
      <param name="sourcefile" value="${struts.loc}"/>
      <param name="destfile" value="${struts.jar}"/>
    </antcall>
    <antcall target="downloadfile">
      <param name="sourcefile" value="${tyrex.loc}"/>
      <param name="destfile" value="${tyrex.jar}"/>
      <param name="destdir" value="${tyrex.home}"/>
    </antcall>

  </target>

  <target name="download.watchdog"  depends="proxyflags"
    description="Download Watchdog binary">

    <antcall target="cvsbuild">
      <param name="location" value="${servlet23api.loc}"/>
      <param name="subdir" value="${servlet23api.home}"/>
      <param name="destfile" value="${servlet23api.jar}"/>
    </antcall>
    <antcall target="cvsbuild">
      <param name="servlet22api.home" value="${servlet23api.home}"/>
      <param name="location" value="${watchdog.loc}"/>
      <param name="subdir" value="${watchdog.home}"/>
      <param name="destfile" value="${watchdog.war}"/>
    </antcall>

  </target>

  <target name="proxyflags">
    <!-- check proxy parameters. -->
    <condition property="useproxy">
      <equals arg1="${proxy.use}" arg2="on" />
    </condition>
  </target>

  <target name="setproxy"  if="useproxy">
    <taskdef name="setproxy"
      classname="org.apache.tools.ant.taskdefs.optional.net.SetProxy" />
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/> 
    <echo message="Using ${proxy.host}:${proxy.port} to download ${sourcefile}"/>
  </target>

  <target name="testexist">
    <echo message="Testing  for ${destfile}"/>
    <available file="${destfile}" property="exist"/>
  </target>

  <target name="downloadgz" unless="exist" depends="setproxy,testexist">
    <!-- Download and extract the package -->
    <get src="${sourcefile}" dest="${base.path}/file.tar.gz" />
    <gunzip src="${base.path}/file.tar.gz" dest="${base.path}/file.tar"/>
    <untar src="${base.path}/file.tar" dest="${base.path}"/>
    <delete file="${base.path}/file.tar"/>
    <delete file="${base.path}/file.tar.gz"/>
  </target>

  <target name="downloadzip" unless="exist" depends="setproxy,testexist">
    <!-- Download and extract the package -->
    <get src="${sourcefile}" dest="${base.path}/file.zip" />
    <mkdir dir="${destdir}" />
    <unzip src="${base.path}/file.zip" dest="${destdir}"/>
    <delete file="${base.path}/file.zip"/>
  </target>

  <target name="downloadfile" unless="exist" depends="setproxy,testexist">
    <!-- Download extract the file -->
    <mkdir dir="${destdir}" />
    <get src="${sourcefile}" dest="${destfile}" />
  </target>

  <target name="cvsbuild" unless="exist" depends="testexist">
    <!-- cvs checkout and ant dist + copy of jar file -->
    <echo message="cvs co ${location} and ant dist in ${subdir}"/>
    <mkdir dir="${base.path}/tmp"/>
    <cvs cvsRoot="${cvsroot}"
      package="${location}"
      dest="${base.path}/tmp"
    />
    <!-- the software is checked out in ${{base.path}/tmp/${location} -->
    <move todir="${subdir}">
      <fileset dir="${base.path}/tmp/${location}/"/>
    </move>
    <!-- now build the distribution -->
    <ant dir="${subdir}" target="dist"/>
  </target>

  <target name="update"  depends="checkout" />

  <target name="checkout" 
          description="Update or checkout required sources from CVS">
    <cvs cvsroot="${cvsroot}" quiet="true"
         command="checkout -P jakarta-tomcat-catalina" 
         dest=".."/>
    <cvs cvsroot="${cvsroot}" quiet="true"
         command="checkout -P jakarta-tomcat-jasper" 
         dest=".."/>
    <cvs cvsroot="${cvsroot}" quiet="true"
         command="checkout -P jakarta-tomcat-connectors" 
         dest=".."/>
    <cvs cvsroot="${cvsroot}" quiet="true"
         command="checkout -P jakarta-servletapi-5" 
         dest=".."/>
    <cvs cvsroot="${cvsroot}" quiet="true"
         command="checkout -P jakarta-commons" 
         dest=".."/>
  </target>


  <target name="jfc">
    <antcall target="cvsbuild">
      <param name="location" value="${commons-daemon.loc}"/>
      <param name="subdir" value="${commons-daemon.home}"/>
      <param name="destfile" value="${commons-daemon.jar}"/>
    </antcall>
  </target>

  <!-- ==================== Modeler tricks ==================== 
  -->
  <target name="convert-mbeans" description="Hack: regenerate the ser form of the descriptors">
    <path id="tomcatCP" >
      <fileset dir="${tomcat.build}/common/lib" includes="*.jar"/>
      <fileset dir="${tomcat.build}/server/lib" includes="*.jar" />
    </path>
    <taskdef resource="org/apache/commons/modeler/ant/ant.properties"
             classpathref="tomcatCP" />

    <mbeans-descriptors file="${catalina.home}/catalina/src/share/org/apache/catalina/mbeans/mbeans-descriptors.xml"
              out="build/classes/org/apache/catalina/mbeans/mbeans-descriptors.xml.ser" />
  </target>

</project>
