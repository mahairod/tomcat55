<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document>

    &project;

    <properties>
        <author email="leslie.hughes@rubus.com">Les Hughes</author>
        <author email="david-tomcat@haraburda.com">David Haraburda</author>
        <title>JNDI Datasource Examples HOW-TO</title>
    </properties>

<body>


<section name="Introduction">
<p>JNDI Datasource configuration is covered extensively in the JNDI-Resources-HOWTO 
however, feedback from <code>tomcat-user</code> has shown that specifics for individual 
configurations can be rather tricky.</p>

<p>Here then are some example configurations that have posted to tomcat-user
for popular databases.</p>
</section>
<section name="Jakarta DBCP Pooled Configurations">
<p>For each of these configurations you will need the following Jakarta Commons projects
Note that currently, these all employ connection pooling
via the Jakarta-commons connection pool. Also, you should be aware that since these 
notes are derived from the mysql configuration and/or feedback from <code>tomcat-user</code>. 
YMMV :-). Please let us know if you have any other tested configurations
that you feel may be of use to the wider audience, or if you feel we can 
improve this section
in anyway.</p>
<ul>
<li>DBCP Nightly build &gt; 20020523</li>
<li>collections 2.0</li>
<li>pool 1.0</li>
</ul>
<subsection name="Common Requirements">
<p>Here are some common gotchas to consider</p>
<ul>
<li>Datasource related classes (drivers, pools etc) should be installed in <code>$CATALINA_HOME/common/lib</code> 
to enable the server to find your classes when it creates your Datasources</li>
<li>Third Party drivers should be in jarfiles, not zipfiles as by default, Tomcat
only adds <code>$CATALINA_HOME/common/lib/*.jar</code> to the classpath</li>
</ul>
</subsection>


<subsection name="mySQL using Jakarta Commons Connection Pool">
    <h3>0.   Software Manifest</h3>
    <p>Starting with the correct sotftware is manifestly important, so here's a list of
    what we've found to work. Let us know of your success stories with other versions.</p>
    <ul>
    <li>Tomcat 5</li>
    <li>mySQL 4.0.1alpha</li>
    <li>mm.mysql 2.0.14 (JDBC Driver)</li>
    </ul>
    
    <h3>1.  Installation</h3>
    <p>Ensure that you follow these instructions as variations can cause problems.</p>
    <ul>
    <li>Install mm.mysql driver, DBCP, collections and pool jarfiles into
    <code>$CATALINA_HOME/common/lib</code>. You will experience problems if you place
    these jarfiles in your webapp's <code>WEB-INF/lib</code> directory, in your 
    <code>$JAVA_HOME/jre/lib/ext</code> or anywhere else, so dont.</li>
    <li>Create a new test user, a new database and a single test table.
    Your mySQL user <b>must</b> have a password assigned. The driver
    will fail if you try to connect with an empty password.</li></ul>
    <source>
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO javauser@localhost 
    -&gt;   IDENTIFIED BY 'javadude' WITH GRANT OPTION;
mysql&gt; create database javatest;
mysql&gt; use javatest;
mysql&gt; create table testdata (
    -&gt;   id int not null auto_increment primary key,
    -&gt;   foo varchar(25), 
    -&gt;   bar int);
    </source>
    <p>Note: the above user should be removed once testing is complete!</p>
    <ul><li>Next insert some test data into the testdata table</li></ul>
    <source>
mysql&gt; insert into testdata values(null, 'hello', 12345);
Query OK, 1 row affected (0.00 sec)

mysql> select * from testdata;
+----+-------+-------+
| ID | FOO   | BAR   |
+----+-------+-------+
|  1 | hello | 12345 |
+----+-------+-------+
1 row in set (0.00 sec)

mysql&gt;
</source>
    <ul><li>Now create a simple test.jsp for use later.</li></ul>
    <source>
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;DB Test&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;

  &lt;%
    foo.DBTest tst = new foo.DBTest();
    tst.init();
  %&gt;

  &lt;h2&gt;Results&lt;/h2&gt;
    Foo &lt;%= tst.getFoo() %&gt;&lt;br/&gt;
    Bar &lt;%= tst.getBar() %&gt;

  &lt;/body&gt;
&lt;/html&gt;
</source>
    <ul><li>And create a Java class to actually use your new Datasource and connection pool. Note: this
    code isn't anywhere near production ready - it's only supposed to be used as a simple test :-)</li></ul>
    <source>
package foo;

import javax.naming.*;
import javax.sql.*;
import java.sql.*;

public class DBTest {

  String foo = "Not Connected";
  int bar = -1;
    
  public void init() {
    try{
      Context ctx = new InitialContext();
      if(ctx == null ) 
          throw new Exception("Boom - No Context");

      DataSource ds = 
            (DataSource)ctx.lookup(
               "java:comp/env/jdbc/TestDB");

      if (ds != null) {
        Connection conn = ds.getConnection();
              
        if(conn != null)  {
            foo = "Got Connection "+conn.toString();
            Statement stmt = conn.createStatement();
            ResultSet rst = 
                stmt.executeQuery(
                  "select id, foo, bar from testdata");
            if(rst.next()) {
               foo=rst.getString(2);
               bar=rst.getInt(3);
            }
            conn.close();
        }
      }
    }catch(Exception e) {
      e.printStackTrace();
    }
 }

 public String getFoo() { return foo; }
 public int getBar() { return bar;}
}
</source>
  <ul><li>Now create a <code>WEB-INF/web.xml</code> for this test application</li></ul>
  <source>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
    &lt;!DOCTYPE web-app PUBLIC 
    "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
    "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;
&lt;web-app&gt;  
  &lt;description&gt;mySQL Test App&lt;/description&gt;
  &lt;resource-ref&gt;
      &lt;description&gt;DB Connection&lt;/description&gt;
      &lt;res-ref-name&gt;jdbc/TestDB&lt;/res-ref-name&gt;
      &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
      &lt;res-auth&gt;Container&lt;/res-auth&gt;
  &lt;/resource-ref&gt;
&lt;/web-app&gt;
</source>
<p>That completes the standard webapp aspects of the test application. Now to configure Tomcat.</p>
<ul><li>Add a declaration of your resource to <code>$CATALINA_HOME/conf/server.xml</code>
Add this in between the <code>&lt;/Context&gt;</code> tag of the examples context and the 
<code>&lt;/Host&gt;</code> tag closing the localhost definition. DONT ADD IT TO THE WARP CONNECTOR SECTION!!! 
</li></ul>
<source>
&lt;Context path="/DBTest" docBase="DBTest"
        debug="5" reloadable="true" crossContext="true"&gt;

  &lt;Logger className="org.apache.catalina.logger.FileLogger"
             prefix="localhost_DBTest_log." suffix=".txt"
             timestamp="true"/&gt;

  &lt;Resource name="jdbc/TestDB" 
               auth="Container" 
               type="javax.sql.DataSource"/&gt;

  &lt;ResourceParams name="jdbc/TestDB"&gt;
    &lt;parameter&gt;
      &lt;name&gt;factory&lt;/name&gt;
      &lt;value&gt;org.apache.commons.dbcp.BasicDataSourceFactory&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;maxActive&lt;/name&gt;
      &lt;value&gt;100&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;maxIdle&lt;/name&gt;
      &lt;value&gt;30000&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;maxWait&lt;/name&gt;
      &lt;value&gt;100&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
     &lt;name&gt;username&lt;/name&gt;
     &lt;value&gt;javauser&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
     &lt;name&gt;password&lt;/name&gt;
     &lt;value&gt;javadude&lt;/value&gt;
    &lt;/parameter&gt;
                  
    &lt;parameter&gt;
       &lt;name&gt;driverClassName&lt;/name&gt;
       &lt;value&gt;org.gjt.mm.mysql.Driver&lt;/value&gt;
    &lt;/parameter&gt;
            
    &lt;parameter&gt;
      &lt;name&gt;url&lt;/name&gt;
      &lt;value&gt;jdbc:mysql://localhost:3306/javatest&lt;/value&gt;
    &lt;/parameter&gt;
  &lt;/ResourceParams&gt;
&lt;/Context&gt;
</source>

<ul><li>Finally deploy your web app into <code>$CATALINA_HOME/webapps</code> either as a warfile called 
<code>DBTest.war</code> or into a sub-directory called <code>DBTest</code></li>
<li>Once deployed, point a browser at <code>http://localhost:8080/DBTest/test.jsp</code> to view the fruits of your hard work.</li></ul>

<p><i>ToDo: Perhaps we could bundle a simple project and Ant buildfile to demonstrate?</i></p>
</subsection>


<subsection name="Oracle 8i using Jakarta Commons Connection Pool">
<h3>0.    Introduction</h3>
<p><i>We would appreciate comments on this section as I'm not an Oracle DBA :-)</i></p>
<p>Oracle requires minimal changes from the mySQL configuration except for the usual gotchas :-) Firstly
by default, Tomcat will only use <code>*.jar</code> files installed in <code>$CATALINA_HOME/common/lib</code>
 therefore <code>classes111.zip</code> or <code>classes12.zip</code> will need to be renamed with a <code>.jar</code> 
extension. Since jarfiles are zipfiles, there is no need to unzip and jar these files - a simple rename will suffice.
Also, you should be aware that some (early) versions of Tomcat 5 when used with JDK 1.4 will not load classes12.zip unless
you unzip the file, remove the <code>javax.sql.*</code> class heirarchy and rejar.</p>
<h3>1.    server.xml configuration</h3>
<p>In a similar manner to the mysql config above, you will need to define your Datasource in your server.xml
file. Here we define a Datasource called myoracle using the thin driver to connect as user scott, password tiger
to the schema called myschema in the sid called mysid. (Note: with the thin driver this sid is not the same as the tnsname)</p>

<p>Use of the OCI driver should simply involve a changing thin to oci in the URL string.</p>
<source>
&lt;Resource name="jdbc/myoracle" auth="Container"
              type="javax.sql.DataSource"/&gt; 

&lt;ResourceParams name="jdbc/myoracle"&gt;
  &lt;parameter&gt;
    &lt;name&gt;factory&lt;/name&gt;
    &lt;value&gt;org.apache.commons.dbcp.BasicDataSourceFactory&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;driverClassName&lt;/name&gt;
    &lt;value&gt;oracle.jdbc.driver.OracleDriver&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;url&lt;/name&gt;
    &lt;value&gt;jdbc:oracle:thin:myschema@127.0.0.1:1521:mysid&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;username&lt;/name&gt;
    &lt;value&gt;scott&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;password&lt;/name&gt;
    &lt;value&gt;tiger&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;maxActive&lt;/name&gt;
    &lt;value&gt;20&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;maxIdle&lt;/name&gt;
    &lt;value&gt;10&lt;/value&gt;
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;maxWait&lt;/name&gt;
    &lt;value&gt;-1&lt;/value&gt;
  &lt;/parameter&gt;
&lt;/ResourceParams&gt;
</source>
<h3>2.    web.xml configuration</h3>
<p>You should ensure that you respect the elemeent ordering defined by the DTD when you
create you applications web.xml file.</p>
<source>
&lt;resource-ref&gt;
 &lt;description&gt;Oracle Datasource example&lt;/description&gt;
 &lt;res-ref-name&gt;jdbc/myoracle&lt;/res-ref-name&gt;
 &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
 &lt;res-auth&gt;Container&lt;/res-auth&gt;
&lt;/resource-ref&gt;
</source>
<h3>3.   Code example</h3>
<p>You can use the same example application as above (asuming you create the required DB
instance, tables etc.) replacing the Datasource code with something like</p>
<source>
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
Connection conn = ds.getConnection();
//etc.
</source>
</subsection>


<subsection name="PostgreSQL using Jakarta Commons Connection Pool">
<h3>0.    Introduction</h3>
<p>PostgreSQL is configured in a similar manner to Oracle. Again, highlighting the differences.
These notes are untested as yet and we would appreciate feedback.</p>
<h3>1.    server.xml configuration</h3>
<source>
&lt;Resource name="jdbc/postgres" auth="Container"
          type="javax.sql.DataSource"/> 

&lt;ResourceParams name="jdbc/postgres">
  &lt;parameter>
    &lt;name>factory&lt;/name>
    &lt;value>org.apache.commons.dbcp.BasicDataSourceFactory&lt;/value>
  &lt;/parameter>
  &lt;parameter>
    &lt;name>driverClassName&lt;/name>
    &lt;value>org.postgresql.Driver&lt;/value>
  &lt;/parameter>
  &lt;parameter>
    &lt;name>url&lt;/name>
    &lt;value>jdbc:postgresql://127.0.0.1:5432/mydb&lt;/value>
  &lt;/parameter>
  &lt;parameter>
    &lt;name>username&lt;/name>
    &lt;value>myuser&lt;/value>
  &lt;/parameter>
  &lt;parameter>
    &lt;name>password&lt;/name>
    &lt;value>mypasswd&lt;/value>
  &lt;/parameter>
  &lt;parameter>
    &lt;name>maxActive&lt;/name>
    &lt;value>20&lt;/value>
  &lt;/parameter>
  &lt;parameter>
    &lt;name>maxIdle&lt;/name>
    &lt;value>10&lt;/value>
  &lt;/parameter&gt;
  &lt;parameter&gt;
    &lt;name&gt;maxWait&lt;/name&gt;
    &lt;value&gt;-1&lt;/value&gt;
  &lt;/parameter&gt;
&lt;/ResourceParams&gt; 
</source>
<h3>2.    web.xml configuration</h3>
<source>
&lt;resource-ref&gt;
 &lt;description&gt;postgreSQL Datasource example&lt;/description&gt;
 &lt;res-ref-name&gt;jdbc/mydb&lt;/res-ref-name&gt;
 &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
 &lt;res-auth&gt;Container&lt;/res-auth&gt;
&lt;/resource-ref&gt;
</source>
</subsection>
</section>





<section name="Non DBCP Solutions">
<p>
These solutions either utilise a single connection to the database (not recommended for anything other
than testing!) or some other pooling technology.
</p>
</section>

<section name="Tyrex Connection Pool">
<subsection name="Introduction">

<p>
Tomcat 5 provides transaction management and resource configuration support through the use of 
<a href="http://tyrex.exolab.org/">Tyrex</a> 1.0. This allows the user to obtain JTA/JCA resources
from the JNDI namespace, as well as the standard <code>javax.transaction.UserTransaction</code>.
</p>

</subsection>

<subsection name="Installing Required JARs">

<p>
In order for a web application to use Tyrex, the webapp and Tomcat need to have access to the 
Tyrex jar, as well as the jars it requires.  Here is a list of the required jars, and where to obtain them:
</p>
<p>
The following jars are included with Tyrex binary distribution, available at http://tyrex.exolab.org.

<ul>
<li>tyrex-1.0.jar</li>
<li>ots-jts_1.0.jar</li>
<li>jta_1.0.1.jar</li>
<li>xerces-J_1.4.0.jar</li>
</ul>

The following two jars are required as well:

<ul>
<li>Castor XML jar (<a href="http://castor.exolab.org/">http://castor.exolab.org/</a>, version 0.92 or higher is reccommended)</li>
<li>Log4J (<a href="http://jakarta.apache.org/log4j/">http://jakarta.apache.org/log4j/</a>, version 1.0.4 or higher is reccommended)</li>
</ul>
</p>
<p>
All six of these jar files need to be placed on $TOMCAT_HOME/common/lib so that both Tomcat and your web application will see them.
</p>
</subsection>
<subsection name="Configuring Tyrex">

<p>
The Tyrex documentation (http://tyrex.exolab.org) provides complete details on how to properly configure Tyrex.  As an example, we will use the following Tyrex configuration, specified in Tyrex's domain configuration XML file:
</p>

<source>
&lt;domain&gt;
  &lt;name&gt;myDomain&lt;/name&gt;
  &lt;resources&gt;
    &lt;dataSource&gt;
      &lt;name&gt;myDatasource&lt;/name&gt;
      &lt;jar&gt;/home/david/mm.mysql-2.0.14-bin.jar&lt;/jar&gt;
      &lt;class&gt;org.gjt.mm.mysql.jdbc2.optional.MysqlXaDataSource&lt;/class&gt;
      &lt;config&gt;
        &lt;user&gt;david&lt;/user&gt;
        &lt;password&gt;secret&lt;/password&gt;
        &lt;serverName&gt;localhost&lt;/serverName&gt;
        &lt;port&gt;3306&lt;/port&gt;
        &lt;database&gt;daviddb&lt;/database&gt;
      &lt;/config&gt;
    &lt;/dataSource&gt;
  &lt;/resources&gt;
&lt;/domain&gt;
</source>

<p>
A few things to note:

<ul>
<li>You need to specify the full pathname of the JAR file (for relative paths,  Tyrex looks in the current working directory, this usually isn't what you want).  You can also specify a URL.</li>
<li>Any elements nested inside the <config></config> elements are passed as parameters to the datasource class, using standard setter methods.</li>
<li>More configuration options are available, as well as a better description of how to setup Tyrex, at <a href="http://tyrex.exolab.org/configuration.html">http://tyrex.exolab.org/configuration.html</a></li>
</ul>
</p>
<p>
This XML config file needs to be placed where Tomcat's classloader can find it using getResource().  This means that the WEB-INF/classes directory under your webapp is a very good choice.
</p>
</subsection>

<subsection name="Configuring Tomcat">

<p>
Now that your Tyrex XML config file is in place and ready, you must enlist the Tyrex resources in the JNDI namespace.  This is done through Tomcat's server.xml file. 
Two important parameters must be specified: the name of the domain config file (<code>tyrexDomainConfig</code>), and the name of the Tyrex domain that is to be used (<code>tyrexDomainName</code>). 
These need to be setup as Environment parameters, like so:
</p>
<source>
&lt;Environment name="tyrexDomainConfig" type="java.lang.String" value="domain-config.xml"/&gt;
&lt;Environment name="tyrexDomainName" type="java.lang.String" value="myDomain"/&gt;
</source>
<p>
Now, you must configure the resource (under the &lt;Context&gt; element of your webapp):
</p>
<source>
&lt;Resource name="my-datasource" auth="Container" type="tyrex.resource.Resource"/&gt;
&lt;ResourceParams name="my-datasource"&gt;
  &lt;parameter&gt;
    &lt;name&gt;name&lt;/name&gt;
    &lt;value&gt;myDataSource&lt;/name&gt;
  &lt;/parameter&gt;
&lt;/ResourceParams&gt;
</source>
<p>
A couple of things to point out:
<ul>
<li>The type of resource should always be <code>tyrex.resource.Resource</code>, regardless of how you have Tyrex configured.</li>
<li>Only one ResourceParam parameter is needed, <code>name</code> -- the value should be set to the name of resource specified in the Tyrex config file.</li>
<li>Note the difference between a Tomcat/JNDI resource and a Tyrex resource (it can be confusing at first glance!)</li>
</ul>
</p>
</subsection>

<subsection name="Coding Your Application">

<p>
Making use of your Tyrex resource should now be relatively simple.  To obtain your datasource, simply use JNDI:
</p>
<source>
InitialContext initCtx = new InitialContext();
DataSource ds = (DataSource) initCtx.lookup("java:comp/env/my-datasource");
Connection conn = ds.getConnection();
...and so on.
</source>
<p>
Tyrex also provides a <code>javax.transaction.UserTransaction</code>,
 obtainable through JNDI at the standard location (<code>java:comp/UserTransaction</code>).
</p>
</subsection>



</section>


<section name="Oracle 8i with OCI client">
<subsection name="Introduction">
<p>Whilst not strictly addressing the creation of a JNDI DataSource using the OCI client, these notes can be combined with the
Oracle and DBCP solution above.</p>
<p>
In order to use OCI driver, you should have an Oracle client installed. You should have installed
Oracle8i(8.1.7) client from cd,  and download the suitable JDBC/OCI
driver(Oracle8i 8.1.7.1 JDBC/OCI Driver) from <a href="http://otn.oracle.com/">otn.oracle.com</a>. 
</p>
<p>
After renaming <code>classes12.zip</code> file to <code>classes12.jar</code>
for Tomcat, copy it into <code>$CATALINA_HOME/common/lib</code>. 
You may also have to remove the <code>javax.sql.*</code> classes
from this file depending upon the version of Tomcat and JDK you are using.
</p>
</subsection>

<subsection name="Putting it all together">
<p>
Ensure that you have the <code>ocijdbc8.dll</code> or <code>.so</code> in your <code>$PATH</code> or <code>LD_LIBRARY_PATH</code>
 (possibly in <code>$ORAHOME\bin</code>) and also confirm that the native library can be loaded by a simple test program 
using <code>System.loadLibrary("ocijdbc8");</code>
</p>
<p>
You should next create a simple test servlet or jsp that has these <b>critical lines</b>:
</p>
<source>
DriverManager.registerDriver(new
oracle.jdbc.driver.OracleDriver());
conn =
DriverManager.getConnection("jdbc:oracle:oci8:@database","username","password");
</source>
<p>
where database is of the form <code>host:port:SID</code> Now if you try to access the URL of your 
test servlet/jsp and what you get is a 
<code>ServletException</code> with a root cause of <code>java.lang.UnsatisfiedLinkError:get_env_handle</code>.
</p>
<p>
First, the <code>UnsatisfiedLinkError</code> indicates that you have 
<ul>
<li>a mismatch between your JDBC classes file and
your Oracle client version. The giveaway here is the message stating that a needed library file cannot be
found. For example, you may be using a classes12.zip file from Oracle Version 8.1.6 with a Version 8.1.5
Oracle client. The classeXXXs.zip file and Oracle client software versions must match.
</li>
<li>A <code>$PATH</code>, <code>LD_LIBRARY_PATH</code> problem.</li>
<li>It has been reported that ignoring the driver you have downloded from otn and using 
the classes12.zip file from the directory <code>$ORAHOME\jdbc\lib</code> will also work.
</li>
</ul>
</p>
<p>
Next you may experience the error <code>ORA-06401 NETCMN: invalid driver designator</code>
</p>
<p>
The Oracle documentation says : "Cause: The login (connect) string contains an invalid
driver designator. Action: Correct the string and re-submit."

Change the database connect string (of the form <code>host:port:SID</code>) with this one:
<code>(description=(address=(host=myhost)(protocol=tcp)(port=1521))(connect_data=(sid=orcl)))</code>
</p>
<p>
<i>Ed. Hmm, I don't think this is really needed if you sort out your TNSNames - but I'm not an Oracle DBA :-)</i>
</p>
</subsection>
</section>

</body>
</document>

