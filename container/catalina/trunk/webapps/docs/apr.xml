<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="apr.html">

    &project;

  <properties>
    <title>Apache Portable Runtime and Tomcat</title>
    <author>Remy Maucherat</author>
  </properties>

<body>

  <section name="Introduction">

  <p>
      Tomcat can use the <a href="http://apr.apache.org/">Apache Portable Runtime</a> to 
      provide superior scalability, performance, and better integration with native server 
      technologies. The Apache Portable Runtime is a highly portable library that is at 
      the heart of Apache HTTP Server 2.x. APR has many uses, including access to advanced IO
      functionality (such as sendfile, epoll and OpenSSL), OS level functionality (random number
      generation, system status, etc), and native process handling (shared memory, NT
      pipes and Unix sockets).
  </p>
  
  <p>
      These features allows making Tomcat a general purpose webserver, will enable much better 
      integration with other native web technologies, and overall make Java much more viable as
      a full fledged webserver platform rather than simply a backend focused technology.
  </p>

  </section>

  <section name="Installation">

    <p>
      APR support requires three main native components to be installed:
      <ul>
        <li>APR library</li>
        <li>JNI wrappers for APR used by Tomcat (libtcnative)</li>
        <li>OpenSSL libraries</li>
      </ul>
    </p>

    <subsection name="Windows">
    
    <p>
      Windows binaries are provided for libapr and libtcnative. Windows OpenSSL
      binaries are linked from the <a href="http://www.openssl.org">Official OpenSSL website</a>
      (see related/binaries).
    </p>
    
    </subsection>
    
    <subsection name="Linux">
    
    <p>
      Most Linux distributions will ship packages for APR and OpenSSL. The JNI wrapper (libtcnative) will 
      then have to be compiled. It depends on APR, OpenSSL, and the Java headers.
    </p>
    
    <p>
      Requirements:
      <ul>
        <li>APR 1.1+ development headers (libapr1-dev package)</li>
        <li>OpenSSL 0.9.7+ development headers (libssl-dev package)</li>
        <li>GNU development environment (gcc, make)</li>
      </ul>
    </p>
    
    <p>
      Once the build environment is installed, the wrapper library can be compiled using:
      <source>./configure &amp;&amp; make &amp;&amp; make install</source>
    </p>
    
    </subsection>
	
  </section>

  <section name="Configuration">

  <p>
    Once the libraries are properly installed and available to Java (if loading fails, the library path
    will be displayed), the Tomcat connectors will automatically use APR. Configuration of the connectors
    is similar to the regular connectors, but have a few extra attributes which are used to configure
    APR components. Note that the defaults should be well tuned for most use cases, and additional
    tweaking shouldn't be required.
  </p>

    <subsection name="HTTP">
    
    <p>
      The following attributes are new in the HTTP APR connector:
    </p>

    <attributes>
 
    <attribute name="firstReadTimeout" required="false">
      <p>The first read of a request will be made using the specified timeout. If no data is available
      after the specified time, the socket will be placed in the poller. Setting this value to 0 will
      increase scalability, but will have a minor impact on latency (see the related pollTime attribute).
      The default value is 100 (100ms). Note: on Windows, the actual value of firstReadTimeout will
      be 500 + the specified value.</p>
    </attribute>

    <attribute name="pollTime" required="false">
      <p>Duration of a poll call. Lowering this value will slightly decrease latency of connections 
      being kept alive in some cases, but will use more CPU as more poll calls are being made. The
      default value is 5000 (5ms).</p>
    </attribute>

    <attribute name="pollerSize" required="false">
      <p>Amount of sockets that the poller responsible for polling kept alive connections can hold at a
      given time. Extra connections will be closed right away. The default value is 768, corresponding to
      768 keepalive connections.</p>
    </attribute>

    <attribute name="useSendfile" required="false">
      <p>Use kernel level sendfile for certain static files. The default value is true.</p>
    </attribute>

    <attribute name="sendfileSize" required="false">
      <p>Amount of sockets that the poller responsible for sending static files asynchronously can hold 
      at a given time. Extra connections will be closed right away without any data being sent 
      (resulting in a zero length file on the client side). Note that in most cases, sendfile is a call
      that will return right away (being taken care of "synchonously" by the kernel), and the sendfile
      poller will not be used, so the amount of static files which can be sent concurrently is much larger
      than the specified amount. The default value is 256.</p>
    </attribute>

    </attributes>
    
    </subsection>
	
    <subsection name="HTTPS">
    
    <p>
      The HTTPS APR connector has the same basic attributes than the HTTP APR connector, but adds 
      OpenSSL specific ones. For the full details on using OpenSSL, please refer to OpenSSL documentations
      and the many books available for it (see the <a href="http://www.openssl.org">Official OpenSSL 
      website</a>). The SSL specific attributes for the connector are:
    </p>
    
    <attributes>
 
    </attributes>
    
    </subsection>
	
    <subsection name="AJP">
    
    <p>
      The following attributes are new in the AJP APR connector:
    </p>

    <attributes>
 
    <attribute name="firstReadTimeout" required="false">
      <p>The first read of a request will be made using the specified timeout. If no data is available
      after the specified time, the socket will be placed in the poller. Setting this value to 0 will
      increase scalability, but will have a minor impact on latency (see the related pollTime attribute).
      The default value is 100 (100ms). Note: on Windows, the actual value of firstReadTimeout will
      be 500 + the specified value.</p>
    </attribute>

    <attribute name="pollTime" required="false">
      <p>Duration of a poll call. Lowering this value will slightly decrease latency of connections 
      being kept alive in some cases, but will use more CPU as more poll calls are being made. The
      default value is 5000 (5ms).</p>
    </attribute>

    <attribute name="pollerSize" required="false">
      <p>Amount of sockets that the poller responsible for polling kept alive connections can hold at a
      given time. Extra connections will be closed right away. The default value is 768, corresponding to
      768 keepalive connections.</p>
    </attribute>

    </attributes>
    
    </subsection>
	
  </section>

</body>
</document>
