<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="memory.html">

  &project;

  <properties>
    <author email="funkman@apache.org">Tim Funk</author>
    <title>Memory</title>
  </properties>

<body>


<section name="Preface">
  <p>
    This page discusses various memory issues. In a nutshell - if your
    computer has less than 128MB of ram - you will probably have trouble.
    Anyhow, also read the following threads for other memory related issues:
    <ul>
      <li>
        <a href="http://marc.theaimsgroup.com/?t=104388973000006&amp;r=1&amp;w=2">
          java.lang.OutOfMemoryError during deploy
        </a>
      </li>

      <li>
        <a href="http://marc.theaimsgroup.com/?t=104378347700007&amp;r=1&amp;w=2">
          Memory requirements
        </a>
      </li>

      <li>
        <a href="http://marc.theaimsgroup.com/?t=104333066400004&amp;r=1&amp;w=2">
          Memory Mgmt Tomcat
        </a>
      </li>

      <li>
        <a href="http://marc.theaimsgroup.com/?t=103011379700006&amp;r=1&amp;w=2">
          Tomcat Out of memory
        </a>
      </li>

      <li>
        <a href="http://marc.theaimsgroup.com/?t=104519961700002&amp;r=1&amp;w=2">
          Tracking memory usage over time
        </a>
      </li>

    </ul>
</p>
<p>
    Also look at
    <a href="http://java.quest.com/jprobe/jprobe.shtml">JProbe</a>,
    or <a href="http://www.borland.com/optimizeit/">OptimizeIt</a>, or other
    profiling tools. Lots of people recommend these tools.
    This is not an endorsement for them, I just
    notice other people like them.
</p>

  <subsection name="JSP Recompilation">
  <p>
    If your application uses JSPs which are frequently recompiled
    at runtime, e.g. headers that change value hourly, please make
    sure to read the JSP HOW-TO page and RELEASE NOTES documents.
    You may wish to tune the JSP compiler configuration to prevent
    memory leaks.  Of course, these are documents you should have
    read by now anyways..
  </p>
  </subsection>

</section>
<section name="Questions">
<p>
  <ul>
    <li><a href="#adjust"> How do I adjust memory settings?</a></li>
    <li><a href="#why"> Why do I get OutOfMemoryError errors?</a></li>
    <li><a href="#howmuch"> How much memory is tomcat/webapp/??? using?</a></li>
  </ul>
</p>
</section>


<section name="Answers">

  <question>
    <a name="adjust">
      How do I adjust memory settings?
    </a>
  </question>
  <answer>
    First look at <code>java -X</code> to determine what parameters to set.
    Then you can set them via the environment variable <code>JAVA_OPTS</code>.
    Read the files catalina.bat or catalina.sh for
    more information on JAVA_OPTS.
  </answer>


  <question>
    <a name="why">
      Why do I get OutOfMemoryError errors?
    </a>
  </question>
  <answer>
    Many reasons.
    <ul>
      <li>
          You're out of memory. Simple as that - add more to your heap.
      </li>
      <li>You're out of memory. You have code which is hanging onto object
          references and the garbage collector can't do its job. Get a
          profiler to debug this one.
      </li>
      <li>You ran out of file descriptors. If you are on a *nix system,
          it has been observed that an OutOfMemoryError can be thrown
          if you run out of file descriptors. This can occur if your
          threshold is too low. The <code>ulimit</code> program
          can help you out here. You also may need to account for
          socket connections too when thinking about these thresholds.
          Google is your friend for getting more information about this
          topic.
      </li>
      <li>You have too many threads running. Some OS's have a limit to the number
          of threads which may be executed by a single process. (Which is what the
          JVM is.) Refer to your OS docs for more information on how to raise this
          threshold.
      </li>
      <li>
        If you have a lot of servlets or JSP's, you may need to increase your
        permanent generation. By default, it is 64MB.
        Doubling it to be <code>-XX:MaxPermSize=256m</code> might be a good start.
      </li>
      <li>Your OS limits the amount of memory your process may take. OK, this
          one is grasping at straws.
      </li>
      <li> The JVM has a bug. This has been known to happen with JVM1.2.? and using
           EJB's with another servlet engine.
      </li>
      <li> Not actually a reason - but on your particular platform, look at the
          <code>java -X</code> options. They may be VERY helpful.
      </li>
    </ul>
  </answer>

  <question>
    <a name="howmuch">
      How much memory is Tomcat/webapp/??? using?
    </a>
  </question>
  <answer>
    <ul>
      <li>
        To find out how much memory Tomcat is using, you might be able to
        use the <code>Runtime</code> class provided by the JDK.
      </li>
      <li>
        You can't find out how much memory a webapp is using. The JVM
        doesn't give us these detail.
      </li>
      <li>
        You can't find out how much memory a <i>???</i> is using. The JVM
        doesn't give us these detail.
      </li>
      <li>
        That being said, a memory profiling tool might prove the above
        statements wrong - but you probably don't want to use them
        in a production environment.
      </li>
    </ul>
  </answer>


</section>


</body>
</document>
