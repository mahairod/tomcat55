<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="connectors.html">

  &project;

  <properties>
    <author email="funkman@apache.org">Tim Funk</author>
    <title>Connectors</title>
  </properties>

<body>


<section name="Preface">
  <p>
    Many people have also documented getting the connectors to work in their
    own enivornment.
    Each person had their own situation to deal with. Hopefully your situation
    matches one of theirs. Otherwise, we also do provide the
    reference documentation.

<ul>
  <li>[link]
    <a href="http://www.johnturner.com/howto/apache-tomcat-howto.html">
        John Turner's HOWTO
    </a>
  </li>
  <li>[link]
    <a href="http://jakarta.apache.org/tomcat/tomcat-4.1-doc/jk2/index.html">
        JK docs
    </a>
  </li>

  <li>[link]
    <a href="http://raibledesigns.com/tomcat/index.html">
      Apache 2.x + Tomcat 4.x + Load Balancing (or Private JVMs)
    </a>
  </li>

  <li>[link]
    <a href="http://www.onjava.com/pub/a/onjava/2002/11/20/tomcat.html">
        Configuring Tomcat and Apache With JK 1.2
    </a>
  </li>

  <li>[link]
    <a href="http://daydream.stanford.edu/tomcat/install_web_services.html">
      Installing Web Services with Tomcat/Apache/Struts/Postgresql/Openssl
    </a>
  </li>

  <li>[link]
    <a href="http://www.thinlizard.com/lizard/modjk2.html">
       Building mod_jk2 on FreeBSD 4.7
    </a>
  </li>

  <li>[link]
    <a href="http://www.greenfieldresearch.ca/technical/jk2_config.html">
       Tomcat-Apache using JK2 connector
    </a>
  </li>

  <li>[thread]
    <a href="http://marc.theaimsgroup.com/?t=104040058200004&amp;r=1&amp;w=2">
      Configuring mod_jk - Again!
    </a>
  </li>

  <li>[thread]
    <a href="http://marc.theaimsgroup.com/?l=tomcat-user&amp;m=103763413712975&amp;w=2">
       [CONFIG] Apache2.0.40 + Tomcat4.1.12 + mod_jk - STILL HAVING PROBLEMS
    </a>
  </li>

   <li>[thread]Quickie how-to for building
      <a href="http://marc.theaimsgroup.com/?l=tomcat-user&amp;m=105112006011912&amp;w=2">
         JK
      </a>
      and
      <a href="http://marc.theaimsgroup.com/?l=tomcat-user&amp;m=105103815630094&amp;w=2">
        JK2
      </a>
    </li>
  </ul>

</p>
</section>


<section name="Questions">
<p>
  <ul>
    <li>
      <a href="#jk">
        What is JK?
      </a>
    </li>
    <li>
      <a href="#vs">
        Which connector: mod_jserv, JK, JK2, mod_webapp or mod_proxy?
      </a>
    </li>
    <li>
      <a href="#integrate">
        Why should  I integrate Apache  with Tomcat? (or not)
      </a>
    </li>
  </ul>
</p>
</section>


<section name="Answers">

  <question>
    <a name="jk">What is JK?</a>
  </question>
  <answer>
    JK is a wire protocol. It an optimized version of the HTTP protocol to
    allow a standalone web server such as Apache talk to Tomcat. Historically,
    Apache has always been much faster than Tomcat at serving static content.
    The idea is to let Apache serve the static content when possible, then
    proxy the request back to Tomcat for Tomcat related content.
  </answer>

  <question>
    <a name="vs">
      Which connector: mod_jserv, JK, JK2, mod_webapp or mod_proxy?
    </a>
  </question>
  <answer>
    <ul>
      <li>
        Stay away from mod_webapp, aka warp. It is deprecated and unsupported
        due to lack of developer interest and there are better options such
        as jk and jk2. It is WILL NOT run on windows.
      </li>
      <li>
        mod_jserv is good but AFAIK is unsupported and will not be supported
        in Tomcat 5.
      </li>
      <li>
        <b>mod_jk is great and should be used for production. It is getting
        fixes as needed (which is now rare). </b>
      </li>
      <li>
        jk2 is a refactoring of mod_jk and uses the Apache Portable
        Runtime(apr). If you are using Apache 2.0,
        you'll probably want to use jk2. But this may not be production
        worthy for everyone. (YMMV)
      </li>
      <li>mod_proxy. Interesting idea and it
        doesn't seem to have much problems with heavy loads. If you don't
        need some of the features of jk, jk2 - this is a very simple
        alternative.
      </li>
    </ul>
  </answer>

   <question>
     <a name="integrate">
        Why should  I integrate Apache  with Tomcat? (or not)
     </a>
   </question>
   <answer>
    There are many reasons to integrate Tomcat with Apache. And there are
    reasons why it
    should not be done too. Needless to say, everyone will disagree with
    the opinions here.
    With the upcoming performance of Tomcat 5, performance reasons
    become harder to justify. So here are the issues to discuss in
    intergrating vs not.
   <br/><br/>

  <ul>
    <li>
      Clustering. By using Apache as a front end you can let Apache act as a
      front door to your content to multiple Tomcat instances. If one of your
      Tomcats fails, Apache
      ignores it and your Sysadmin can sleep through the night. This point
      could be ignored if you use a hardware loadbalancer and Tomcat's
      clustering capabilities.
    </li>
    <li>
      Clustering/Security. You can also use Apache as a front door to different
      Tomcats for
      different URL namespaces (/app1/, /app2/, /app3/, or virtual hosts).
      The Tomcats can then be each in a protected area
      and from a security point of view, you only need to worry about the
      Apache server. Essentially, Apache becomes a smart proxy server.
    </li>
    <li>
       Security. This topic can sway one either way. Java has the security
       manager while Apache has a larger mindshare and more tricks with
       respect to security. I won't go into this
       in more detail, but let Google be your friend. Depending on your scenario,
       one might be better than the other. But also keep in mind, if you run
       Apache with
       Tomcat - you have two systems to defend, not one.
    </li>
    <li>
       Add-ons. Adding on CGI, perl, PHP is very natural to Apache. Its
       slower and more
       of a kludge for Tomcat. Apache also has hundreds of modules that can
       be plugged in
       at will. Tomcat can have this ability, but the code hasn't been
       written yet.
    </li>
    <li>
       Decorators! With Apache in front of Tomcat, you can perform any number
       of decorators that
       Tomcat doesn't support or doesn't have the immediate code support.
       For example,
       mod_headers, mod_rewrite, and mod_alias could be written for Tomcat,
       but why reinvent the wheel when Apache has done it so well?
    </li>
    <li>
      Speed. Apache is faster at serving static content than Tomcat. But unless
      you have a high traffic site, this point is useless.
    </li>
    <li>
       Socket handling/system stability. Apache has better socket handling
       with respect
       to error conditions than Tomcat. The main reason is Tomcat must perform
       all its socket handling via the JVM which needs to be cross patform.
       The problem
       is socket optimization is a platform specific ordeal. Most of the
       time the java
       code is fine, but when you are also bombarded with dropped connections,
       invalid
       packets, invalid requests from invalid IP's, Apache does a better job
       at dropping these error conditions than JVM based program.
    </li>
    <li>
    <a href="http://marc.theaimsgroup.com/?l=tomcat-user&amp;m=104874913017036&amp;w=2">Here </a>
    is a great response from Craig R. McClanahan. If you have free time,
    read emails by him in any of the list archives. You'll learn a lot.
    </li>
    </ul>
  </answer>

</section>


</body>
</document>
