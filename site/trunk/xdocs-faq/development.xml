<?xml version="1.0"?>
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="development.html">

  &project;

  <properties>
    <author email="markt@apache.org">Mark Thomas</author>
    <title>Tomcat FAQ: Development</title>
  </properties>

<body>


<section name="Preface">
    This section of the FAQ discusses common questions related
    to Tomcat development.
</section>

<section name="Questions">
<p>
  <ul>
    <li>
      <a href="#rd">
        How do I configure Tomcat to support remote debugging?
      </a>
    </li>
    <li>
      <a href="#rd-eclipse">
        How do I remotely debug Tomcat using Eclipse?
      </a>
    </li>
    <li>
      <a href="#rd-netbeans">
        How do I remotely debug Tomcat using NetBeans IDE?
      </a>
    </li>
  </ul>
</p>
</section>


<section name="Answers">
<p>
  <question>
    <a name="rd">How do I configure Tomcat to support remote debugging?</a>
  </question>
  <answer>
    <p>
    The short answer is to add the following options when the JVM is started:<br/>
    <code>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n</code><br/>
    There are a number of ways you can do this depending on how you normally start
    Tomcat:
    <ul>
      <li>Set environment variables <code>JPDA_ADDRESS=8000</code> and
          <code>JPDA_TRANSPORT=dt_socket
</code> and then start tomcat using
          <code>catalina jpda start</code>.</li>

      <li>If you run Tomcat using service wrapper, check the documentation for the
          service to determine how to set the required JVM options.
</li>

      <li>If you start Tomcat from within an IDE, check the documentation for the IDE
          to determine how to set the required JVM options.</li>

    </ul>
    </p>
    <p>The port does not need to be set to 8000, it may be any value appropriate for your
    system.</p>
    <p>Whilst this is very useful in development it should not be used in production because
    of both security and performance implications.</p>
  </answer>
  <question>
    <a name="rd-eclipse">How do I remotely debug Tomcat using Eclipse?</a>
  </question>
  <answer>
    <p>
    This answer assumes that you have a project set up with all of the fixings
    and have some idea of what you're doing in this respect.  If not then 
    thats really outside the scope of this topic and more in the scope of 
    you needing to go to <a href="http://www.eclipse.org">eclipse.org</a> and
    read up on how to use your ide, and maybe practice a little bit before 
    you come back to this.  We're also going to assume you have some idea of
    what a debugger is and how to use one.
    </p>
    <p>
    Make sure tomcat is started and that your app is deployed and the sources,
    etc are all defined as resources in your app.  If you have a servlet or 
    something, set a breakpoint where its sure to hit on the next request.
    Go to "Run-&gt;Debug...".  Click on "Remote Java Applications", then click
    "New". Type in the title and all.  Notice that port 8000 from the Tomcat 
    instructions.  Save and run.  Eclipse will connect to the VM that Tomcat 
    is running under.  Wow, that was easy!  Now go type the url to submit to
    your servlet or whatever in your browser.  Boom you hit the breakpoint right?
    Have fun!
    </p>
  </answer>
  <question>
    <a name="rd-netbeans">How do I remotely debug Tomcat using NetBeans IDE?</a>
  </question>
  <answer>
    <p>
This answer assumes that you have correctly set up a NetBeans IDE project and
that you know how to use its debugger. If not, please go to
http://www.netbeans.org/kb/using-netbeans/40/debug.html and read up on how to
use NetBeans IDE and its debugger.
</p>
<p>
Make sure that Tomcat is started, that your application is deployed, and that
the sources are all defined as resources in your application. If you have a
servlet or JSP file, set a breakpoint where its sure to hit on the next request.
Go to "Run->Attach Debugger". A dialog pops up to let you specify the following
options:
<ul>
    <li> Debugger: JPDA Debugger </li>
    <li> Connector: SocketAttach </li>
    <li> Host: The IP address of the host your Tomcat installation is running on
(127.0.0.1 if it is your local machine). </li>
    <li> Port: The port of your Tomcat debugging interface, which should be 8000 if
you've followed the instructions above. </li>
</ul>
</p>
<p>
When you press OK, you have a debugging connection very similar to local debugging.
</p>
<p>
Note that NetBeans IDE has a second option -- you can debug JSP files and
servlets locally using a Tomcat server that is bundled with the IDE. The bundled
Tomcat server can be started in debug mode (its default port number is 11555)
and you can open a remote connection to it from NetBeans IDE as described above.
    </p>
  </answer>
</p>
</section>

</body>
</document>
