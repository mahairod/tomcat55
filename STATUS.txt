================================================================================
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
================================================================================

$Id$

                         =================================
                         Apache Tomcat 5.5 Patch Proposals
                         =================================

PATCHES ACCEPTED TO BACKPORT FROM TRUNK/OTHER:
  [ start all new proposals below, under PATCHES PROPOSED. ]

PATCHES PROPOSED TO BACKPORT:
  [ New proposals should be added at the end of the list ]

* Update Eclipse compiler and switch to using ecj.jar
  http://people.apache.org/~markt/patches/2011-08-25-lib-update-tc5-v2.patch
  +1: markt
  +1: kkolinko:
        + update build/resources/License.rtf to match LICENSE file
        + in class-loader-howto.xml sort the JARs list alphabetically
        I've run jarcheck tool against the archive. Results are in
         http://people.apache.org/~kkolinko/patches/jarcheck/
        Most classes are JDK 1.2 compatible. Some are JDK 1.6 (esp. annotations processor),
        but it is the same in ecj 3.3.1 that is currently used.
        Those classes are absent in jasper-compiler-jdt.jar that we would
        generate, so their presence does not matter.
  +1: rjung:
        I suggest we switch after releasing 5.5.34 so that the change isn't introduced
        immediately before tagging.
  -1:

* Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52059
  http://svn.apache.org/viewvc?rev=1186763&view=rev
  Fix a typo in Windows uninstaller:
  Do not forget to remove Tomcat keys from 32-bit registry on deinstallation.
  +1: kkolinko
  -1:

* Make configuration issue for RemoteAddrValve, RemoteHostValve result
  in the failure of the valve rather than just a warning message.
  Ensure changes to the configuration of the RemoteHostValve and the
  RemoteIpValve via JMX are thread-safe.
  http://people.apache.org/~kkolinko/patches/2011-10-26_tc55_RequestFilterValve_v3.patch
  It is based on the valves part of r1189256 and r1187027. (r1189258, r1187029 in TC7)
  +1: kkolinko (see note below)
  -1:

  kkolinko: It does its work and prevents app from starting and working. Though
    1. Autodeployment prints the same error every 10s. It is OK, though a
       bit annoying.
    2. Application that failed to start responds with 403. I do not
       understand why. I would expect 404 or 503.
    3. Application that failed to start is not listed by the manager app.
       It is expected, but does not explain why error 403 and not 404 is observed.

* Improve performance of parameter processing
  http://people.apache.org/~markt/patches/2011-10-29-param-perf-tc5-v2.patch
  +1: markt
  -1: kkolinko: because of ByteChunk#toStringInternal(), see below.
                markt - updated proposal above addresses all review comments
                        detailed response on dev list

  kkolinko: In B2CConverter.java
    lines 117-118: restore Javadoc comment to method void convert( ByteChunk bb, CharChunk cb, int limit) 
    line 125 - remove "// conv.ready() ) {" comment. It wasn't in 5.5. Do not see why to add it.
   In ByteChunk.java:
    in toStringInternal():
      "cb.array()" returns "character array that backs this CharBuffer".
      I think it can contain extra characters beyond end of decoded string.
      Thus "new String(cb.array());" is wrong.
      Single-character charsets are simple, because the count of characters
      is known from the count of bytes. Needs more testing with UTF-8.
      - thus -1.
   In Parameters.java:
    "private static org.apache.commons.logging.Log log"
      - make "static final"
    "StringManager.getManager("org.apache.tomcat.util.http");"
      - the LocalStrings.properties file from r1189882 is not included in this patch.
        (2011-10-27-param-perf-tc6-v1.patch does not have it as well)
    "private final Hashtable paramHashValues"
      - Maybe a HashMap can be used instead. I do not expect much improvements
        from that though.
    in #addParameterValues(..)
      - Replace "values = new ArrayList(1);"
        with    "values = new ArrayList(newValues.length);"
      - Maybe "if (paramHashValues.containsKey(key))" can be replaced
        with testing whether result of (paramHashValues.containsKey(key)) is null.
      - Maybe add tests for this method. In trunk it is called by Request.parseParts(), though see below maybe that can be changed.
    in #getParameterValues(String name)
      - Apply NPE fix from http://svn.apache.org/viewvc?rev=1190481&view=rev
      - Maybe add test case in TestParameters.java for calling getParameterValues() for non-existing parameter.
    in #addParam(String, String)
      - remove efficiency comment above the method?
      - In trunk: maybe make this method public and call it instead of #addParameterValues(..)
         in Request.parseParts().
      - Maybe "if (paramHashValues.containsKey(key))" can be replaced
        with testing whether result of (paramHashValues.containsKey(key)) is null.
    "public static final String DEFAULT_ENCODING"
    "public static final Charset DEFAULT_CHARSET"
      - New fields. They can be made private.
    in #processParameters(..., Charset)
      - It is a new method. Maybe make it private.
      - If it remains public, maybe document that charset parameter is not null.
        All callers here call Parameters.getCharset(encoding) which returns DEFAULT_CHARSET by default.
    in #urlDecode(...)
      - Maybe call "bc.setCharset(charset);" before calling "urlDec.convert(bc);"
    in #paramsAsString()
      - Move sb.append("\n"); outside of loop that iterates on values. Those are separated by ','.
        In the old code the "\n" is used to separate different parameter names.
      - Replace double quotes with single quotes where it is a single character ('=', ',', '\n')
