<project name="Servlet Tests" default="main">

    <property name="host" value="localhost" />
    <property name="port" value="8080" />
    <property name="wgdir" value="lib/servlet-golden" />

    <taskdef name="gtest" classname="org.apache.tomcat.task.GTest" />

    <target name="main" depends="gtestservlet-test" />

    <!-- ====================== Watchdog Servlet Tests ====================== -->

        <!-- BEGIN javax_servlet_Filter -->
    <target name="gtestservlet-test">
        <gtest request="GET /servlet-tests/DoFilterTest HTTP/1.0"
            testName="DoFilterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Filter/DoFilterTest.html"
            assertion="The doFilter method of the Filter is called by the container each time a request/response pair is passed through the stack due to a client request for the Servlet in the stack, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Filter.doFilter method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
            firstTask="true"
        />

        <gtest request="GET /servlet-tests/InitFilterConfigTest HTTP/1.0"
            testName="InitFilterConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Filter/InitFilterConfigTest.html"
            assertion="The container calls this method when the Filter is instantiated and passes in a FilterConfig object. specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.setFilter method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet."
        />

        <!-- END javax_servlet_Filter -->

        <!-- BEGIN javax_servlet_Servlet -->

        <gtest request="GET /servlet-tests/DoDestroyedTest HTTP/1.0"
            testName="DoDestroyedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoDestroyedTest.html"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being taken out of service, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.destroy() method"
            testStrategy="Testing that destroy method is not called during service method execution"
        />

        <gtest request="GET /servlet-tests/DoInit1Test HTTP/1.0"
            testName="DoInit1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="503"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being placed into service., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.init() method"
            testStrategy="A negative test for the init method. We will throw UnavailableException from inside init.The Servlet should not be initialized"
        />

        <gtest request="GET /servlet-tests/DoInit2Test HTTP/1.0"
            testName="DoInit2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoInit2Test.html"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being placed into service., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.init() method"
            testStrategy="Inside CoreServletTest, which is the parent servlet, we are implementing init() and setting a boolean variable to true. We'll check for the variables here in the DoInit2Test"
        />

        <gtest request="GET /servlet-tests/DoServletConfigTest HTTP/1.0"
            testName="DoServletConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoServletConfigTest.html"
            assertion="Returns a ServletConfig object, which contains initialization and startup parameters for this servlet., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.getServletConfig() method"
            testStrategy="Create a servlet and test for the getServletConfig() method to be a non-null value and an initial paramter can be retrieved"
        />

        <gtest request="GET /servlet-tests/DoServletInfoTest HTTP/1.0"
            testName="DoServletInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoServletInfoTest.html"
            assertion="Returns information about the servlet, such as author, version, and copyright., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.getServletInfo() method"
            testStrategy="Create a servlet and test that information is returned"
        />

        <gtest request="GET /servlet-tests/PUTest HTTP/1.0"
            testName="PUTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/PUTest.html"
            assertion="Servlet lifecycle test, check if UnavailableException.isPermanent() is true, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Create a servlet, throw UnavailableException and test if isPermanent() method is true"
        />

        <gtest request="GET /servlet-tests/DoServiceTest HTTP/1.0"
            testName="DoServiceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoServiceTest.html"
            assertion="Called by the servlet container to allow the servlet to respond to a request, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.service() method"
            testStrategy="Inside CoreServletTest, which is the parent servlet, we will override init method and assign some value to the String. We'll check for that value in the service method"
        />

        <!-- END javax_servlet_Servlet -->

        <!-- START javax_servlet_GenericServlet -->

        <gtest request="GET /servlet-tests/DestroyTest HTTP/1.0"
            testName="DestroyTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being taken out of service., specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.Destroy() method"
            testStrategy="Create a GenericServlet and take out of service using destroy method"
        />

        <gtest request="GET /servlet-tests/GetServletConfigTest HTTP/1.0"
            testName="GetServletConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/GenericServlet/GetServletConfigTest.html"
            assertion="Returns this servlet's ServletConfig object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletConfig() method"
            testStrategy="Create a GenericServlet and check for its ServletConfig object existence"
        />

        <gtest request="GET /servlet-tests/GetServletContextTest HTTP/1.0"
            testName="GetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/GenericServlet/GetServletContextTest.html"
            assertion="Returns this servlet's ServletContext object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletContext() method"
            testStrategy="Create a GenericServlet and check for its ServletContext object existence"
        />

        <gtest request="GET /servlet-tests/GetServletInfoTest HTTP/1.0"
            testName="GetServletInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/GenericServlet/GetServletInfoTest.html"
            assertion="Returns this servlet's ServletInfo object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletContext() method"
            testStrategy="Create a GenericServlet and check for its ServletInfo object values"
        />

        <!-- END javax_servlet_GenericServlet -->

        <!-- START javax_servlet_RequestDispatcher -->

        <gtest request="GET /servlet-tests/ForwardTest HTTP/1.0"
            testName="ForwardTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/RequestDispatcher/ForwardTest.html"
            assertion="Forwards a request from a servlet to another resource (servlet, JSP file, or HTML file) on the server, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.RequestDispatcher.ForwardTest() method"
            testStrategy="Create a servlet, get its RequestDispatcher and use it to forward to a servlet"
        />

        <gtest request="GET /servlet-tests/Forward_1Test HTTP/1.0"
            testName="Forward_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/RequestDispatcher/Forward_1Test.html"
            assertion="Throws a java.lang.IllegalStateException, if the response was already committed, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.RequestDispatcher.ForwardTest() method"
            testStrategy="A negative test for RequestDispatcher.forward() method. Create a servlet, print a string to the buffer, flush the buffer to commit the string, get its RequestDispatcher and use it to forward to a servlet."
        />

        <gtest request="GET /servlet-tests/IncludeTest HTTP/1.0"
            testName="IncludeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/RequestDispatcher/IncludeTest.html"
            assertion="Includes the content of a resource (servlet, JSP page, HTML file) in the response, enabling programmatic server-side includes., specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.RequestDispatcher.Include() method"
            testStrategy="Create a servlet, get its RequestDispatcher and use it to include a servlet"
        />

        <gtest request="GET /servlet-tests/Include_1Test HTTP/1.0"
            testName="Include_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/RequestDispatcher/Include_1Test.html"
            assertion="The included servlet cannot change the response status code or set headers; any attempt to make a change is ignored. The request and response parameters must be the same objects as were passed to the calling servlet's service method., specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.RequestDispatcher.Include() method"
            testStrategy="A negative test for RequestDispatcher.include() test. Create a servlet, set its Content-Type to be 'text/plain', get its RequestDispatcher and use it to include a servlet. The included servlet tries to change the Content-Type to be text/html. Test at the client side for correct Content-Type."
        />

        <!-- END javax_servlet_RequestDispatcher -->

        <!-- START javax_servlet_ServletConfig -->

        <gtest request="GET /servlet-tests/GetServletConfigInitParameterNamesTest HTTP/1.0"
            testName="GetServletConfigInitParameterNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletConfigInitParameterNamesTest.html"
            assertion="Returns the names of the servlet's initialization parameters as an Enumeration of String objects, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Set init parameters in the web.xml file and check for the enumerated values in the servlet."
        />

        <gtest request="GET /servlet-tests/GetServletConfigInitParameterNames_1Test HTTP/1.0"
            testName="GetServletConfigInitParameterNames_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletConfigInitParameterNames_1Test.html"
            assertion="If no initialization parameters are set, an empty Enumeration if the servlet has no initialization parameters, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletConfig.getInitParameterNames() Do not set init parameters in the web.xml file and check for null value in the servlet."
        />

        <gtest request="GET /servlet-tests/GetServletConfigInitParameterTest HTTP/1.0"
            testName="GetServletConfigInitParameterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletConfigInitParameterTest.html"
            assertion="Returns a String containing the value of the named initialization parameter, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Set init parameters in the web.xml file and check for the value in the servlet."
        />

        <gtest request="GET /servlet-tests/GetServletConfigInitParameter_1Test HTTP/1.0"
            testName="GetServletConfigInitParameter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletConfigInitParameter_1Test.html"
            assertion="If no initialization parameter is set, this method returns a null value, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletConfig.getInitParameter(). Do not set init parameters in the web.xml file and check for null value after in the servlet."
        />

        <gtest request="GET /servlet-tests/ServletConfigGetServletContextTest HTTP/1.0"
            testName="ServletConfigGetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/ServletConfigGetServletContextTest.html"
            assertion="Returns a reference to the ServletContext in which the servlet is executing, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Try to get the ServletContext for this servlet itself"
        />

        <gtest request="GET /servlet-tests/GetServletNameTest HTTP/1.0"
            testName="GetServletNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletNameTest.html"
            assertion="Returns the name of this servlet instance, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Try to get the ServletName for this servlet itself"
        />

        <!-- END javax_servlet_ServletConfig -->

        <!-- START javax_servlet_ServletContext -->

        <gtest request="GET /servlet-tests/GetMajorVersionTest HTTP/1.0"
            testName="GetMajorVersionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetMajorVersionTest.html"
            assertion="Returns the major version of the Java Servlet API that this servlet container supports, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getMajorVersion() for this servlet itself"
        />

        <gtest request="GET /servlet-tests/GetMimeType_1Test HTTP/1.0"
            testName="GetMimeType_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetMimeType_1Test.html"
            assertion="Returns null if the MIME type is not known, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for getMimeType(). Test the ServletContext.getMimeType() for this servlet itself"
        />

        <gtest request="GET /servlet-tests/GetRealPathTest HTTP/1.0"
            testName="GetRealPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetRealPathTest.html"
            assertion="Returns a String containing the real path for a given virtual path, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getRealPath() for this servlet itself"
        />

        <gtest request="GET /servlet-tests/GetResourceAsStreamTest HTTP/1.0"
            testName="GetResourceAsStreamTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetResourceAsStreamTest.html"
            assertion="Returns the resource located at the named path as an InputStream object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for getResourceAs Stream method"
        />

        <gtest request="GET /servlet-tests/GetResourceAsStream_1Test HTTP/1.0"
            testName="GetResourceAsStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetResourceAsStream_1Test.html"
            assertion="Returns null if no resource exists at the specified path, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for getResourceAsStream() method"
        />

        <gtest request="GET /servlet-tests/GetResourceTest HTTP/1.0"
            testName="GetResourceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetResourceTest.html"
            assertion="Returns a URL to the resource that is mapped to a specified path, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for ServletContext.getResource(String) method"
        />

        <gtest request="GET /servlet-tests/GetResource_1Test HTTP/1.0"
            testName="GetResource_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetResource_1Test.html"
            assertion="This method returns null if no resource is mapped to the pathname, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletContext.getResource(String) method"
        />

        <gtest request="GET /servlet-tests/GetServerInfoTest HTTP/1.0"
            testName="GetServerInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetServerInfoTest.html"
            assertion="Returns the name and version of the servlet container on which the servlet is running., specified in the Java Servlet Pages Specification V2.3, Sec 14"
            testStrategy="Test for ServletContext.getServerInfo() method"
        />

        <gtest request="GET /servlet-tests/Log_StringTest HTTP/1.0"
            testName="Log_StringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/Log_StringTest.html"
            assertion="Writes the specified message to a servlet log file, usually an event log., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for log(String message),by passing the message string. The server specific log file can be looked up to see an outting"
        />

        <gtest request="GET /servlet-tests/Log_StringThrowableTest HTTP/1.0"
            testName="Log_StringThrowableTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/Log_StringThrowableTest.html"
            assertion="Writes an explanatory message and a stack trace for a given Throwable exception to the servlet log file., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for log(String message,Throwable)"
        />

        <gtest request="GET /servlet-tests/ServletContextGetAttributeTest HTTP/1.0"
            testName="ServletContextGetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetAttributeTest.html"
            assertion="Returns the servlet container attribute with the given name, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Try to get the attributes for this servlet itself"
        />

        <gtest request="GET /servlet-tests/ServletContextGetAttribute_1Test HTTP/1.0"
            testName="ServletContextGetAttribute_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetAttribute_1Test.html"
            assertion="Returns null if there is no attribute by that name, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletContext.getAttribute(). Test for null attribute values for this servlet itself"
        />

        <gtest request="GET /servlet-tests/ServletContextGetContextTest HTTP/1.0"
            testName="ServletContextGetContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetContextTest.html"
            assertion="Returns a ServletContext object that corresponds to a specified URL on the server, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for ServletContext object for this servlet itself"
        />

        <gtest request="GET /servlet-tests/ServletContextGetInitParameterNamesTest HTTP/1.0"
            testName="ServletContextGetInitParameterNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetInitParameterNamesTest.html"
            assertion="Returns the names of the context's initialization parameters as an Enumeration of String objects, or an empty Enumeration if the context has no initialization parameters, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getInitParameterNames() for this servlet itself"
        />

        <gtest request="GET /servlet-tests/ServletContextGetInitParameterTest HTTP/1.0"
            testName="ServletContextGetInitParameterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetInitParameterTest.html"
            assertion="Returns a String containing the value of the named context-wide initialization parameter, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getInitParameter(String) for this servlet itself"
        />

        <gtest request="GET /servlet-tests/ServletContextGetInitParameter_1Test HTTP/1.0"
            testName="ServletContextGetInitParameter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetInitParameter_1Test.html"
            assertion="Returns a null if the parameter does not exist, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletContext.getInitParameter(). Test the ServletContext.getInitParameterNames() for this servlet itself"
        />

        <gtest request="GET /servlet-tests/ServletContextRemoveAttributeTest HTTP/1.0"
            testName="ServletContextRemoveAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextRemoveAttributeTest.html"
            assertion="Removes the attribute with the given name from the servlet context., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for ServletContext.removeAttribute() method"
        />

        <gtest request="GET /servlet-tests/ServletContextSetAttributeTest HTTP/1.0"
            testName="ServletContextSetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextSetAttributeTest.html"
            assertion="Binds an object to a given attribute name in this servlet context., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for ServletContext.setAttribute() method"
        />

        <gtest request="GET /servlet-tests/ServletContextGetAttributeNamesTest HTTP/1.0"
            testName="ServletContextGetAttributeNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetAttributeNamesTest.html"
            assertion="Returns an Enumeration containing the attribute names available within this servlet context specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet retrieves attributes which it set itself"
        />

        <gtest request="GET /servlet-tests/GetMinorVersionTest HTTP/1.0"
            testName="GetMinorVersionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetMinorVersionTest.html"
            assertion="Returns the minor version of the Java Servlet API that this servlet container supports, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getMinorVersion() for this servlet itself"
        />

        <gtest request="GET /servlet-tests/GetMimeTypeTest HTTP/1.0"
            testName="GetMimeTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetMimeTypeTest.html"
            assertion="Returns the MIME type of the specified file, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getMimeType() for this servlet itself"
        />

        <gtest request="GET /servlet-tests/ServletContextGetRequestDispatcherTest HTTP/1.0"
            testName="ServletContextGetRequestDispatcherTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetRequestDispatcherTest.html"
            assertion="Returns a RequestDispatcher object that acts as a wrapper for the resource located at the given path, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getRequestDispatcher(String) for this servlet itself"
        />

        <gtest request="GET /servlet-tests/GetNamedDispatcherTest HTTP/1.0"
            testName="GetNamedDispatcherTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetNamedDispatcherTest.html"
            assertion="Returns a RequestDispatcher object that acts as a wrapper for the named servlet. This method returns null if the ServletContext cannot return a RequestDispatcher for any reason, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet verify's that the result from the getNamedDispatcher call and the getServletName call are the same for the servlet."
        />

        <!-- END javax_servlet_ServletContext -->

        <!-- START javax_servlet_ServletException -->

        <gtest request="GET /servlet-tests/GetRootCauseTest HTTP/1.0"
            testName="GetRootCauseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/GetRootCauseTest.html"
            assertion="Returns the exception that caused this servlet exception., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for getRootCause method"
        />

        <gtest request="GET /servlet-tests/ServletExceptionConstructor1Test HTTP/1.0"
            testName="ServletExceptionConstructor1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/ServletExceptionConstructor1Test.html"
            assertion="Constructs a new servlet exception, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for ServletException() constructor method"
        />

        <gtest request="GET /servlet-tests/ServletExceptionConstructor2Test HTTP/1.0"
            testName="ServletExceptionConstructor2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/ServletExceptionConstructor2Test.html"
            assertion="A Test for ServletException(String) constructor method, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for ServletException(String) constructor method"
        />

        <gtest request="GET /servlet-tests/ServletExceptionConstructor3Test HTTP/1.0"
            testName="ServletExceptionConstructor3Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/ServletExceptionConstructor3Test.html"
            assertion="Constructs a new servlet exception when the servlet needs to throw an exception and include a message about the 'root cause' exception that interfered with its normal operation, including a description message., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for ServletException(Throwable) constructor method"
        />

        <gtest request="GET /servlet-tests/ServletExceptionConstructor4Test HTTP/1.0"
            testName="ServletExceptionConstructor4Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/ServletExceptionConstructor4Test.html"
            assertion="Constructs a new servlet exception when the servlet needs to throw an exception and include a message about the 'root cause' exception that interfered with its normal operation., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for ServletException(String,Throwable) constructor method"
        />

        <!-- END javax_servlet_ServletException -->

        <!-- START javax_servlet_ServletInputStream -->

        <gtest request="GET /servlet-tests/ReadLineTest HTTP/1.0"
            testName="ReadLineTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            content="ULTRA SPARC"
            goldenFile="${wgdir}/javax_servlet/ServletInputStream/ReadLineTest.html"
            assertion="Reads the input stream, one line at a time., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for readLine method"
        />

        <!-- END javax_servlet_ServletInputStream -->

        <!-- START javax_servlet_ServletOutputStream -->

        <gtest request="GET /servlet-tests/Print_StringTest HTTP/1.0"
            testName="Print_StringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_StringTest.html"
            assertion="Writes a String to the client, without a carriage return-line feed (CRLF) character at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(java.lang.String s) method"
        />

        <gtest request="GET /servlet-tests/Print_booleanTest HTTP/1.0"
            testName="Print_booleanTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_booleanTest.html"
            assertion="Writes a boolean value to the client, with no carriage return-line feed (CRLF) character at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(boolean b) method"
        />

        <gtest request="GET /servlet-tests/Print_charTest HTTP/1.0"
            testName="Print_charTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_charTest.html"
            assertion="Writes a character to the client, with no carriage return-line feed (CRLF) at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(char c) method"
        />

        <gtest request="GET /servlet-tests/Print_doubleTest HTTP/1.0"
            testName="Print_doubleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_doubleTest.html"
            assertion="Writes a double to the client, with no carriage return-line feed (CRLF) at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(double d) method"
        />

        <gtest request="GET /servlet-tests/Print_floatTest HTTP/1.0"
            testName="Print_floatTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_floatTest.html"
            assertion="Writes a float to the client, followed by a carriage return-line feed (CRLF)., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(float f) method"
        />

        <gtest request="GET /servlet-tests/Print_intTest HTTP/1.0"
            testName="Print_intTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_intTest.html"
            assertion="Writes an integer to the client, with no carriage return-line feed (CRLF) at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(integer i) method"
        />

        <gtest request="GET /servlet-tests/Print_longTest HTTP/1.0"
            testName="Print_longTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_longTest.html"
            assertion="Writes a long to the client, with no carriage return-line feed (CRLF) at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(long l) method"
        />

        <gtest request="GET /servlet-tests/PrintlnTest HTTP/1.0"
            testName="PrintlnTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/PrintlnTest.html"
            assertion="Writes a carriage return-line feed (CRLF) to the client., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for println () method"
        />

        <gtest request="GET /servlet-tests/Println_StringTest HTTP/1.0"
            testName="Println_StringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_StringTest.html"
            assertion="Writes a String to the client, followed by a carriage return-line feed (CRLF)., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(java.lang.String s) method"
        />

        <gtest request="GET /servlet-tests/Println_booleanTest HTTP/1.0"
            testName="Println_booleanTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_booleanTest.html"
            assertion="Writes a boolean to the client, followed by a carriage return-line feed (CRLF)., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(boolean b) method"
        />

        <gtest request="GET /servlet-tests/Println_charTest HTTP/1.0"
            testName="Println_charTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_charTest.html"
            assertion="Writes a char to the client, followed by a carriage return-line feed (CRLF)., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(char c) method"
        />

        <gtest request="GET /servlet-tests/Println_doubleTest HTTP/1.0"
            testName="Println_doubleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_doubleTest.html"
            assertion="Writes a double to the client, followed by a carriage return-line feed (CRLF)., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(double d) method"
        />

        <gtest request="GET /servlet-tests/Println_floatTest HTTP/1.0"
            testName="Println_floatTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_floatTest.html"
            assertion="Writes a float to the client, with no carriage return-line feed (CRLF) at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(float f) method"
        />

        <gtest request="GET /servlet-tests/Println_intTest HTTP/1.0"
            testName="Println_intTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_intTest.html"
            assertion="Writes an integer to the client, followed by a carriage return-line feed (CRLF)., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(integer i) method"
        />

        <gtest request="GET /servlet-tests/Println_longTest HTTP/1.0"
            testName="Println_longTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_longTest.html"
            assertion="Writes a long to the client, followed by a carriage return-line feed (CRLF)., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(long l) method"
        />

        <!-- END javax_servlet_ServletOutputStream -->

        <!-- START javax_servlet_ServletRequest -->

        <gtest request="GET /servlet-tests/GetContentLengthTest HTTP/1.0"
            testName="GetContentLengthTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            content="12345678901234567890"
            requestHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetContentLengthTest.html"
            assertion="Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the length is not known., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getContentLength() method"
        />

        <gtest request="GET /servlet-tests/GetContentTypeTest HTTP/1.0"
            testName="GetContentTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetContentTypeTest.html"
            assertion="Returns the MIME type of the body of the request, or null if the type is not known., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getContentType() method"
        />

        <gtest request="GET /servlet-tests/GetInputStreamTest HTTP/1.0"
            testName="GetInputStreamTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetInputStreamTest.html"
            assertion="Retrieves the body of the request as binary data using a ServletInputStream., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getInputStream() method"
        />

        <gtest request="GET /servlet-tests/GetInputStream_1Test HTTP/1.0"
            testName="GetInputStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetInputStream_1Test.html"
            assertion="The exception IllegalStateException will be thrown if the getReader method has already been called for this request, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet attempts to call getInputStream after getReader has already been called"
        />

        <gtest request="GET /servlet-tests/GetLocaleTest HTTP/1.0"
            testName="GetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-US"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetLocaleTest.html"
            assertion="Returns the preferred Locale that the client will accept content in, based on the Accept-Language header, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client sets the locale that it will accept and calls servlet. Servlet verifies it received the correct locale"
        />

        <gtest request="GET /servlet-tests/GetLocalesTest HTTP/1.0"
            testName="GetLocalesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-US,en-GB"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetLocalesTest.html"
            assertion="Returns an Enumeration of Locale objects indicating, in decreasing order starting with the preferred locale, the locales that are acceptable to the client based on the Accept-Language header. servlet., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client sets the locales that it will accept and calls servlet. Servlet verifies it received the correct locale"
        />

        <gtest request="GET /servlet-tests/GetParameterNamesTest?BestLanguage=Java&amp;BestJSP=Java2 HTTP/1.0"
            testName="GetParameterNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterNamesTest.html"
            assertion="Returns an Enumeration of String objects containing the names of the parameters contained in this request., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client passes 2 parameters to the servlet. Servlet verifies it receives the correct parameters."
        />

        <gtest request="GET /servlet-tests/GetParameterNames_1Test HTTP/1.0"
            testName="GetParameterNames_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterNames_1Test.html"
            assertion="Returns an empty Enumerationif no input parameter names are given to the servlet., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletRequest.getParameterNames() method"
        />

        <gtest request="GET /servlet-tests/GetParameterTest?BestLanguage=Java HTTP/1.0"
            testName="GetParameterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterTest.html"
            assertion="Returns the value of a request parameter as a String specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getParameter(String) method"
        />

        <gtest request="GET /servlet-tests/GetParameterValuesTest?Containers=JSP&amp;Containers=Servlet HTTP/1.0"
            testName="GetParameterValuesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterValuesTest.html"
            assertion="Returns an array of String objects containing all of the values the given request parameter has, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client sends a single parameter that has 2 values to the servlet. Servlet verifies it received both values."
        />

        <gtest request="GET /servlet-tests/GetParameterValues_1Test HTTP/1.0"
            testName="GetParameterValues_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterValues_1Test.html"
            assertion="Returns null as the parameter does not exist., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletRequest.getParameterValues() method"
        />

        <gtest request="GET /servlet-tests/GetParameter_1Test HTTP/1.0"
            testName="GetParameter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameter_1Test.html"
            assertion="Returns null as the parameter does not exist., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletRequest.getParameter() method"
        />

        <gtest request="GET /servlet-tests/GetProtocolTest HTTP/1.0"
            testName="GetProtocolTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetProtocolTest.html"
            assertion="Returns the name and version of the protocol the request uses in the form protocol/majorVersion.minorVersion, for example, HTTP/1.1., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getProtocol() method"
        />

        <gtest request="GET /servlet-tests/GetReaderTest HTTP/1.0"
            testName="GetReaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetReaderTest.html"
            assertion="Retrieves the body of the request as character data using a BufferedReader., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Get an InputStream object using ServletRequest.getInputStream()"
        />

        <gtest request="GET /servlet-tests/GetReader_1Test HTTP/1.0"
            testName="GetReader_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetReader_1Test.html"
            assertion="Retrieves the body of the request as character data using a BufferedReader., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletRequest.getReader() method. Get an InputStream object using ServletRequest.getInputStream() then try to get the Reader Object. An IllegalStateException should be thrown"
        />

        <gtest request="GET /servlet-tests/GetRemoteAddrTest?Address=127.0.0.1 HTTP/1.0"
            testName="GetRemoteAddrTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetRemoteAddrTest.html"
            assertion="Returns the Internet Protocol (IP) address of the client that sent the request., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getRemoteAddress() method"
        />

        <gtest request="GET /servlet-tests/GetRemoteHostTest?Address=${host}&amp;Address=127.0.0.1 HTTP/1.0"
            testName="GetRemoteHostTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetRemoteHostTest.html"
            assertion="Returns the fully qualified name of the client that sent the request, or the IP address of the client if the name cannot be determined., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getRemoteHost() method"
        />

        <gtest request="GET /servlet-tests/GetSchemeTest HTTP/1.0"
            testName="GetSchemeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetSchemeTest.html"
            assertion="Returns the name of the scheme used to make this request, for example, http, https, or ftp.., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getScheme() method"
        />

        <gtest request="GET /servlet-tests/GetServerNameTest?hostname=${host} HTTP/1.0"
            testName="GetServerNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetServerNameTest.html"
            assertion="Returns the host name of the server that received the request specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getServerName() method"
        />

        <gtest request="GET /servlet-tests/GetServerPortTest?port=${port} HTTP/1.0"
            testName="GetServerPortTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetServerPortTest.html"
            assertion="Returns the port number on which this request was received., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getServerPort() method"
        />

        <gtest request="GET /servlet-tests/ServletRequestGetAttributeNamesTest HTTP/1.0"
            testName="ServletRequestGetAttributeNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetAttributeNamesTest.html"
            assertion="Returns an Enumeration containing the names of the attributes available to this request specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getAttributeNames() method"
        />

        <gtest request="GET /servlet-tests/ServletRequestGetAttributeTest HTTP/1.0"
            testName="ServletRequestGetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetAttributeTest.html"
            assertion="Returns the value of the named attribute as an Object specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getAttributeName(String) method"
        />

        <gtest request="GET /servlet-tests/ServletRequestGetAttribute_01Test HTTP/1.0"
            testName="ServletRequestGetAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetAttribute_01Test.html"
            assertion="Returns null if no attribute of the given name exists., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getAttributeName(String) method"
        />

        <gtest request="GET /servlet-tests/ServletRequestGetCharacterEncodingTest HTTP/1.0"
            testName="ServletRequestGetCharacterEncodingTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain; charset=ISO-8859-1"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetCharacterEncodingTest.html"
            assertion="Returns the name of the character encoding used in the body of this request encoding, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet verifies is receives the default encoding of IS0-8858-1 method"
        />

        <gtest request="GET /servlet-tests/ServletRequestGetCharacterEncoding_1Test HTTP/1.0"
            testName="ServletRequestGetCharacterEncoding_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetCharacterEncoding_1Test.html"
            assertion="Returns a null if the request does not specify a character encoding, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet verifies it receives a null result"
        />

        <gtest request="GET /servlet-tests/ServletRequestSetCharacterEncoding_1Test HTTP/1.0"
            testName="ServletRequestSetCharacterEncoding_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestSetCharacterEncoding_1Test.html"
            assertion="Throws java.io.UnsupportedEncodingException if the encoding specified is not valid encoding, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="servlet attempt to set an invalid encoding and exception should be thrown"
        />

        <gtest request="GET /servlet-tests/ServletRequestGetRequestDispatcherTest HTTP/1.0"
            testName="ServletRequestGetRequestDispatcherTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetRequestDispatcherTest.html"
            assertion="Returns a RequestDispatcher object that acts as a wrapper for the resource located at the given path., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getRequestDispatcher() method"
        />

        <gtest request="GET /servlet-tests/ServletRequestSetAttributeTest HTTP/1.0"
            testName="ServletRequestSetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestSetAttributeTest.html"
            assertion="Stores an attribute in this request, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet sets an attribute and then verifies it can be read back"
        />

        <!-- END javax_servlet_ServletRequest -->

        <!-- START javax_servlet_UnavailableException -->

        <gtest request="GET /servlet-tests/GetUnavailableSecondsTest HTTP/1.0"
            testName="GetUnavailableSecondsTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/UnavailableException/GetUnavailableSecondsTest.html"
            assertion="Returns the number of seconds the servlet expects to be temporarily unavailable., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for UnavailableException.getUnavailableSeconds() method."
        />

        <gtest request="GET /servlet-tests/IsPermanentTest HTTP/1.0"
            testName="IsPermanentTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/UnavailableException/IsPermanentTest.html"
            assertion="Returns a boolean indicating whether the servlet is permanently unavailable., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for UnavailableException.isPermanent() method."
        />

        <gtest request="GET /servlet-tests/UnavailableException_Constructor1Test HTTP/1.0"
            testName="UnavailableException_Constructor1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/UnavailableException/UnavailableException_Constructor1Test.html"
            assertion="Constructs a new exception with a descriptive message indicating that the servlet is permanently unavailable., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for UnavailableException(String mesg). It constructs an UnavailabaleException object for the specified servlet. This constructor tests for permanent unavailability"
        />

        <gtest request="GET /servlet-tests/UnavailableException_Constructor2Test HTTP/1.0"
            testName="UnavailableException_Constructor2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/UnavailableException/UnavailableException_Constructor2Test.html"
            assertion="Constructs a new exception with a descriptive message indicating that the servlet is temporarily unavailable and giving an estimate of how long it will be unavailable., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for UnavailableException(String mesg). It constructs an UnavailabaleException object for the specified servlet. This constructor tests for temporarily unavailability"
        />

        <!-- END javax_servlet_UnavailableException -->

        <!--START javax_servlet_ServletResponse -->

        <gtest request="GET /servlet-tests/FlushBufferTest HTTP/1.0"
            testName="FlushBufferTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/FlushBufferTest.html"
            assertion="Forces any content in the buffer to be written to the client specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet writes data in the buffer and flushes it"
        />

        <gtest request="GET /servlet-tests/GetBufferSizeTest HTTP/1.0"
            testName="GetBufferSizeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/GetBufferSizeTest.html"
            assertion="Returns the actual buffer size used for the response., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.getBufferSize() method"
        />

        <gtest request="GET /servlet-tests/GetOutputStream_1Test HTTP/1.0"
            testName="GetOutputStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/GetOutputStream_1Test.html"
            assertion="illegalStateException is thrown if the getWriter method has been called on this response ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletResponse.getOutputStream() method. We will get a PrintWriter object first and we will try to get an OutPutStream Object. IllegalStateException should be thrown"
        />

        <gtest request="GET /servlet-tests/GetWriter_1Test HTTP/1.0"
            testName="GetWriter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/GetWriter_1Test.html"
            assertion="IllegalStateException is thrown if the getOutputStream method has already been called for this response object , specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletResponse.getWriter() method. We will get a PrintWriter object first and we will try to get an OutPutStream Object. IllegalStateException should be thrown."
        />

        <gtest request="GET /servlet-tests/IsCommittedTest HTTP/1.0"
            testName="IsCommittedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/IsCommittedTest.html"
            assertion="Returns a boolean indicating if the response has been committed., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.isCommitted() method"
        />

        <gtest request="GET /servlet-tests/ResetTest HTTP/1.0"
            testName="ResetTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/ResetTest.html"
            assertion="Clears any data that exists in the buffer,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet writes out to buffer then clears it. Should only get pass message back"
        />

        <gtest request="GET /servlet-tests/Reset_1Test HTTP/1.0"
            testName="Reset_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/Reset_1Test.html"
            assertion="Throws IllegalStateException if the response has already been committed, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative Test for ServletResponse.reset() method. Commit the response has been committed, and test if this method throws an IllegalStateException."
        />

        <gtest request="GET /servlet-tests/ServletResponseGetCharacterEncodingTest HTTP/1.0"
            testName="ServletResponseGetCharacterEncodingTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/ServletResponseGetCharacterEncodingTest.html"
            assertion="Returns the name of the charset used for the MIME body sent in this response., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.getCharacterEncoding() method"
        />

        <gtest request="GET /servlet-tests/SetBufferSizeTest HTTP/1.0"
            testName="SetBufferSizeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/SetBufferSizeTest.html"
            assertion="Sets the preferred buffer size for the body of the response. specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.setBufferSize() method"
        />

        <gtest request="GET /servlet-tests/SetBufferSize_1Test HTTP/1.0"
            testName="SetBufferSize_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/SetBufferSize_1Test.html"
            assertion="illegalStateException is thrown if this method is called after content has been written, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletResponse.setBufferSize() method. Invoke setBufferSize method, after the content is written using ServletOutputStream. Test for IllegalStateException error"
        />

        <gtest request="GET /servlet-tests/SetContentLengthTest HTTP/1.0"
            testName="SetContentLengthTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Length:31"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/SetContentLengthTest.html"
            assertion="Sets the length of the content body in the response, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.setContentLength() method."
        />

        <gtest request="GET /servlet-tests/SetContentTypeTest HTTP/1.0"
            testName="SetContentTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Type:text/html"
            assertion="Sets the content type of the response being sent to the client., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.setContentType() method."
        />

        <gtest request="GET /servlet-tests/SetLocaleTest HTTP/1.0"
            testName="SetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Language:en-US"
            assertion="Sets the locale of the response, setting the headers (including the Content-Type's charset) as appropriate., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.setLocale() method."
        />

        <!-- END javax_servlet_ServletResponse -->

        <!-- START javax_servlet_FilterConfig -->

        <gtest request="GET /servlet-tests/GetFilterNameTest HTTP/1.0"
            testName="GetFilterNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetFilterNameTest.html"
            assertion="This method returns the filter-name of this filter as defined in the deployment descriptor, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.FilterConfig.getFilterName method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />

        <gtest request="GET /servlet-tests/GetInitParamNamesTest HTTP/1.0"
            testName="GetInitParamNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetInitParamNamesTest.html"
            assertion="The Filter returns the names of the servlet's initialization parameters as an Enumeration of String objects, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Config.getInitParamterNames method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />

        <gtest request="GET /servlet-tests/GetInitParamNamesNullTest HTTP/1.0"
            testName="GetInitParamNamesNullTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetInitParamNamesNullTest.html"
            assertion="The Filter returns an empty Enumeration if the    names of the servlet's initialization parameters do not exist, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Config.getInitParamterNames method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />

        <gtest request="GET /servlet-tests/GetInitParamTest HTTP/1.0"
            testName="GetInitParamTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetInitParamTest.html"
            assertion="The Filter returns a String containing the value of the named initialization parameter, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Config.getInitParameter method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />

        <gtest request="GET /servlet-tests/GetInitParamNullTest HTTP/1.0"
            testName="GetInitParamNullTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetInitParamNullTest.html"
            assertion="The Filter returns a null if the parameter does not exist, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Config.getInitParameter method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />

        <gtest request="GET /servlet-tests/GetServletContextFilterTest HTTP/1.0"
            testName="GetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetServletContextTest.html"
            assertion="A reference to the ServletContext object is returned, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Config.getServletContext method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />

        <!-- END javax_servlet_FilterConfig -->

        <!-- START javax_servlet_FilterChain -->

        <gtest request="GET /servlet-tests/FilterChainTest HTTP/1.0"
            testName="FilterChainTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterChain/FilterChainTest.html"
            assertion="The next filter in the chain to be invoked, or if the calling filter is the last filter in the chain, causes the resource at the end of the chain to be invoked, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.FilterChain.doFilter method"
            testStrategy="Client attempts to access a servlet and both filters configured for that servlet should be invoked."
        />

        <!-- END javax_servlet_FilterChaing -->

        <!-- START javax_servlet_ServletContextAttributeListener -->

        <gtest request="GET /servlet-tests/ServletContextAttributeAddedTest HTTP/1.0"
            testName="ServletContextAttributeAddedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeListener/ServletContextAttributeAddedTest.html"
            assertion="Test that a notification is generated that a new attribute was added to the servlet context, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet. ServletContextAttributeListener.attributeAdded method"
            testStrategy="Client calls a servlet that adds an attribute. The listener should detect the add and write a message out to a static log file. Servlet then reads the file and sends the files contents back to the client."
        />

        <gtest request="GET /servlet-tests/ServletContextAttributeRemovedTest HTTP/1.0"
            testName="ServletContextAttributeRemovedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeListener/ServletContextAttributeRemovedTest.html"
            assertion="Test that a notification is generated that an existing attribute has been removed from the servlet context, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextAttributeListener. attributeRemoved method"
            testStrategy="Client calls a servlet that adds/removes an attribute. The listener should detect the two actions and write a message out to a static log file. Servlet then reads the file and sends the files contents back to the client."
        />

        <gtest request="GET /servlet-tests/ServletContextAttributeReplacedTest HTTP/1.0"
            testName="ServletContextAttributeReplacedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeListener/ServletContextAttributeReplacedTest.html"
            assertion="Test that a notification is generated that an existing attribute has been replaced from the servlet context, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextAttributeListener. attributeReplaced method"
            testStrategy="Client calls a servlet that adds/replaces an attribute. The listener should detect the two actions and write a message to a static log file. Servlet then reads the file and sends the files contents back to the client."
        />

        <!-- END javax_servlet_ServletContextAttributeListener -->

        <!-- START javax_servlet_ServletContextListener -->

        <gtest request="GET /servlet-tests/ContextInitializedTest HTTP/1.0"
            testName="ContextInitializedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextListener/ContextInitializedTest.html"
            assertion="Test for notification that the web application is ready to process requests after the context is initialized, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextListener.contextInitialized method"
            testStrategy="A ServletContext Listener is deployed and the listener write a message indicating so to a static log file. The client calls a servlet that reads the log and send the info back to the client"
        />

        <!-- END javax_servlet_ServletContextListener -->

        <!-- START javax_servlet_ServletContextAttributeEvent -->

        <gtest request="GET /servlet-tests/ServletContextAttributeAddedEventTest HTTP/1.0"
            testName="ServletContextAttributeAddedEventTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeEvent/ServletContextAttributeAddedEventTest.html"
            assertion="Test that a notification is generated that a new attribute was added to the servlet context, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet. ServletContextAttributeListener.attributeAdded method"
            testStrategy="Client calls a servlet that adds an attribute. The listener should detect the add and write the name and value out to a static log file. Servlet then reads the log file and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/ServletContextAttributeRemovedEventTest HTTP/1.0"
            testName="ServletContextAttributeRemovedEventTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeEvent/ServletContextAttributeRemovedEventTest.html"
            assertion="Test that a notification is generated that an existing attribute has been removed from the servlet context, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextAttributeListener. attributeRemoved method"
            testStrategy="Client calls a servlet that adds/removes an attribute. The listener should detect the two actions and write the name and value out to a static log file. Servlet then reads the log file and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/ServletContextAttributeReplacedEventTest HTTP/1.0"
            testName="ServletContextAttributeReplacedEventTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeEvent/ServletContextAttributeReplacedEventTest.html"
            assertion="Test that a notification is generated that an existing attribute has been replaced from the servlet context, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextAttributeListener. attributeReplaced method"
            testStrategy="Client calls a servlet that adds/replaces an attribute. The listener should detect the two actions and write the name and value out to a static log file. Servlet then reads the log file and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/ServletContextAttributeEventConstructorTest HTTP/1.0"
            testName="ServletContextAttributeEventConstructorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeEvent/ServletContextAttributeEventConstructorTest.html"
            assertion="Test that ServletContextAttributeEvent can be constructed from the given context for the given attribute name and value specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextAttributeEvent."
            testStrategy="Client calls a servlet that creates a ServletContextAttributeEvent object."
        />

        <!-- END javax_servlet_ServletContextAttributeEvent -->

        <!-- START javax_servlet_ServletContextEvent -->

        <gtest request="GET /servlet-tests/ServletContextGetSourceTest HTTP/1.0"
            testName="ServletContextGetSourceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextEvent/ServletContextGetSourceTest.html"
            assertion="Test for the object on which the Event initially occurred specified in the java.util.EventObject.getSource method"
            testStrategy="Deploy a servlet context event listener. When the context gets initialized, write a status message to a static log. Client calls servlet which reads the static log looking for a specific message and returns the message to the client."
        />

        <gtest request="GET /servlet-tests/ServletContextGetServletContextTest HTTP/1.0"
            testName="ServletContextGetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextEvent/ServletContextGetServletContextTest.html"
            assertion="Returns the ServletContext that has changed, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextEvent.getServletContext method"
            testStrategy="Deploy a servlet context event listener. When the context gets initialized, write a status message to a static log. Client calls servlet which reads the static log looking for a specific message and returns the message to the client."
        />

        <!-- END javax_servlet_ServletContextEvent -->

        <!-- START javax_servlet_ServletRequestWrapper -->

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetAttributeNamesTest HTTP/1.0"
            testName="ServletRequestWrapperGetAttributeNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetAttributeNamesTest.html"
            assertion="The default behavior of this method is to call getAttributeNames() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetAttributeTest HTTP/1.0"
            testName="ServletRequestWrapperGetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetAttributeTest.html"
            assertion="The default behavior of this method is to call getAttribute(String name)on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetAttribute_01Test HTTP/1.0"
            testName="ServletRequestWrapperGetAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetAttribute_01Test.html"
            assertion="The default behavior of this method is to call getAttribute(String name)on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that null is returned for a get of an attribute that does not exist and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetCharacterEncodingTest HTTP/1.0"
            testName="ServletRequestWrapperGetCharacterEncodingTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain; charset=ISO-8859-1"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetCharacterEncodingTest.html"
            assertion="The default behavior of this method is to return getCharacterEncoding() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetContentLengthTest HTTP/1.0"
            testName="ServletRequestWrapperGetContentLengthTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetContentLengthTest.html"
            content="calling ServletRequestWrapperGetContentLengthTest"
            assertion="The default behavior of this method is to return getContentLength() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetContentTypeTest HTTP/1.0"
            testName="ServletRequestWrapperGetContentTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetContentTypeTest.html"
            assertion="The default behavior of this method is to return getContentLength() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetInputStreamTest HTTP/1.0"
            testName="ServletRequestWrapperGetInputStreamTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetInputStreamTest.html"
            assertion="The default behavior of this method is to return getInputStream() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetInputStream_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetInputStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetInputStream_1Test.html"
            assertion="The default behavior of this method is to return getInputStream() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then attempts to get a reader object after one has already been gotten, then the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetLocaleTest HTTP/1.0"
            testName="ServletRequestWrapperGetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-us"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetLocaleTest.html"
            assertion="The default behavior of this method is to return getLocale() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetLocalesTest HTTP/1.0"
            testName="ServletRequestWrapperGetLocalesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-US,en-GB"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetLocalesTest.html"
            assertion="The default behavior of this method is to return getLocales() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetParameterMapTest?BestLanguage=Java&amp;BestJSP=Java2 HTTP/1.0"
            testName="ServletRequestWrapperGetParameterMapTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterMapTest.html"
            assertion="The default behavior of this method is to return getParameterMap() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetParameterNamesTest?BestLanguage=Java&amp;BestJSP=Java2 HTTP/1.0"
            testName="ServletRequestWrapperGetParameterNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterNamesTest.html"
            assertion="The default behavior of this method is to return getParameterNames() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetParameterNames_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetParameterNames_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterNames_1Test.html"
            assertion="The default behavior of this method is to return getParameterNames() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that no paramters are returned if none are set and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetParameterTest?BestLanguage=Java HTTP/1.0"
            testName="ServletRequestWrapperGetParameterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterTest.html"
            assertion="The default behavior of this method is to return getParameter(String) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetParameterValuesTest?Containers=JSP&amp;Containers=Servlet HTTP/1.0"
            testName="ServletRequestWrapperGetParameterValuesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterValuesTest.html"
            assertion="The default behavior of this method is to return getParameterValues(String) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetParameterValues_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetParameterValues_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterValues_1Test.html"
            assertion="The default behavior of this method is to return getParameterValues(String) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that a null is returned for a non existing item and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetParameter_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetParameter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameter_1Test.html"
            assertion="The default behavior of this method is to return getParameter(String) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that null is returned for a non-existing parameter and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetProtocolTest HTTP/1.0"
            testName="ServletRequestWrapperGetProtocolTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetProtocolTest.html"
            assertion="The default behavior of this method is to return getProtocol() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetReaderTest HTTP/1.0"
            testName="ServletRequestWrapperGetReaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetReaderTest.html"
            assertion="The default behavior of this method is to return getReader() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetReader_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetReader_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetReader_1Test.html"
            assertion="The default behavior of this method is to return getReader() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that an exception is thrown when an attempt to get a reader after one has altready been gotten and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetRemoteAddrTest?Address=127.0.0.1 HTTP/1.0"
            testName="ServletRequestWrapperGetRemoteAddrTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetRemoteAddrTest.html"
            assertion="The default behavior of this method is to return getRemoteAddr() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetRemoteHostTest?Address=${host}&amp;Address=127.0.0.1 HTTP/1.0"
            testName="ServletRequestWrapperGetRemoteHostTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetRemoteHostTest.html"
            assertion="The default behavior of this method is to return getRemoteHost() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetRequestDispatcherTest HTTP/1.0"
            testName="ServletRequestWrapperGetRequestDispatcherTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetRequestDispatcherTest.html"
            assertion="The default behavior of this method is to return getRequestDispatcher() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetSchemeTest HTTP/1.0"
            testName="ServletRequestWrapperGetSchemeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetSchemeTest.html"
            assertion="The default behavior of this method is to return getScheme() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetServerNameTest?hostname=${host} HTTP/1.0"
            testName="ServletRequestWrapperGetServerNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetServerNameTest.html"
            assertion="The default behavior of this method is to return getServerName() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperGetServerPortTest?port=${port} HTTP/1.0"
            testName="ServletRequestWrapperGetServerPortTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetServerPortTest.html"
            assertion="The default behavior of this method is to return getServerPort() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperIsSecureTest HTTP/1.0"
            testName="ServletRequestWrapperIsSecureTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperIsSecureTest.html"
            assertion="The default behavior of this method is to return isSecure() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperRemoveAttributeTest HTTP/1.0"
            testName="ServletRequestWrapperRemoveAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperRemoveAttributeTest.html"
            assertion="The default behavior of this method is to return removeAttribute() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sreqw/ServletRequestWrapperSetAttributeTest HTTP/1.0"
            testName="ServletRequestWrapperSetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperSetAttributeTest.html"
            assertion="The default behavior of this method is to return setAttribute() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <!-- END javax_servlet_ServletRequestWrapper -->

        <!-- START javax_servlet_ServletResponseWrapper -->

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperFlushBufferTest HTTP/1.0"
            testName="ServletResponseWrapperFlushBufferTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperFlushBufferTest.html"
            assertion="The default behavior of this method is to call flushBuffer() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperGetBufferSizeTest HTTP/1.0"
            testName="ServletResponseWrapperGetBufferSizeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetBufferSizeTest.html"
            assertion="The default behavior of this method is to return getBufferSize() on the wrapped response object , specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperGetCharacterEncodingTest HTTP/1.0"
            testName="ServletResponseWrapperGetCharacterEncodingTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetCharacterEncodingTest.html"
            assertion="The default behavior of this method is to return getCharacterEncoding() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperGetOutputStream_1Test HTTP/1.0"
            testName="ServletResponseWrapperGetOutputStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetOutputStream_1Test.html"
            assertion="The default behavior of this method is to return getOutputStream() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperGetWriter_1Test HTTP/1.0"
            testName="ServletResponseWrapperGetWriter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetWriter_1Test.html"
            assertion="The default behavior of this method is to return getWriter() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperIsCommittedTest HTTP/1.0"
            testName="ServletResponseWrapperIsCommittedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperIsCommittedTest.html"
            assertion="The default behavior of this method is to return isCommitted() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperResetBufferTest HTTP/1.0"
            testName="ServletResponseWrapperResetBufferTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Type:text/html"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperResetBufferTest.html"
            assertion="The default behavior of this method is to call resetBuffer() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperResetTest HTTP/1.0"
            testName="ServletResponseWrapperResetTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperResetTest.html"
            assertion="The default behavior of this method is to call reset() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperReset_1Test HTTP/1.0"
            testName="ServletResponseWrapperReset_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperReset_1Test.html"
            assertion="When the response has been committed, this method throws an IllegalStateException, specified in the Java Servlet Pages Specification v2.3, Sec 14."
            testStrategy="Client calls a servlet who's response has been wrapped. The servlet attempts to reset the buffer after it has already been flushed. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperSetBufferSizeTest HTTP/1.0"
            testName="ServletResponseWrapperSetBufferSizeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetBufferSizeTest.html"
            assertion="The default behavior of this method is to call setBufferSize(int size) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperSetBufferSize_1Test HTTP/1.0"
            testName="ServletResponseWrapperSetBufferSize_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetBufferSize_1Test.html"
            assertion="The default behavior of this method is to call setBufferSize(int size) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperSetContentLengthTest HTTP/1.0"
            testName="ServletResponseWrapperSetContentLengthTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Length:58"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetContentLengthTest.html"
            assertion="The default behavior of this method is to call setContentLength(int len) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperSetContentTypeTest HTTP/1.0"
            testName="ServletResponseWrapperSetContentTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Type:text/html"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetContentTypeTest.html"
            assertion="The default behavior of this method is to call setContentType(String type) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperSetLocaleTest HTTP/1.0"
            testName="ServletResponseWrapperSetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Language:en-US"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetLocaleTest.html"
            assertion="The default behavior of this method is to call setLocale(Locale loc) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/sresw/ServletResponseWrapperGetLocaleTest HTTP/1.0"
            testName="ServletResponseWrapperGetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetLocaleTest.html"
            assertion="The default behavior of this method is to return getLocale() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <!-- END javax_servlet_ServletResponseWrapper -->

        <!-- START javax_servlet_SingleThreadModel -->

        <gtest request="GET /servlet-tests/STMClient?count=10&amp;path=SingleModelTest HTTP/1.0"
            testName="SingleModelTest" debug="0"
            host="${host}" port="${port}"
            returnCode="200"
        />

        <!-- END javax_servlet_SingleThreadModel -->

        <!-- START javax_servlet_Error -->

        <gtest request="GET /servlet-tests/ServletToServletErrorPageTest HTTP/1.0"
            testName="ServletToServletErrorPageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToServletErrorPageTest.html"
            assertion="Returns the error handling request attributes from a servlet error page(SERVLET)., specified in the Java Servlet Pages Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.ArithmeticException and the error page (servlet) for that exception is executed."
        />

        <gtest request="GET /servlet-tests/ServletToServletError501PageTest HTTP/1.0"
            testName="ServletToServletError501PageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToServletError501PageTest.html"
            assertion="Returns the error handling request attributes from a servlet error page(SERVLET)., specified in the Java Servlet Pages Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.ArithmeticException and the error page (servlet) for that exception is executed."
        />

        <gtest request="GET /servlet-tests/ServletToJSPErrorPageTest HTTP/1.0"
            testName="ServletToJSPErrorPageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToJSPErrorPageTest.html"
            assertion="Returns the error handling request attributes from an error page (JSP)., specified in the Java Servlet Pages Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.ArrayIndexOutOfBoundsException and the error page (servlet) for that exception is executed."
        />

        <gtest request="GET /servlet-tests/ServletToJSPError502PageTest HTTP/1.0"
            testName="ServletToJSPError502PageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToJSPError502PageTest.html"
            assertion="Returns the error handling request attributes from an error page (JSP)., specified in the Java Servlet Pages Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.ArrayIndexOutOfBoundsException and the error page (servlet) for that exception is executed."
        />

        <gtest request="GET /servlet-tests/ServletToHTMLErrorPageTest HTTP/1.0"
            testName="ServletToHTMLErrorPageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToHTMLErrorPageTest.html"
            assertion="Serves back the resource (HTML) as indicated by the location entry, specified in the Java Servlet Pages Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.NumberFormatException and the error page (HTML) for that exception is executed."
        />

        <!-- END javax_servlet_Error -->

        <!-- START javax_servlet_http_HttpServletRequest -->

        <gtest request="GET /servlet-tests/GetAuthTypeWithoutProtectionTest HTTP/1.0"
            testName="GetAuthTypeWithoutProtectionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetAuthTypeWithoutProtectionTest.html"
            assertion="Returns null if the request was not authenticated,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for HttpServletRequest.getAuthType() method"
        />

        <gtest request="GET /servlet-tests/GetContextPathTest HTTP/1.0"
            testName="GetContextPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetContextPathTest.html"
            assertion="Returns the portion of the request URI that indicates the context of the request.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for HttpServletRequest.getContextPath() method"
        />

        <gtest request="GET /servlet-tests/GetCookiesTest HTTP/1.0"
            testName="GetCookiesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Cookie:BestLanguage=Java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetCookiesTest.html"
            assertion="Returns an array containing all of the Cookie objects the client sent with this request.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for HttpServletRequest.getCookies() method"
        />

        <gtest request="GET /servlet-tests/GetCookies_01Test HTTP/1.0"
            testName="GetCookies_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetCookies_01Test.html"
            assertion="Returns returns null if no cookies were sent with the request ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getCookies() method"
        />

        <gtest request="GET /servlet-tests/GetDateHeaderTest HTTP/1.0"
            testName="GetDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:Sat, 01 Jan 2000 00:00:01 GMT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeaderTest.html"
            assertion="Returns the value of the specified request header as a long value that represents a Date object.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method"
        />

        <gtest request="GET /servlet-tests/GetDateHeaderLCaseTest HTTP/1.0"
            testName="GetDateHeaderLCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:sat, 01 jan 2000 00:00:01 gmt"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeaderLCaseTest.html"
            assertion="Interprets and returns the lower case value of the specified request header as a long value that represents a Date object.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method"
        />

        <gtest request="GET /servlet-tests/GetDateHeaderMxCaseTest HTTP/1.0"
            testName="GetDateHeaderMxCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:SaT, 01 jAn 2000 00:00:01 GmT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeaderMxCaseTest.html"
            assertion="Interprets and returns the mixed case value of the specified request header as a long value that represents a Date object.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method"
        />

        <gtest request="GET /servlet-tests/GetDateHeader_01Test HTTP/1.0"
            testName="GetDateHeader_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeader_01Test.html"
            assertion="If the request did not have a header of the specified name, this method returns -1,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method. We sent no Header from the client side, so we should get a value of '-1'"
        />

        <gtest request="GET /servlet-tests/GetDateHeader_02Test HTTP/1.0"
            testName="GetDateHeader_02Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeader_02Test.html"
            assertion="Throws illegalArgumentException, If the header value can't be converted to a date, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method. We sent a Header which is not of 'Date' format so we should get IllegalArgumentException."
        />

        <gtest request="GET /servlet-tests/GetDateHeader_02LCaseTest HTTP/1.0"
            testName="GetDateHeader_02LCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeader_02LCaseTest.html"
            assertion="Throws illegalArgumentException, even when using a lowercase header it's value can't be converted to a date, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method. We sent a Header which is not of 'Date' format so we should get IllegalArgumentException."
        />

        <gtest request="GET /servlet-tests/GetDateHeader_02MxCaseTest HTTP/1.0"
            testName="GetDateHeader_02MxCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeader_02MxCaseTest.html"
            assertion="Throws illegalArgumentException, even when using a mixed case header it's value can't be converted to a date, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method. We sent a Header which is not of 'Date' format so we should get IllegalArgumentException."
        />

        <gtest request="GET /servlet-tests/GetHeaderNamesTest HTTP/1.0"
            testName="GetHeaderNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Cookie:BestLanguage=java|If-Modified-Since:Sat, 01 Jan 2000 00:00:01 GMT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaderNamesTest.html"
            assertion="Returns an enumeration of all the header names this request contains., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeaderNames() method."
        />

        <gtest request="GET /servlet-tests/GetHeader_01Test HTTP/1.0"
            testName="GetHeader_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeader_01Test.html"
            assertion="Returns null if the request does not have a header of that name,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getHeader() method."
        />

        <gtest request="GET /servlet-tests/GetHeadersTest HTTP/1.0"
            testName="GetHeadersTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-us|Accept-Language:ga-us"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeadersTest.html"
            assertion="Returns all the values of the specified request header as an Enumeration of String objects.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeaders() method."
        />

        <gtest request="GET /servlet-tests/GetHeadersEmptyTest HTTP/1.0"
            testName="GetHeadersEmptyTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeadersEmptyTest.html"
            assertion="If the specified request header doesn't exist an empty Enumeration is returned.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeaders() method."
        />

        <gtest request="GET /servlet-tests/GetHeaders_01Test HTTP/1.0"
            testName="GetHeaders_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaders_01Test.html"
            assertion="Returns an empty enumeration if the request does not have a header of the specified name, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getHeaders() method."
        />

        <gtest request="GET /servlet-tests/GetIntHeaderTest HTTP/1.0"
            testName="GetIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyIntHeader:123"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeaderTest.html"
            assertion="Returns the value of the specified request header as an integer.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getIntHeader() method."
        />

        <gtest request="GET /servlet-tests/GetIntHeaderLCaseTest HTTP/1.0"
            testName="GetIntHeaderLCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyIntHeader:123"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeaderLCaseTest.html"
            assertion="Returns the value of the specified lower cased request header as an integer.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getIntHeader() method."
        />

        <gtest request="GET /servlet-tests/GetIntHeaderMxCaseTest HTTP/1.0"
            testName="GetIntHeaderMxCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyIntHeader:123"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeaderMxCaseTest.html"
            assertion="Returns the value of the specified mixed case request header as an integer.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getIntHeader() method."
        />

        <gtest request="GET /servlet-tests/GetIntHeader_1Test HTTP/1.0"
            testName="GetIntHeader_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyNonIntHeader:Java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeader_1Test.html"
            assertion="Throws NumberFormatException, if the header value can't be converted to an int,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getIntHeader() method."
        />

        <gtest request="GET /servlet-tests/GetIntHeader_2Test HTTP/1.0"
            testName="GetIntHeader_2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeader_2Test.html"
            assertion="Returns -1 if the request doesn't have a header of this name ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getIntHeader() method."
        />

        <gtest request="GET /servlet-tests/GetMethodTest HTTP/1.0"
            testName="GetMethodTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetMethodTest.html"
            assertion="Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getMethod() method."
        />

        <gtest request="HEAD /servlet-tests/GetMethod_HEADTest HTTP/1.0"
            testName="GetMethod_HEADTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200" expectHeaders="status:GetMethod_HEADTest PASSED"
            expectResponseBody="false"
            assertion="Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getMethod() HEAD method."
        />

        <gtest request="POST /servlet-tests/GetMethod_POSTTest HTTP/1.0"
            testName="GetMethod_POSTTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetMethod_POSTTest.html"
            assertion="Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getMethod() POST method."
        />

        <gtest request="GET /servlet-tests/GetPathInfoTest/pathinfostring1/pathinfostring2 HTTP/1.0"
            testName="GetPathInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathInfoTest.html"
            assertion="Returns any extra path information associated with the URL the client sent when it made this request.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getPathInfo() method."
        />

        <gtest request="GET /servlet-tests/GetPathInfo_01Test HTTP/1.0"
            testName="GetPathInfo_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathInfo_01Test.html"
            assertion="Returns null if there was no extra path information sent with this request.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getPathInfo() method."
        />

        <gtest request="GET /servlet-tests/GetPathTranslatedTest/javax_servlet HTTP/1.0"
            testName="GetPathTranslatedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathTranslatedTest.html"
            assertion="Returns any extra path information after the servlet name but before the query string, and translates it to a real path.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getPathTranslated() method."
        />

        <gtest request="GET /servlet-tests/GetPathTranslatedNullTest HTTP/1.0"
            testName="GetPathTranslatedNullTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathTranslatedNullTest.html"
            assertion="Returns null if the URL has no extra path information after the servlet name but before the query string,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getPathTranslated() method."
        />

        <gtest request="GET /servlet-tests/GetPathTranslated_01Test HTTP/1.0"
            testName="GetPathTranslated_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathTranslated_01Test.html"
            assertion="Returns null if the URL does not have any extra path information.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getPathTranslated() method."
        />

        <gtest request="GET /servlet-tests/GetQueryStringTest?language=Java HTTP/1.0"
            testName="GetQueryStringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetQueryStringTest.html"
            assertion="Returns the query string that is contained in the request URL after the path, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getQueryString() method."
        />

        <gtest request="GET /servlet-tests/GetQueryString_01Test HTTP/1.0"
            testName="GetQueryString_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetQueryString_01Test.html"
            assertion="Returns null if the URL contains no query string, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getQueryString() method."
        />

        <gtest request="GET /servlet-tests/GetRemoteUser_01Test HTTP/1.0"
            testName="GetRemoteUser_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetRemoteUser_01Test.html"
            assertion="Returns null if the user has not been authenticated., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getRemoteUser() method."
        />

        <gtest request="GET /servlet-tests/GetRequestURITest HTTP/1.0"
            testName="GetRequestURITest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetRequestURITest.html"
            assertion="Returns the part of this request's URL from the protocol name up to the query string in the first line of the HTTP request.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getRequestURI() method."
        />

        <gtest request="GET /servlet-tests/GetRequestURIWithQSTest?language=java HTTP/1.0"
            testName="GetRequestURIWithQSTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetRequestURIWithQSTest.html"
            assertion="Returns the part of this request's URL from the protocol name up to the query string in the first line of the HTTP request.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getRequestURI() testing with query string."
        />

        <gtest request="GET /servlet-tests/GetRequestedSessionId_01Test HTTP/1.0"
            testName="GetRequestedSessionId_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetRequestedSessionId_01Test.html"
            assertion="Returns null if the request did not specify a session ID, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getRequestedSessionId() method."
        />

        <gtest request="GET /servlet-tests/GetServletPathTest HTTP/1.0"
            testName="GetServletPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetServletPathTest.html"
            assertion="Returns the part of this request's URL that calls the servlet.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getServletPath() method."
        />

        <gtest request="GET /servlet-tests/IsRequestedSessionIdFromCookie_01Test HTTP/1.0"
            testName="IsRequestedSessionIdFromCookie_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/IsRequestedSessionIdFromCookie_01Test.html"
            assertion="Returns false if session Id did not come in as a cookie ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.isRequestedSessionIdFromCookie() method."
        />

        <gtest request="GET /servlet-tests/IsRequestedSessionIdFromURL_01Test HTTP/1.0"
            testName="IsRequestedSessionIdFromURL_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/IsRequestedSessionIdFromURL_01Test.html"
            assertion="Returns false if session Id did not come in as part of a URL, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.isRequestedSessionIdFromURL() method"
        />

        <gtest request="GET /servlet-tests/IsRequestedSessionIdValid_01Test HTTP/1.0"
            testName="IsRequestedSessionIdValid_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/IsRequestedSessionIdValid_01Test.html"
            assertion="Returns false if this request does not have an id for a valid session in the current session context, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.isRequestedSessionIdValid() method."
        />

        <gtest request="GET /servlet-tests/GetHeaderTest HTTP/1.0"
            testName="GetHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="User-Agent:Mozilla/4.0"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaderTest.html"
            assertion="Returns the value of the specified request header as a String, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeader() method"
        />

        <gtest request="GET /servlet-tests/GetHeaderLCaseTest HTTP/1.0"
            testName="GetHeaderLCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="User-Agent:Mozilla/4.0"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaderLCaseTest.html"
            assertion="Returns the value of the specified lower cased request header as a String, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeader() method"
        />

        <gtest request="GET /servlet-tests/GetHeaderMxCaseTest HTTP/1.0"
            testName="GetHeaderMxCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="User-Agent:Mozilla/4.0"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaderMxCaseTest.html"
            assertion="Returns the value of the specified mixed case request header as a String, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeader() method"
        />

        <gtest request="GET /servlet-tests/GetSession_01Test HTTP/1.0"
            testName="GetSession_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetSession_01Test.html"
            assertion="Returns null if create is false and the request has no valid HttpSession, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Tests that getSession(false) returns null"
        />

        <!-- END javax_servlet_http_HttpServletRequest -->

        <!-- START javax_servlet_http_Cookie -->

        <gtest request="GET /servlet-tests/CookieCloneTest HTTP/1.0"
            testName="CookieCloneTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/CookieCloneTest.html"
            assertion="Overrides the standard java.lang.Object.clone() method to return a copy of this cookie.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.clone() method"
        />

        <gtest request="GET /servlet-tests/Cookie_ConstructorTest HTTP/1.0"
            testName="Cookie_ConstructorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/Cookie_ConstructorTest.html"
            assertion="Constructs a cookie with a specified name and value., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie(String name,String value) constructor"
        />

        <gtest request="GET /servlet-tests/Cookie_Constructor_1Test HTTP/1.0"
            testName="Cookie_Constructor_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/Cookie_Constructor_1Test.html"
            assertion="Throws IllegalArgumentException if the cookie name contains illegal characters (for example, a comma, space, or semicolon) or it is one of the tokens reserved for use by the cookie protocol, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative Test for Cookie(String name,String value) constructor. We include some invalid chars in the Cookie name and test for IllegalArgumentException"
        />

        <gtest request="GET /servlet-tests/GetCommentTest HTTP/1.0"
            testName="GetCommentTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetCommentTest.html"
            assertion="Returns the comment describing the purpose of this cookie., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getComment() method"
        />

        <gtest request="GET /servlet-tests/GetComment_01Test HTTP/1.0"
            testName="GetComment_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetComment_01Test.html"
            assertion="Returns null if the cookie has no comment.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getComment() method"
        />

        <gtest request="GET /servlet-tests/GetDomainTest HTTP/1.0"
            testName="GetDomainTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetDomainTest.html"
            assertion="Returns the domain name set for this cookie.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getDomain() method"
        />

        <gtest request="GET /servlet-tests/GetMaxAgeTest HTTP/1.0"
            testName="GetMaxAgeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetMaxAgeTest.html"
            assertion="Returns the maximum age of the cookie, specified in seconds ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getMaxAge() method"
        />

        <gtest request="GET /servlet-tests/GetMaxAge_1Test HTTP/1.0"
            testName="GetMaxAge_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetMaxAge_1Test.html"
            assertion="Returns by default, -1 indicating the cookie will persist until browser shutdown.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for Cookie.getMaxAge() method. We will try to get Cookies default maxAge which is '-1'"
        />

        <gtest request="GET /servlet-tests/GetNameTest HTTP/1.0"
            testName="GetNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetNameTest.html"
            assertion="Returns the name of the cookie.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getName() method"
        />

        <gtest request="GET /servlet-tests/GetPathTest HTTP/1.0"
            testName="GetPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetPathTest.html"
            assertion="Returns the path on the server to which the browser returns this cookie.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getPath() method"
        />

        <gtest request="GET /servlet-tests/GetSecureTest HTTP/1.0"
            testName="GetSecureTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetSecureTest.html"
            assertion="Returns false if the browser can send cookies using any protocol.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getSecure() method"
        />

        <gtest request="GET /servlet-tests/GetValueTest HTTP/1.0"
            testName="GetValueTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetValueTest.html"
            assertion="Returns the value of the cookie.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getValue() method"
        />

        <gtest request="GET /servlet-tests/GetVersionTest HTTP/1.0"
            testName="GetVersionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetVersionTest.html"
            assertion="Returns the version of the protocol this cookie complies with, 0 if the cookie complies with the original Netscape specification,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getVersion() method"
        />

        <gtest request="GET /servlet-tests/SetCommentTest HTTP/1.0"
            testName="SetCommentTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetCommentTest.html"
            assertion="Specifies a comment that describes a cookie's purpose., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setComment() method"
        />

        <gtest request="GET /servlet-tests/SetDomainTest HTTP/1.0"
            testName="SetDomainTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetDomainTest.html"
            assertion="Specifies the domain within which this cookie should be presented.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setDomain() method"
        />

        <gtest request="GET /servlet-tests/SetMaxAgeTest HTTP/1.0"
            testName="SetMaxAgeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetMaxAgeTest.html"
            assertion="Sets the maximum age of the cookie in seconds.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setMaxAge() method"
        />

        <gtest request="GET /servlet-tests/SetPathTest HTTP/1.0"
            testName="SetPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetPathTest.html"
            assertion="Specifies a path for the cookie to which the client should return the cookie.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setPath() method"
        />

        <gtest request="GET /servlet-tests/SetSecureTest HTTP/1.0"
            testName="SetSecureTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetSecureTest.html"
            assertion="Indicates to the browser whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL., the default value is false specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setSecureTest() method"
        />

        <gtest request="GET /servlet-tests/SetValueTest HTTP/1.0"
            testName="SetValueTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetValueTest.html"
            assertion="Assigns a new value to a cookie after the cookie is created. specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setValueTest() method"
        />

        <gtest request="GET /servlet-tests/SetVersionTest HTTP/1.0"
            testName="SetVersionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetVersionTest.html"
            assertion="Sets the version of the cookie protocol this cookie complies with, 0 if the cookie should comply with the original Netscape specification;,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setVersion() method"
        />

        <!-- END javax_servlet_http_Cookie -->

        <!-- START javax_servlet_http_HttpServletResponse -->

        <gtest request="GET /servlet-tests/AddCookieTest HTTP/1.0"
            testName="AddCookieTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Set-Cookie:BestLanguage=Java"
            assertion="Adds the specified cookie to the response.,specified in the Java Servl et Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.addCookie() method."
        />

        <gtest request="GET /servlet-tests/AddDateHeaderTest HTTP/1.0"
            testName="AddDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="DateInfo:Sat, 25 Apr 1970 07:29:03 GMT"
            assertion="Adds a response header with the given name and date-value., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.addDateHeader() method."
        />

        <gtest request="GET /servlet-tests/AddHeaderTest HTTP/1.0"
            testName="AddHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:Java|MyStrHeader:Java2|MyStrHeader2:Java3"
            assertion="Adds a response header with the given name and value., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.addHeader() method."
        />

        <gtest request="GET /servlet-tests/AddIntHeaderTest HTTP/1.0"
            testName="AddIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader2:4|MyIntHeader:2|MyIntHeader:3"
            assertion="Adds a response header with the given name and integer value.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.addIntHeader() method."
        />

        <gtest request="GET /servlet-tests/ContainsHeaderTest HTTP/1.0"
            testName="ContainsHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader:20"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponse/ContainsHeaderTest.html"
            assertion="Returns true if the named response header has already been set.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.containsHeader() method."
        />

        <gtest request="GET /servlet-tests/ContainsHeader_01Test HTTP/1.0"
            testName="ContainsHeader_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponse/ContainsHeader_01Test.html"
            assertion="Returns false if the named response header has not already been set.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletResponse.containsHeader() method."
        />

        <gtest request="GET /servlet-tests/SendErrorTest HTTP/1.0"
            testName="SendErrorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            assertion="Sends an error response to the client using the specified status code,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendError(int sc) method."
        />

        <gtest request="GET /servlet-tests/SendErrorIgnoreHeaderTest HTTP/1.0"
            testName="SendErrorIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            unexpectedHeaders="HttpServletResponse:sendErrorIgnoreHeader"
            assertion="Verify that headers added after sendError(int) are ignored by the container. Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Issue a request to target servlet which will call sendError() and then add a header to the response. The added header should not be visible to the client."
        />

<!-- START EXCLUDE SendError_StringTest

     Test has been excluded due to ambiguity in the spec regarding 
     the HTTP status line's reason-phrase being populated with the value
     of msg in a call to response.sendError(int,String).
     This is on the slate to be clarified for the next spec.


        <gtest request="GET /servlet-tests/SendError_StringTest HTTP/1.0"
            testName="SendError_StringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100" returnCodeMsg="in SendError_StringTest servlet"
            assertion="Sends an error response to the client using the specified status code and descriptive message,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendError(int sc, java.lang.String msg) method."
        />

END EXCLUDE SendError_StringTest -->

        <gtest request="GET /servlet-tests/SendError_StringIgnoreHeaderTest HTTP/1.0"
            testName="SendError_StringIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100" 
            unexpectedHeaders="HttpServletResponse:sendErrorMsgIgnoreHeader"
            assertion="Verify that headers added after sendError(int,String) are ignored by the container. Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Issue a request to target servlet which will call sendError() and then add a header to the response. The added header should not be visible to the client."
        />

        <gtest request="GET /servlet-tests/SendRedirectTest HTTP/1.0"
            testName="SendRedirectTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            expectHeaders="Location:http://${host}:${port}/RedirectedTest"
            assertion="Sends a temporary redirect response to the client using the specified redirect location URL that is based on the server root,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendRedirect() method."
        />

        <gtest request="GET /servlet-tests/SendRedirectIgnoreHeaderTest HTTP/1.0"
            testName="SendRedirectIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            unexpectedHeaders="HttpServletResponse:sendRedirectIgnoreHeader"
            assertion="Verify that headers added after sendRedirect(String) are ignored by the container. Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Issue a request to target servlet which will call sendRedirect() and then add a header to the response. The added header should not be visible to the client."
        />

        <gtest request="GET /servlet-tests/SendRedirectForWebAppTest HTTP/1.0"
            testName="SendRedirectForWebAppTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            expectHeaders="Location:http://${host}:${port}/servlet-tests/RedirectedTest"
            assertion="Sends a temporary redirect response to the client using the specified redirect location URL that is based on the context-root,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendRedirect() method."
        />

        <gtest request="GET /servlet-tests/SendRedirect_1Test HTTP/1.0"
            testName="SendRedirect_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponse/SendRedirect_1Test.html"
            assertion="Throws IllegalStateException if the response was committed ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletResponse.sendRedirect() method."
        />

        <gtest request="GET /servlet-tests/SetDateHeaderTest HTTP/1.0"
            testName="SetDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="DateInfo:Sat, 25 Apr 1970 07:29:03 GMT"
            assertion="Sets a response header with the given name and date-value., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendDateHeader() method."
        />

        <gtest request="GET /servlet-tests/SetHeaderTest HTTP/1.0"
            testName="SetHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:Java"
            assertion="Sets a response header with the given name and value., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.setHeader() method."
        />

        <gtest request="GET /servlet-tests/SetIntHeaderTest HTTP/1.0"
            testName="SetIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader:2"
            assertion="Sets a response header with the given name and integer value.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.setIntHeader() method."
        />

        <gtest request="GET /servlet-tests/SetStatusTest HTTP/1.0"
            testName="SetStatusTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            assertion="Sets the status code for this response.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.setStatus() method."
        />

        <!-- END javax_servlet_http_HttpServletResponse -->

        <!-- START javax_servlet_http_HttpSession -->

        <gtest request="GET /servlet-tests/GetCreationTimeTest HTTP/1.0"
            testName="GetCreationTimeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/GetCreationTimeTest.html"
            assertion="Returns the time when this session was created, measured in milliseconds since midnight January 1, 1970 GMT., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getCreationTime() method."
        />

        <gtest request="GET /servlet-tests/GetIdTest HTTP/1.0"
            testName="GetIdTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/GetIdTest.html"
            assertion="Returns a string containing the unique identifier assigned to this session.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getId() method."
        />

        <gtest request="GET /servlet-tests/GetLastAccessedTimeTest HTTP/1.0"
            testName="GetLastAccessedTimeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/GetLastAccessedTimeTest.html"
            assertion="Returns the last time the client sent a request associated with this session, as the number of milliseconds since midnight January 1, 1970 GMT.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getLastAccessedTime() method."
        />

        <gtest request="GET /servlet-tests/GetMaxInactiveIntervalTest HTTP/1.0"
            testName="GetMaxInactiveIntervalTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/GetMaxInactiveIntervalTest.html"
            assertion="Returns the maximum time interval, in seconds, that the servlet container will keep this session open between client accesses.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getMaxInactiveInterval() method."
        />

        <gtest request="GET /servlet-tests/SetMaxInactiveIntervalTest HTTP/1.0"
            testName="SetMaxInactiveIntervalTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/SetMaxInactiveIntervalTest.html"
            assertion="Specifies the time, in seconds, between client requests before the servlet container will invalidate this session ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.setMaxInactiveInterval() method."
        />

        <gtest request="GET /servlet-tests/HttpSessionGetAttributeNamesTest HTTP/1.0"
            testName="HttpSessionGetAttributeNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttributeNamesTest.html"
            assertion="Returns an Enumeration of String objects containing the names of all the objects bound to this session.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getAttributeNames() method."
        />

        <gtest request="GET /servlet-tests/HttpSessionGetAttributeNamesEmptyTest HTTP/1.0"
            testName="HttpSessionGetAttributeNamesEmptyTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttributeNamesEmptyTest.html"
            assertion="Returns an empty Enumeration since there were no attributes objects bound to this session.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getAttributeNames() method."
        />

        <gtest request="GET /servlet-tests/HttpSessionGetAttributeNames_01Test HTTP/1.0"
            testName="HttpSessionGetAttributeNames_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttributeNames_01Test.html"
            assertion="Throws IllegalStateException if this method is called on an invalidated session,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.getAttributeNames() method."
        />

        <gtest request="GET /servlet-tests/HttpSessionGetAttributeTest HTTP/1.0"
            testName="HttpSessionGetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttributeTest.html"
            assertion="Returns the object bound with the specified name in this session, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getAttribute() method."
        />

        <gtest request="GET /servlet-tests/HttpSessionGetAttribute_01Test HTTP/1.0"
            testName="HttpSessionGetAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttribute_01Test.html"
            assertion="Returns null if no object is bound under the name., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.getAttribute() method."
        />

        <gtest request="GET /servlet-tests/InvalidateTest HTTP/1.0"
            testName="InvalidateTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/InvalidateTest.html"
            assertion="Invalidates this session and unbinds any objects bound to it.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.invalidate() method."
        />

        <gtest request="GET /servlet-tests/IsNewTest HTTP/1.0"
            testName="IsNewTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/IsNewTest.html"
            assertion="Returns true if the client does not yet know about the session or if the client chooses not to join the session., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getIsNew() method."
        />

        <gtest request="GET /servlet-tests/IsNew_01Test HTTP/1.0"
            testName="IsNew_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/IsNew_01Test.html"
            assertion="Throws IllegalStateException if this method is called on an already invalidated session, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.IsNew() method."
        />

        <gtest request="GET /servlet-tests/RemoveAttributeTest HTTP/1.0"
            testName="RemoveAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/RemoveAttributeTest.html"
            assertion="Removes the object bound with the specified name from this session.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.removeAttribute() method."
        />

        <gtest request="GET /servlet-tests/RemoveAttribute_01Test HTTP/1.0"
            testName="RemoveAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/RemoveAttribute_01Test.html"
            assertion="Throws IllegalStateException if this method is called on an invalidated session ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.removeAttribute() method"
        />

        <gtest request="GET /servlet-tests/SetAttributeTest HTTP/1.0"
            testName="SetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/SetAttributeTest.html"
            assertion="Binds an object to this session, using the name specified. If an object of the same name is already bound to the session, the object is replaced, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.setAttribute() method."
        />

        <gtest request="GET /servlet-tests/SetAttribute_01Test HTTP/1.0"
            testName="SetAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/SetAttribute_01Test.html"
            assertion="Throws IllegalStateException if this method is called on an invalidated session, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.setAttribute() method."
        />

        <gtest request="GET /servlet-tests/HttpSessionGetServletContextTest HTTP/1.0"
            testName="HttpSessionGetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetServletContextTest.html"
            assertion="Returns the ServletContext to which this session belongs, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Call a servlet that makes API call for servlet context"
        />

        <!-- END javax_servlet_http_HttpSession -->

        <!-- START javax_servlet_http_HttpServletRequestWrapper -->

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperConstructorTest HTTP/1.0"
            testName="HttpServletRequestWrapperConstructorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperConstructorTest.html"
            assertion="A HttpServletRequestWrapper object should be returned when the request object is passed into the constructor. Java Specification v2.3 Sec 14."
            testStrategy="Construct a request object wrapping the given request."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetContextPathTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetContextPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetContextPathTest.html"
            assertion="Test for default behavior of this method to return getContextPath() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetCookiesTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetCookiesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Cookie:BestLanguage=Java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetCookiesTest.html"
            assertion="Test for default behavior of this method to return getCookies() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetDateHeaderTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:Sat, 01 Jan 2000 00:00:01 GMT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetDateHeaderTest.html"
            assertion="Test for default behavior of this method to return getDateHeader(String name) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetHeaderNamesTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetHeaderNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-us|Accept-Language2:ga-us"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetHeaderNamesTest.html"
            assertion="Test for default behavior of this method to return getHeaders(String name) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetHeadersTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetHeadersTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyHeader:myheadervalue1|MyHeader:myheadervalue2"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetHeadersTest.html"
            assertion="Test for default behavior of this method to return getHeaders(String name) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetIntHeaderTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyIntHeader:123"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetIntHeaderTest.html"
            assertion="Test for default behavior of this method to return getIntHeader(String name) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetMethodTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetMethodTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetMethodTest.html"
            assertion="Test for default behavior of this method to return getMethod() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetPathInfoTest/pathinfostring1/pathinfostring2 HTTP/1.0"
            testName="HttpServletRequestWrapperGetPathInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetPathInfoTest.html"
            assertion="Test for default behavior of this method to return getPathInfo() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetPathTranslatedTest/javax_servlet HTTP/1.0"
            testName="HttpServletRequestWrapperGetPathTranslatedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetPathTranslatedTest.html"
            assertion="Test for default behavior of this method to return getPathTranslated() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetQueryStringTest?language=Java HTTP/1.0"
            testName="HttpServletRequestWrapperGetQueryStringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetQueryStringTest.html"
            assertion="Test for default behavior of this method to return getQueryString() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetRequestURITest HTTP/1.0"
            testName="HttpServletRequestWrapperGetRequestURITest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetRequestURITest.html"
            assertion="Test for default behavior of this method to return getRequestURI() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetServletPathTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetServletPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetServletPathTest.html"
            assertion="Test for default behavior of this method to return getServletPath() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetHeaderTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="User-Agent:Mozilla/4.0"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetHeaderTest.html"
            assertion="Test for default behavior of this method to return getHeader(String name) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetAuthTypeTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetAuthTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetAuthTypeTest.html"
            assertion="Test if method returns the default getAuthType on the wrapped request object,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetRemoteUserTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetRemoteUserTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetRemoteUserTest.html"
            assertion="Test for default behavior of this method to return getRemoteUser() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetRequestedSessionIdTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetRequestedSessionIdTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetRequestedSessionIdTest.html"
            assertion="Test for default behavior of this method to return getRequestedSessionId() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetRequestURLTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetRequestURLTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Cookie:prefix=http|Cookie:server=${host}|Cookie:port=${port}|Cookie:servletpath=_servlet-tests_hsreqw_HttpServletRequestWrapperGetRequestURLTest"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetRequestURLTest.html"
            assertion="Test for default behavior of this method to return getRequestURL() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetSessionTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetSessionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetSessionTest.html"
            assertion="Test for default behavior of this method to return getSession() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetSessionBooleanTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetSessionBooleanTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetSessionBooleanTest.html"
            assertion="Test for default behavior of this method to return getSession(boolean) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequestWrapper.getSession(boolean) method"
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperIsRequestedSessionIdFromCookie_01Test HTTP/1.0"
            testName="HttpServletRequestWrapperIsRequestedSessionIdFromCookie_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperIsRequestedSessionIdFromCookie_01Test.html"
            assertion="Test for a false return from this method on the wrapped request object, specified in the Java Servlet Pages Specification v2.3 Sec 14"
            testStrategy="A test for HttpServletRequestWrapper.isRequestedSessionIdFromCookie() method"
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperIsRequestedSessionIdFromURL_01Test HTTP/1.0"
            testName="HttpServletRequestWrapperIsRequestedSessionIdFromURL_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperIsRequestedSessionIdFromURL_01Test.html"
            assertion="Test for a false return from this method on the wrapped request object, specified in the Java Servlet Pages Specification v2.3 Sec 14"
            testStrategy="A test for HttpServletRequestWrapper.isRequestedSessionIdFromURL() method"
        />

        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperIsRequestedSessionIdValid_01Test HTTP/1.0"
            testName="HttpServletRequestWrapperIsRequestedSessionIdValid_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperIsRequestedSessionIdValid_01Test.html"
            assertion="Test for a false return from this method on the wrapped request object, specified in the Java Servlet Pages Specification v2.3 Sec 14"
            testStrategy="A test for HttpServletRequestWrapper.isRequestedSessionIdValid() method"
        />

        <!-- END javax_servlet_http_HttpServletRequestWrapper -->

        <!-- START javax_servlet_http_HttpSessionListener -->
<!--
        <gtest request="GET /servlet-tests/HttpSessionCreatedTest HTTP/1.0"
            testName="HttpSessionCreatedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionListener/HttpSessionCreatedTest.html"
            assertion="Test for notification that a session was created, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http.HttpSessionListener.sessionCreated method"
            testStrategy="Client calls a servlet that creates a session. The listener should detect the creation and write a message to a static log file. The Servlet then reads the log file and sends the contents back to the client. As a result of the test, the javax.servlet.http.HttpSessionEvent.getSession() method is tested."
        />

        <gtest request="GET /servlet-tests/HttpSessionDestroyedTest HTTP/1.0"
            testName="HttpSessionDestroyedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionListener/HttpSessionDestroyedTest.html"
            assertion="Test for notification that a session was invalidated, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http.HttpSessionListener.sessionCreated method"
            testStrategy="Client calls a servlet that creates and the invalidates a session. The listener should detect the changes and write a message to a static log file. The Servlet then reads the log file and sends the contents back to the client. As a result of the test, the javax.servlet.http.HttpSessionEvent.getSession() method is tested."
        />
-->
        <!-- END javax_servlet_http_HttpSessionListener -->

        <!-- START javax_servlet_http_HttpSessionAttributeListener -->

        <gtest request="GET /servlet-tests/HttpSessionAttributeAddedTest HTTP/1.0"
            testName="HttpSessionAttributeAddedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionAttributeListener/HttpSessionAttributeAddedTest.html"
            assertion="Test that a notification is generated that a new attribute was added to the session, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http .HttpSessionAttributeListener.attributeAdded method"
            testStrategy="Client calls a servlet that adds an attribute. The listener should detect the add and writes a message out to a static log file. Servlet then reads the log and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/HttpSessionAttributeRemovedTest HTTP/1.0"
            testName="HttpSessionAttributeRemovedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionAttributeListener/HttpSessionAttributeRemovedTest.html"
            assertion="Test for notification that an attribute has been removed from a session, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http.HttpSessionAttributeListener .attributeRemoved method"
            testStrategy="Client calls a servlet that adds/Removes an attribute. The listener should detect the changes and writes a message out to a static log file. Servlet then reads the log and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/HttpSessionAttributeReplacedTest HTTP/1.0"
            testName="HttpSessionAttributeReplacedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionAttributeListener/HttpSessionAttributeReplacedTest.html"
            assertion="Test for notification that an attribute has been replaced in a session, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextAttributeListener. attributeReplaced method"
            testStrategy="Client calls a servlet that adds/Replaces an attribute. The listener should detect the changes and writes a message out to a static log file. Servlet then reads the log and sends the contents back to the client."
        />

        <!-- END javax_servlet_http_HttpSessionAttributeListener -->

        <!-- START javax_servlet_http_HttpSessionEvent -->
<!-- 
        <gtest request="GET /servlet-tests/HttpSessionEventGetSessionTest HTTP/1.0"
            testName="HttpSessionEventGetSessionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionEvent/HttpSessionEventGetSessionTest.html"
            assertion="Test for the returned session that has changed, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpSessionEvent.getSession method"
            testStrategy="Client calls a servlet that creates a session. The listener writes the sessionid of the event to a static log file. The Servlet then reads the log file and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/HttpSessionEventGetSourceTest HTTP/1.0"
            testName="HttpSessionEventGetSourceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionEvent/HttpSessionEventGetSourceTest.html"
            assertion="Test for the object on which the Event initially occured, specified in the java.util.EventObject.getSource method"
            testStrategy="Client calls a servlet that creates a session. The listener writes the source of the event to a static log file. The Servlet then reads the log file and sends the contents back to the client."
        />
-->
        <!-- END javax_servlet_http_HttpSessionEvent -->

        <!-- START javax_servlet_http_HttpSessionBindingEvent -->

        <gtest request="GET /servlet-tests/HttpSessionBindingEventAddedTest HTTP/1.0"
            testName="HttpSessionBindingEventAddedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventAddedTest.html"
            assertion="Test that when a new attribute is added to the session, the getName() method returns the name with which the object is bound to, the getSession() method returns the session that changed, and the getValue() method returns the value of the attribute being added - specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http .HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that adds an attribute. The listener should detect the add and writes the values returned by the getName, getSession(), and getValue() methods to a static log file. Servlet then reads the log and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/HttpSessionBindingEventRemovedTest HTTP/1.0"
            testName="HttpSessionBindingEventRemovedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventRemovedTest.html"
            assertion="Test that when an attribute is removed from the session, the getName() method returns the name with which the object was bound to, the getSession() method returns the session that changed, and the getValue() method returns the value of the attribute being removed - specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http .HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that adds/removes an attribute. The listener should detect the changes and writes the values returned by the getName, getSession(), and getValue() methods to a static log file. Servlet then reads the log and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/HttpSessionBindingEventReplacedTest HTTP/1.0"
            testName="HttpSessionBindingEventReplacedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventReplacedTest.html"
            assertion="Test that when an attribute is replaced from the session, the getName() method returns the name with which the object is bound to, the getSession() method returns the session that changed, and the getValue() method returns the new value of the attribute - specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http .HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that adds/replaces an attribute. The listener should detect the changes and writes the values returned by the getName, getSession(), and getValue() methods to a static log file. Servlet then reads the log and sends the contents back to the client. the log and sends the contents back to the client."
        />

        <gtest request="GET /servlet-tests/HttpSessionBindingEventConstructor1Test HTTP/1.0"
            testName="HttpSessionBindingEventConstructor1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventConstructor1Test.html"
            assertion="Constructs an event that notifies an object that it has been bound to or unbound from a session. To receive the event, the object must implement HttpSessionBindingListener specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http.HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that creates a HttpSessionBindingEvent object using the 2 argument method."
        />

        <gtest request="GET /servlet-tests/HttpSessionBindingEventConstructor2Test HTTP/1.0"
            testName="HttpSessionBindingEventConstructor2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventConstructor2Test.html"
            assertion="Constructs an event that notifies an object that it has been bound to or unbound from a session. To receive the event, the object must implement HttpSessionBindingListener specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http.HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that creates a HttpSessionBindingEvent object using the 2 argument method."
        />

        <!-- END javax_servlet_http_HttpSessionBindingEvent -->

        <!-- START javax_servlet_http_HttpSessionBindingListener -->

        <gtest request="GET /servlet-tests/HttpSessionValueUnBoundTest HTTP/1.0"
            testName="HttpSessionValueUnBoundTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingListener/HttpSessionValueUnBoundTest.html"
            assertion="Test for notification that the object is being unbound to a session specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http.HttpSessionBindingListener. valueUnBound method"
            testStrategy="Client calls a servlet that sets/removes an attribute from the session. That attribute happens to be a Binding listener. The Listeners valueBound/valueUnbound methods should be called and messages written to a static log file. The servlet then reads the log file and sends the data back to the client."
        />

        <gtest request="GET /servlet-tests/HttpSessionValueBoundTest HTTP/1.0"
            testName="HttpSessionValueBoundTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingListener/HttpSessionValueBoundTest.html"
            assertion="Test for notification that the object is being bound to a session specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http.HttpSessionBindingListener. valueBound method"
            testStrategy="Client calls a servlet that sets an attribute to the session. That attribute happens to be a Binding listener. The Listeners valueBound method should be called and a message is written to a static log file. The servlet then reads the log file and sends the data back to the client."
        />

        <!-- END javax_servlet_http_HttpSessionBindingListener -->

        <!-- START javax_servlet_http_HttpServletResponseWrapper -->

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperConstructorTest HTTP/1.0"
            testName="HttpServletResponseWrapperConstructorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperConstructorTest.html"
            assertion="Construct a request object wrapping the given request, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper"
            testStrategy="Client calls a servlet who constructs a Wrapper object from the response object."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperAddCookieTest HTTP/1.0"
            testName="HttpServletResponseWrapperAddCookieTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="GenericResponseWrapper:addCookie|Set-Cookie:BestLanguage=Java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperAddCookieTest.html"
            assertion="Test for default behavior of this method is to call addCookie(Cookie cookie) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper.addCookie() method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses addCookie method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperAddDateHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperAddDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyDateHeader:Mon, 12 Jan 1970 10:20:54 GMT|GenericResponseWrapper:addDateHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperAddDateHeaderTest.html"
            assertion="Test for default behavior of this method is to call addDateHeader(String long) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper.addDateHeader() method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses addDateHeader method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperAddHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperAddHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:Java|MyStrHeader:Java2|GenericResponseWrapper:addHeader|GenericResponseWrapper:addHeader|GenericResponseWrapper:addHeader|MyStrHeader2:Java3"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperAddHeaderTest.html"
            assertion="Test for default behavior of this method is to return addHeader(String name, String value) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. addHeader() method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses addHeader method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperAddIntHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperAddIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader:2|GenericResponseWrapper:addIntHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperAddIntHeaderTest.html"
            assertion="Test for default behavior of this method is to call addIntHeader(String name, int value) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. addIntHeader(String,Int) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses addIntHeader method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperContainsHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperContainsHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:HttpServletResponseWrapperContainsHeaderTest|GenericResponseWrapper:setHeader|GenericResponseWrapper:containsHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperContainsHeaderTest.html"
            assertion="Test for default behavior of this method is to call containsHeader(String name) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. containsHeader(String) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses containsHeader method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperEncodeURLTest HTTP/1.0"
            testName="HttpServletResponseWrapperEncodeURLTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="GenericResponseWrapper:encodeURL"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperEncodeURLTest.html"
            assertion="Test for default behavior of this method is to call encodeURL(String url) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper.encodeURL() method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses encodeURL method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperEncodeRedirectURLTest HTTP/1.0"
            testName="HttpServletResponseWrapperEncodeRedirectURLTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="GenericResponseWrapper:encodeRedirectURL"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperEncodeRedirectURLTest.html"
            assertion="Test for default behavior of this method is to return encodeRedirectURL(String url) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. encodeRedirectURL(String) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses encodeRedirectURL method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSendErrorTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendErrorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            expectHeaders="GenericResponseWrapper:sendError"
            assertion="Test for default behavior of this method is to call sendError(int sc) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper.sendError(int) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses sendError method."
        />

<!-- START EXCLUDE HttpServletResponseWrapperSendErrorMsgTest

     Test has been excluded due to ambiguity in the spec regarding 
     the HTTP status line's reason-phrase being populated with the value
     of msg in a call to response.sendError(int,String).  This is on the
     slate to be clarified for the next spec.

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSendErrorMsgTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendErrorMsgTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200" returnCodeMsg="in HttpServletResponseWrapperSendErrorMsgTest servlet"
            expectHeaders="GenericResponseWrapper:sendErrorMsg"
            assertion="Test for default behavior of this method is to call sendError(int, String) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. sendError(int sc, String msg) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses sendError method."
        />

END EXCLUDE HttpServletResonseWrapperSendErrorMsgTest -->

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSendErrorMsgIgnoreHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendErrorMsgIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            unexpectedHeaders="GenericResponseWrapper:sendErrorMsgIgnoreHeader"
            assertion="Test that headers added after a call to sendError(int,String), will be ignored by the container and will not be sent to the client. See Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Client calls a servlet whose response has been wrapped. The wrapper object will call sendError() and then add a header. The header should not be visible to the client."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSendErrorIgnoreHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendErrorIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            unexpectedHeaders="GenericResponseWrapper:sendErrorIgnoreHeader"
            assertion="Test that headers added after a call to sendError(int), will be ignored by the container and will not be sent to the client. See Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Client calls a servlet whose response has been wrapped. The wrapper object will call sendError() and then add a header. The header should not be visible to the client."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSendRedirectTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendRedirectTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            expectHeaders="Location:http://${host}:${port}/HttpServletResponseWrapperRedirectedTest"
            assertion="Test for default behavior of this method is to return sendRedirect(String) on the wrapped response object of a URL that is based on the server root, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. sendRedirect(String location) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses sendRedirect method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSendRedirectIgnoreHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendRedirectIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            unexpectedHeaders="GenericResponseWrapper:sendRedirectIgnoreHeader"
            assertion="Test that headers added after a call to sendRedirect(), will be ignored by the container and will not be sent to the client. See Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Client calls a servlet whose response has been wrapped. The wrapper object will call sendRedirect() and then add a header. The header should not be visible to the client."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSendRedirectForWebAppTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendRedirectForWebAppTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            expectHeaders="Location:http://${host}:${port}/servlet-tests/hsresw/HttpServletResponseWrapperRedirectedTest"
            assertion="Test for default behavior of this method is to return sendRedirect(String) on the wrapped response object of a URL that is based on the context-root, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. sendRedirect(String location) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses sendRedirect method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSetDateHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="GenericResponseWrapper:setDateHeader|DateInfo:Sat, 25 Apr 1970 07:29:03 GMT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperSetDateHeaderTest.html"
            assertion="Test for default behavior of this method is to call setDateHeader(String, long) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. setDateHeader(String name, long date) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses setDateHeader method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSetHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:Java|GenericResponseWrapper:addHeader|GenericResponseWrapper:setHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperSetHeaderTest.html"
            assertion="Test for default behavior of this method is to return setHeader(String, String) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. setHeader(String name, String value) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses setHeader method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSetIntHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader:2|GenericResponseWrapper:addIntHeader|GenericResponseWrapper:setIntHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperSetIntHeaderTest.html"
            assertion="Test for default behavior of this method is to call setIntHeader(String, int) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. setIntHeader(String name, int value) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses setIntHeader method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSetStatusMsgTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetStatusMsgTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200" returnCodeMsg="in HttpServletResponseWrapperSetStatusMsgTest servlet"
            expectHeaders="GenericResponseWrapper:setStatusMsg"
            assertion="Test for default behavior of this method is to call setStatus(int, String) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. setStatus(int sc, String msg) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses setStatus method."
        />

        <gtest request="GET /servlet-tests/hsresw/HttpServletResponseWrapperSetStatusTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetStatusTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            expectHeaders="GenericResponseWrapper:setStatus"
            assertion="Test for default behavior of this method is to call setStatus(int) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper.setStatus(int sc) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses setStatus method."
        />

        <!-- END javax_servlet_http_HttpServletResponseWrapper -->

        <!-- START javax_servlet_http_HttpServlet -->

        <gtest request="GET /servlet-tests/HttpServletDoDestroyedTest HTTP/1.0"
            testName="HttpServletDoDestroyedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoDestroyedTest.html"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being taken out of service, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.destroy() method"
            testStrategy="Testing that destroy method is not called during service method execution"
        />

        <gtest request="GET /servlet-tests/HttpServletDoInit1Test HTTP/1.0"
            testName="HttpServletDoInit1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="503"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being placed into service., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.init() method"
            testStrategy="A negative test for the init method. We will throw UnavailableException from inside init.The Servlet should not be initialized"
        />

        <gtest request="GET /servlet-tests/HttpServletDoInit2Test HTTP/1.0"
            testName="HttpServletDoInit2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoInit2Test.html"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being placed into service., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.init() method"
            testStrategy="Inside CoreServletTest, which is the parent servlet, we are implementing init() and setting a boolean variable to true. We'll check for the variables here in the HttpServletDoInit2Test"
        />

        <gtest request="GET /servlet-tests/HttpServletDoServletConfigTest HTTP/1.0"
            testName="HttpServletDoServletConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoServletConfigTest.html"
            assertion="Returns a ServletConfig object, which contains initialization and startup parameters for this servlet., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.getServletConfig() method"
            testStrategy="Create a servlet and test for the getServletConfig() method to be a non-null value and an initial paramter can be retrieved"
        />

        <gtest request="GET /servlet-tests/HttpServletDoServletInfoTest HTTP/1.0"
            testName="HttpServletDoServletInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoServletInfoTest.html"
            assertion="Returns information about the servlet, such as author, version, and copyright., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.getServletInfo() method"
            testStrategy="Create a servlet and test that information is returned"
        />

        <gtest request="GET /servlet-tests/HttpServletDoServiceTest HTTP/1.0"
            testName="HttpServletDoServiceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoServiceTest.html"
            assertion="Called by the servlet container to allow the servlet to respond to a request, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.service() method"
            testStrategy="Inside HttpServletCoreServletTest, which is the parent servlet, we will override init method and assign some value to the String. We'll check for that value in the service method"
        />

        <gtest request="GET /servlet-tests/HttpServletPUTest HTTP/1.0"
            testName="HttpServletPUTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletPUTest.html"
            assertion="Servlet lifecycle test, check if UnavailableException.isPermanent() is true, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Create a servlet, throw UnavailableException and test if isPermanent() method is true"
        />

        <gtest request="GET /servlet-tests/HttpServletDestroyTest HTTP/1.0"
            testName="HttpServletDestroyTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being taken out of service., specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.Destroy() method"
            testStrategy="Create a servlet and take out of service using destroy method"
        />

        <gtest request="GET /servlet-tests/HttpServletGetServletConfigTest HTTP/1.0"
            testName="HttpServletGetServletConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletGetServletConfigTest.html"
            assertion="Returns this servlet's ServletConfig object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletConfig() method"
            testStrategy="Create a servlet and check for its ServletConfig object existence"
        />

        <gtest request="GET /servlet-tests/HttpServletGetServletContextTest HTTP/1.0"
            testName="HttpServletGetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletGetServletContextTest.html"
            assertion="Returns this servlet's ServletContext object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletContext() method"
            testStrategy="Create a servlet and check for its ServletContext object existence"
        />

        <gtest request="GET /servlet-tests/HttpServletGetServletInfoTest HTTP/1.0"
            testName="HttpServletGetServletInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletGetServletInfoTest.html"
            assertion="Returns this servlet's ServletInfo object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletContext() method"
            testStrategy="Create a servlet and check for its ServletInfo object values"
            lastTask="true"
        />

        <!-- END javax_servlet_http_HttpServlet -->

    </target>


    <!-- Begin individual targets that can invoke specific tests -->

    <target name="DoFilterTest">
        <gtest request="GET /servlet-tests/DoFilterTest HTTP/1.0"
            testName="DoFilterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Filter/DoFilterTest.html"
            assertion="The doFilter method of the Filter is called by the container each time a request/response pair is passed through the  stack due to a client request for the Servlet in the stack,  specified in the Java Servlet Pages Specification v2.3,  Sec 14 - javax.servlet.Filter.doFilter method"
            testStrategy="Client attempts to access a servlet and the filter  configured for that servlet should be invoked."
        />
    </target>

    <target name="InitFilterConfigTest">
        <gtest request="GET /servlet-tests/InitFilterConfigTest HTTP/1.0"
            testName="InitFilterConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Filter/InitFilterConfigTest.html"
            assertion="The container calls this method when the Filter is instantiated and passes in a FilterConfig object.  specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.setFilter method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet."
        />
    </target>

    <target name="DoDestroyedTest">
        <gtest request="GET /servlet-tests/DoDestroyedTest HTTP/1.0"
            testName="DoDestroyedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoDestroyedTest.html"
            assertion="Called by the servlet container to indicate to a servlet  that the servlet is being taken out of service, specified  in the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Servlet.destroy() method"
            testStrategy="Testing that destroy method is not called during service method execution"
        />
    </target>

    <target name="DoInit1Test">
        <gtest request="GET /servlet-tests/DoInit1Test HTTP/1.0"
            testName="DoInit1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="503"
            assertion="Called by the servlet container to indicate to a servlet  that the servlet is being placed into service., specified  in the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Servlet.init() method"
            testStrategy="A negative test for the init method. We will throw  UnavailableException from inside init.The Servlet  should not be initialized"
        />
    </target>

    <target name="DoInit2Test">
        <gtest request="GET /servlet-tests/DoInit2Test HTTP/1.0"
            testName="DoInit2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoInit2Test.html"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being placed into service., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.init() method"
            testStrategy="Inside CoreServletTest, which is the parent servlet, we are implementing init() and setting a boolean variable to true. We'll check for the variables here in the DoInit2Test"
        />
    </target>

    <target name="DoServletConfigTest">
        <gtest request="GET /servlet-tests/DoServletConfigTest HTTP/1.0"
            testName="DoServletConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoServletConfigTest.html"
            assertion="Returns a ServletConfig object, which contains initialization and startup parameters for this servlet., specified in the  Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Servlet.getServletConfig() method"
            testStrategy="Create a servlet and test for the getServletConfig()  method to be a non-null value and an initial paramter can be retrieved"
        />
    </target>

    <target name="DoServletInfoTest">
        <gtest request="GET /servlet-tests/DoServletInfoTest HTTP/1.0"
            testName="DoServletInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoServletInfoTest.html"
            assertion="Returns information about the servlet, such as author,  version, and copyright., specified in the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Servlet.getServletInfo() method"
            testStrategy="Create a servlet and test that information is returned"
        />
    </target>

    <target name="PUTest">
        <gtest request="GET /servlet-tests/PUTest HTTP/1.0"
            testName="PUTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/PUTest.html"
            assertion="Servlet lifecycle test, check if  UnavailableException.isPermanent() is true, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Create a servlet, throw UnavailableException and test if isPermanent() method is true"
        />
    </target>

    <target name="DoServiceTest">
        <gtest request="GET /servlet-tests/DoServiceTest HTTP/1.0"
            testName="DoServiceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Servlet/DoServiceTest.html"
            assertion="Called by the servlet container to allow the servlet to  respond to a request, specified in the Java Servlet Pages  Specification v2.3, Sec 14 - javax.servlet.Servlet.service() method"
            testStrategy="Inside CoreServletTest, which is the parent servlet, we will override init method and assign some value to the  String. We'll check for that value in the service method"
        />
    </target>

    <target name="DestroyTest">
        <gtest request="GET /servlet-tests/DestroyTest HTTP/1.0"
            testName="DestroyTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            assertion="Called by the servlet container to indicate to a servlet  that the servlet is being taken out of service., specified  in the Java Servlet Pages Specification v2.3, Sec 16 -  javax.servlet.GenericServlet.Destroy() method"
            testStrategy="Create a GenericServlet and take out of service using  destroy method"
        />
    </target>

    <target name="GetServletConfigTest">
        <gtest request="GET /servlet-tests/GetServletConfigTest HTTP/1.0"
            testName="GetServletConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/GenericServlet/GetServletConfigTest.html"
            assertion="Returns this servlet's ServletConfig object, specified in the Java Servlet Pages Specification v2.3, Sec 16 -  javax.servlet.GenericServlet.ServletConfig() method"
            testStrategy="Create a GenericServlet and check for its ServletConfig object existence"
        />
    </target>

    <target name="GetServletContextTest">
        <gtest request="GET /servlet-tests/GetServletContextTest HTTP/1.0"
            testName="GetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/GenericServlet/GetServletContextTest.html"
            assertion="Returns this servlet's ServletContext object, specified in the Java Servlet Pages Specification v2.3, Sec 16 -  javax.servlet.GenericServlet.ServletContext() method"
            testStrategy="Create a GenericServlet and check for its  ServletContext object existence"
        />
    </target>

    <target name="GetServletInfoTest">
        <gtest request="GET /servlet-tests/GetServletInfoTest HTTP/1.0"
            testName="GetServletInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/GenericServlet/GetServletInfoTest.html"
            assertion="Returns this servlet's ServletInfo object, specified in  the Java Servlet Pages Specification v2.3, Sec 16 -  javax.servlet.GenericServlet.ServletContext() method"
            testStrategy="Create a GenericServlet and check for its ServletInfo  object values"
        />
    </target>

    <target name="ForwardTest">
        <gtest request="GET /servlet-tests/ForwardTest HTTP/1.0"
            testName="ForwardTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/RequestDispatcher/ForwardTest.html"
            assertion="Forwards a request from a servlet to another resource  (servlet, JSP file, or HTML file) on the server, specified  in the Java Servlet Pages Specification v2.3, Sec 16 -  javax.servlet.RequestDispatcher.ForwardTest() method"
            testStrategy="Create a servlet, get its RequestDispatcher and use it to forward to a servlet"
        />
    </target>

    <target name="Forward_1Test">
        <gtest request="GET /servlet-tests/Forward_1Test HTTP/1.0"
            testName="Forward_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/RequestDispatcher/Forward_1Test.html"
            assertion="Throws a java.lang.IllegalStateException, if the response  was already committed, specified in the Java Servlet Pages  Specification v2.3, Sec 16 -  javax.servlet.RequestDispatcher.ForwardTest() method"
            testStrategy="A negative test for RequestDispatcher.forward() method. Create a servlet, print a string to the buffer, flush  the buffer to commit the string, get its  RequestDispatcher and use it to forward to a servlet."
        />
    </target>

    <target name="IncludeTest">
        <gtest request="GET /servlet-tests/IncludeTest HTTP/1.0"
            testName="IncludeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/RequestDispatcher/IncludeTest.html"
            assertion="Includes the content of a resource (servlet, JSP page, HTML file) in the response, enabling programmatic server-side  includes., specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.RequestDispatcher.Include()  method"
            testStrategy="Create a servlet, get its RequestDispatcher and use it to include a servlet"
        />
    </target>

    <target name="Include_1Test">
        <gtest request="GET /servlet-tests/Include_1Test HTTP/1.0"
            testName="Include_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/RequestDispatcher/Include_1Test.html"
            assertion="The included servlet cannot change the response status code or set headers; any attempt to make a change is  ignored. The request and response parameters must be the  same objects as were passed to the calling servlet's service method., specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.RequestDispatcher.Include()  method"
            testStrategy="A negative test for RequestDispatcher.include() test.  Create a servlet, set its Content-Type to be  'text/plain', get its RequestDispatcher and use it to  include a servlet. The included servlet tries to change the Content-Type to be text/html. Test at the client  side for correct Content-Type."
        />
    </target>

    <target name="GetServletConfigInitParameterNamesTest">
        <gtest request="GET /servlet-tests/GetServletConfigInitParameterNamesTest HTTP/1.0"
            testName="GetServletConfigInitParameterNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletConfigInitParameterNamesTest.html"
            assertion="Returns the names of the servlet's initialization parameters  as an Enumeration of String objects, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Set init parameters in the web.xml file and check for the enumerated values in the servlet."
        />
    </target>

    <target name="GetServletConfigInitParameterNames_1Test">
        <gtest request="GET /servlet-tests/GetServletConfigInitParameterNames_1Test HTTP/1.0"
            testName="GetServletConfigInitParameterNames_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletConfigInitParameterNames_1Test.html"
            assertion="If no initialization parameters are set, an empty Enumeration if the servlet has no initialization parameters, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletConfig.getInitParameterNames() Do not set init parameters in the web.xml file and  check for null value in the servlet."
        />
    </target>

    <target name="GetServletConfigInitParameterTest">
        <gtest request="GET /servlet-tests/GetServletConfigInitParameterTest HTTP/1.0"
            testName="GetServletConfigInitParameterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletConfigInitParameterTest.html"
            assertion="Returns a String containing the value of the named  initialization parameter, specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Set init parameters in the web.xml file and check for the value in the servlet."
        />
    </target>

    <target name="GetServletConfigInitParameter_1Test">
        <gtest request="GET /servlet-tests/GetServletConfigInitParameter_1Test HTTP/1.0"
            testName="GetServletConfigInitParameter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletConfigInitParameter_1Test.html"
            assertion="If no initialization parameter is set, this method returns a null value, specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletConfig.getInitParameter().  Do not set init parameters in the web.xml file and  check for null value after in the servlet."
        />
    </target>

    <target name="ServletConfigGetServletContextTest">
        <gtest request="GET /servlet-tests/ServletConfigGetServletContextTest HTTP/1.0"
            testName="ServletConfigGetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/ServletConfigGetServletContextTest.html"
            assertion="Returns a reference to the ServletContext in which the  servlet is executing, specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="Try to get the ServletContext for this servlet itself"
        />
    </target>

    <target name="GetServletNameTest">
        <gtest request="GET /servlet-tests/GetServletNameTest HTTP/1.0"
            testName="GetServletNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletConfig/GetServletNameTest.html"
            assertion="Returns the name of this servlet instance, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Try to get the ServletName for this servlet itself"
        />
    </target>

    <target name="GetMajorVersionTest">
        <gtest request="GET /servlet-tests/GetMajorVersionTest HTTP/1.0"
            testName="GetMajorVersionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetMajorVersionTest.html"
            assertion="Returns the major version of the Java Servlet API that this servlet container supports, specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getMajorVersion() for this  servlet itself"
        />
    </target>

    <target name="GetMimeType_1Test">
        <gtest request="GET /servlet-tests/GetMimeType_1Test HTTP/1.0"
            testName="GetMimeType_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetMimeType_1Test.html"
            assertion="Returns null if the MIME type is not known, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for getMimeType(). Test the  ServletContext.getMimeType() for this servlet itself"
        />
    </target>

    <target name="GetRealPathTest">
        <gtest request="GET /servlet-tests/GetRealPathTest HTTP/1.0"
            testName="GetRealPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetRealPathTest.html"
            assertion="Returns a String containing the real path for a given virtual path, specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="Test the ServletContext.getRealPath() for this servlet itself"
        />
    </target>

    <target name="GetResourceAsStreamTest">
        <gtest request="GET /servlet-tests/GetResourceAsStreamTest HTTP/1.0"
            testName="GetResourceAsStreamTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetResourceAsStreamTest.html"
            assertion="Returns the resource located at the named path as an  InputStream object, specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test for getResourceAs Stream method"
        />
    </target>

    <target name="GetResourceAsStream_1Test">
        <gtest request="GET /servlet-tests/GetResourceAsStream_1Test HTTP/1.0"
            testName="GetResourceAsStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetResourceAsStream_1Test.html"
            assertion="Returns null if no resource exists at the specified path, specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for getResourceAsStream() method"
        />
    </target>

    <target name="GetResourceTest">
        <gtest request="GET /servlet-tests/GetResourceTest HTTP/1.0"
            testName="GetResourceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetResourceTest.html"
            assertion="Returns a URL to the resource that is mapped to a specified path, specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A Test for ServletContext.getResource(String) method"
        />
    </target>

    <target name="GetResource_1Test">
        <gtest request="GET /servlet-tests/GetResource_1Test HTTP/1.0"
            testName="GetResource_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetResource_1Test.html"
            assertion="This method returns null if no resource is mapped to the  pathname, specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A negative test for ServletContext.getResource(String) method"
        />
    </target>

    <target name="GetServerInfoTest">
        <gtest request="GET /servlet-tests/GetServerInfoTest HTTP/1.0"
            testName="GetServerInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetServerInfoTest.html"
            assertion="Returns the name and version of the servlet container on  which the servlet is running., specified in the Java Servlet Pages Specification V2.3, Sec 14"
            testStrategy="Test for ServletContext.getServerInfo() method"
        />
    </target>

    <target name="Log_StringTest">
        <gtest request="GET /servlet-tests/Log_StringTest HTTP/1.0"
            testName="Log_StringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/Log_StringTest.html"
            assertion="Writes the specified message to a servlet log file, usually an event log., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="Test for log(String message),by passing the message  string. The server specific log file can be looked up to see an outting"
        />
    </target>

    <target name="Log_StringThrowableTest">
        <gtest request="GET /servlet-tests/Log_StringThrowableTest HTTP/1.0"
            testName="Log_StringThrowableTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/Log_StringThrowableTest.html"
            assertion="Writes an explanatory message and a stack trace for a given Throwable exception to the servlet log file., specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for log(String message,Throwable)"
        />
    </target>

    <target name="ServletContextGetAttributeTest">
        <gtest request="GET /servlet-tests/ServletContextGetAttributeTest HTTP/1.0"
            testName="ServletContextGetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetAttributeTest.html"
            assertion="Returns the servlet container attribute with the given name, specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Try to get the attributes for this servlet itself"
        />
    </target>

    <target name="ServletContextGetAttribute_1Test">
        <gtest request="GET /servlet-tests/ServletContextGetAttribute_1Test HTTP/1.0"
            testName="ServletContextGetAttribute_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetAttribute_1Test.html"
            assertion="Returns null if there is no attribute by that name,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for ServletContext.getAttribute(). Test for null attribute values for this servlet itself"
        />
    </target>

    <target name="ServletContextGetContextTest">
        <gtest request="GET /servlet-tests/ServletContextGetContextTest HTTP/1.0"
            testName="ServletContextGetContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetContextTest.html"
            assertion="Returns a ServletContext object that corresponds to a  specified URL on the server, specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for ServletContext object for this servlet itself"
        />
    </target>

    <target name="ServletContextGetInitParameterNamesTest">
        <gtest request="GET /servlet-tests/ServletContextGetInitParameterNamesTest HTTP/1.0"
            testName="ServletContextGetInitParameterNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetInitParameterNamesTest.html"
            assertion="Returns the names of the context's initialization parameters as an Enumeration of String objects, or an empty Enumeration if the context has no initialization parameters, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getInitParameterNames() for this  servlet itself"
        />
    </target>

    <target name="ServletContextGetInitParameterTest">
        <gtest request="GET /servlet-tests/ServletContextGetInitParameterTest HTTP/1.0"
            testName="ServletContextGetInitParameterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetInitParameterTest.html"
            assertion="Returns a String containing the value of the named  context-wide initialization parameter, specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getInitParameter(String) for this servlet itself"
        />
    </target>

    <target name="ServletContextGetInitParameter_1Test">
        <gtest request="GET /servlet-tests/ServletContextGetInitParameter_1Test HTTP/1.0"
            testName="ServletContextGetInitParameter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetInitParameter_1Test.html"
            assertion="Returns a null if the parameter does not exist, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletContext.getInitParameter(). Test the ServletContext.getInitParameterNames() for  this servlet itself"
        />
    </target>

    <target name="ServletContextRemoveAttributeTest">
        <gtest request="GET /servlet-tests/ServletContextRemoveAttributeTest HTTP/1.0"
            testName="ServletContextRemoveAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextRemoveAttributeTest.html"
            assertion="Removes the attribute with the given name from the servlet context., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="Test for ServletContext.removeAttribute() method"
        />
    </target>

    <target name="ServletContextSetAttributeTest">
        <gtest request="GET /servlet-tests/ServletContextSetAttributeTest HTTP/1.0"
            testName="ServletContextSetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextSetAttributeTest.html"
            assertion="Binds an object to a given attribute name in this servlet context., specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="Test for ServletContext.setAttribute() method"
        />
    </target>

    <target name="ServletContextGetAttributeNamesTest">
        <gtest request="GET /servlet-tests/ServletContextGetAttributeNamesTest HTTP/1.0"
            testName="ServletContextGetAttributeNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetAttributeNamesTest.html"
            assertion="Returns an Enumeration containing the attribute names  available within this servlet context specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet retrieves attributes which it set itself"
        />
    </target>

    <target name="GetMinorVersionTest">
        <gtest request="GET /servlet-tests/GetMinorVersionTest HTTP/1.0"
            testName="GetMinorVersionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetMinorVersionTest.html"
            assertion="Returns the minor version of the Java Servlet API that  this servlet container supports, specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getMinorVersion() for this  servlet itself"
        />
    </target>

    <target name="GetMimeTypeTest">
        <gtest request="GET /servlet-tests/GetMimeTypeTest HTTP/1.0"
            testName="GetMimeTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetMimeTypeTest.html"
            assertion="Returns the MIME type of the specified file, specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getMimeType() for this servlet  itself"
        />
    </target>

    <target name="ServletContextGetRequestDispatcherTest">
        <gtest request="GET /servlet-tests/ServletContextGetRequestDispatcherTest HTTP/1.0"
            testName="ServletContextGetRequestDispatcherTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/ServletContextGetRequestDispatcherTest.html"
            assertion="Returns a RequestDispatcher object that acts as a wrapper  for the resource located at the given path, specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test the ServletContext.getRequestDispatcher(String)  for this servlet itself"
        />
    </target>

    <target name="GetNamedDispatcherTest">
        <gtest request="GET /servlet-tests/GetNamedDispatcherTest HTTP/1.0"
            testName="GetNamedDispatcherTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContext/GetNamedDispatcherTest.html"
            assertion="Returns a RequestDispatcher object that acts as a wrapper  for the named servlet. This method returns null if the  ServletContext cannot return a RequestDispatcher for any  reason, specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="Servlet verify's that the result from the  getNamedDispatcher call and the getServletName call  are the same for the servlet."
        />
    </target>

    <target name="GetRootCauseTest">
        <gtest request="GET /servlet-tests/GetRootCauseTest HTTP/1.0"
            testName="GetRootCauseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/GetRootCauseTest.html"
            assertion="Returns the exception that caused this servlet exception., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test for getRootCause method"
        />
    </target>

    <target name="ServletExceptionConstructor1Test">
        <gtest request="GET /servlet-tests/ServletExceptionConstructor1Test HTTP/1.0"
            testName="ServletExceptionConstructor1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/ServletExceptionConstructor1Test.html"
            assertion="Constructs a new servlet exception, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for ServletException() constructor method"
        />
    </target>

    <target name="ServletExceptionConstructor2Test">
        <gtest request="GET /servlet-tests/ServletExceptionConstructor2Test HTTP/1.0"
            testName="ServletExceptionConstructor2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/ServletExceptionConstructor2Test.html"
            assertion="A Test for ServletException(String) constructor method,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test for ServletException(String) constructor method"
        />
    </target>

    <target name="ServletExceptionConstructor3Test">
        <gtest request="GET /servlet-tests/ServletExceptionConstructor3Test HTTP/1.0"
            testName="ServletExceptionConstructor3Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/ServletExceptionConstructor3Test.html"
            assertion="Constructs a new servlet exception when the servlet needs  to throw an exception and include a message about the  'root cause' exception that interfered with its normal  operation, including a description message., specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for ServletException(Throwable) constructor  method"
        />
    </target>

    <target name="ServletExceptionConstructor4Test">
        <gtest request="GET /servlet-tests/ServletExceptionConstructor4Test HTTP/1.0"
            testName="ServletExceptionConstructor4Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletException/ServletExceptionConstructor4Test.html"
            assertion="Constructs a new servlet exception when the servlet needs to throw an exception and include a message about the 'root  cause' exception that interfered with its normal operation., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test for ServletException(String,Throwable) constructor method"
        />
    </target>

    <target name="ReadLineTest">
        <gtest request="GET /servlet-tests/ReadLineTest HTTP/1.0"
            testName="ReadLineTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletInputStream/ReadLineTest.html"
            content="ULTRA SPARC"
            assertion="Reads the input stream, one line at a time., specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for readLine method"
        />
    </target>

    <target name="Print_StringTest">
        <gtest request="GET /servlet-tests/Print_StringTest HTTP/1.0"
            testName="Print_StringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_StringTest.html"
            assertion="Writes a String to the client, without a carriage return-line feed (CRLF) character at the end., specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(java.lang.String s) method"
        />
    </target>

    <target name="Print_booleanTest">
        <gtest request="GET /servlet-tests/Print_booleanTest HTTP/1.0"
            testName="Print_booleanTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_booleanTest.html"
            assertion="Writes a boolean value to the client, with no carriage  return-line feed (CRLF) character at the end., specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(boolean b) method"
        />
    </target>

    <target name="Print_charTest">
        <gtest request="GET /servlet-tests/Print_charTest HTTP/1.0"
            testName="Print_charTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_charTest.html"
            assertion="Writes a character to the client, with no carriage  return-line feed (CRLF) at the end., specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(char c) method"
        />
    </target>

    <target name="Print_doubleTest">
        <gtest request="GET /servlet-tests/Print_doubleTest HTTP/1.0"
            testName="Print_doubleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_doubleTest.html"
            assertion="Writes a double to the client, with no carriage return-line  feed (CRLF) at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(double d) method"
        />
    </target>

    <target name="Print_floatTest">
        <gtest request="GET /servlet-tests/Print_floatTest HTTP/1.0"
            testName="Print_floatTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_floatTest.html"
            assertion="Writes a float to the client, followed by a carriage  return-line feed (CRLF)., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(float f) method"
        />
    </target>

    <target name="Print_intTest">
        <gtest request="GET /servlet-tests/Print_intTest HTTP/1.0"
            testName="Print_intTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_intTest.html"
            assertion="Writes an integer to the client, with no carriage  return-line feed (CRLF) at the end., specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(integer i) method"
        />
    </target>

    <target name="Print_longTest">
        <gtest request="GET /servlet-tests/Print_longTest HTTP/1.0"
            testName="Print_longTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Print_longTest.html"
            assertion="Writes a long to the client, with no carriage return-line  feed (CRLF) at the end., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(long l) method"
        />
    </target>

    <target name="PrintlnTest">
        <gtest request="GET /servlet-tests/PrintlnTest HTTP/1.0"
            testName="PrintlnTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/PrintlnTest.html"
            assertion="Writes a carriage return-line feed (CRLF) to the client.,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Test for println () method"
        />
    </target>

    <target name="Println_StringTest">
        <gtest request="GET /servlet-tests/Println_StringTest HTTP/1.0"
            testName="Println_StringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_StringTest.html"
            assertion="Writes a String to the client, followed by a carriage  return-line feed (CRLF)., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(java.lang.String s) method"
        />
    </target>

    <target name="Println_booleanTest">
        <gtest request="GET /servlet-tests/Println_booleanTest HTTP/1.0"
            testName="Println_booleanTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_booleanTest.html"
            assertion="Writes a boolean to the client, followed by a carriage  return-line feed (CRLF)., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(boolean b) method"
        />
    </target>

    <target name="Println_charTest">
        <gtest request="GET /servlet-tests/Println_charTest HTTP/1.0"
            testName="Println_charTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_charTest.html"
            assertion="Writes a char to the client, followed by a carriage  return-line feed (CRLF)., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(char c) method"
        />
    </target>

    <target name="Println_doubleTest">
        <gtest request="GET /servlet-tests/Println_doubleTest HTTP/1.0"
            testName="Println_doubleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_doubleTest.html"
            assertion="Writes a double to the client, followed by a carriage  return-line feed (CRLF)., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(double d) method"
        />
    </target>

    <target name="Println_floatTest">
        <gtest request="GET /servlet-tests/Println_floatTest HTTP/1.0"
            testName="Println_floatTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_floatTest.html"
            assertion="Writes a float to the client, with no carriage return-line  feed (CRLF) at the end., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Test for print(float f) method"
        />
    </target>

    <target name="Println_intTest">
        <gtest request="GET /servlet-tests/Println_intTest HTTP/1.0"
            testName="Println_intTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_intTest.html"
            assertion="Writes an integer to the client, followed by a carriage  return-line feed (CRLF)., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(integer i) method"
        />
    </target>

    <target name="Println_longTest">
        <gtest request="GET /servlet-tests/Println_longTest HTTP/1.0"
            testName="Println_longTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletOutputStream/Println_longTest.html"
            assertion="Writes a long to the client, followed by a carriage  return-line feed (CRLF)., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Test for println(long l) method"
        />
    </target>

    <target name="GetContentLengthTest">
        <gtest request="GET /servlet-tests/GetContentLengthTest HTTP/1.0"
            testName="GetContentLengthTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            content="12345678901234567890"
            requestHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetContentLengthTest.html"
            assertion="Returns the length, in bytes, of the request body and made  available by the input stream, or -1 if the length is not  known., specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getContentLength() method"
        />
    </target>

    <target name="GetContentTypeTest">
        <gtest request="GET /servlet-tests/GetContentTypeTest HTTP/1.0"
            testName="GetContentTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetContentTypeTest.html"
            assertion="Returns the MIME type of the body of the request, or null if the type is not known., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getContentType() method"
        />
    </target>

    <target name="GetInputStreamTest">
        <gtest request="GET /servlet-tests/GetInputStreamTest HTTP/1.0"
            testName="GetInputStreamTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetInputStreamTest.html"
            assertion="Retrieves the body of the request as binary data using a  ServletInputStream., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getInputStream() method"
        />
    </target>

    <target name="GetInputStream_1Test">
        <gtest request="GET /servlet-tests/GetInputStream_1Test HTTP/1.0"
            testName="GetInputStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetInputStream_1Test.html"
            assertion="The exception IllegalStateException will be thrown if the getReader method has already been called for this request, specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Servlet attempts to call getInputStream after getReader has already been called"
        />
    </target>

    <target name="GetLocaleTest">
        <gtest request="GET /servlet-tests/GetLocaleTest HTTP/1.0"
            testName="GetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-US"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetLocaleTest.html"
            assertion="Returns the preferred Locale that the client will accept  content in, based on the Accept-Language header, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client sets the locale that it will accept and calls servlet. Servlet verifies it received the correct locale"
        />
    </target>

    <target name="GetLocalesTest">
        <gtest request="GET /servlet-tests/GetLocalesTest HTTP/1.0"
            testName="GetLocalesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-US,en-GB"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetLocalesTest.html"
            assertion="Returns an Enumeration of Locale objects indicating, in  decreasing order starting with the preferred locale, the locales that are acceptable to the client based on the  Accept-Language header. servlet., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client sets the locales that it will accept and calls servlet. Servlet verifies it received the correct locale"
        />
    </target>

    <target name="GetParameterNamesTest">
        <gtest request="GET /servlet-tests/GetParameterNamesTest?BestLanguage=Java&amp;BestJSP=Java2 HTTP/1.0"
            testName="GetParameterNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterNamesTest.html"
            assertion="Returns an Enumeration of String objects containing the  names of the parameters contained in this request.,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client passes 2 parameters to the servlet. Servlet  verifies it receives the correct parameters."
        />
    </target>

    <target name="GetParameterNames_1Test">
        <gtest request="GET /servlet-tests/GetParameterNames_1Test HTTP/1.0"
            testName="GetParameterNames_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterNames_1Test.html"
            assertion="Returns an empty Enumerationif no input parameter names are  given to the servlet., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletRequest.getParameterNames()  method"
        />
    </target>

    <target name="GetParameterTest">
        <gtest request="GET /servlet-tests/GetParameterTest?BestLanguage=Java HTTP/1.0"
            testName="GetParameterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterTest.html"
            assertion="Returns the value of a request parameter as a String specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for ServletRequest.getParameter(String) method"
        />
    </target>

    <target name="GetParameterValuesTest">
        <gtest request="GET /servlet-tests/GetParameterValuesTest?Containers=JSP&amp;Containers=Servlet HTTP/1.0"
            testName="GetParameterValuesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterValuesTest.html"
            assertion="Returns an array of String objects containing all of the  values the given request parameter has, specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client sends a single parameter that has 2 values to the servlet. Servlet verifies it received both values."
        />
    </target>

    <target name="GetParameterValues_1Test">
        <gtest request="GET /servlet-tests/GetParameterValues_1Test HTTP/1.0"
            testName="GetParameterValues_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameterValues_1Test.html"
            assertion="Returns null as the parameter does not exist., specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletRequest.getParameterValues()  method"
        />
    </target>

    <target name="GetParameter_1Test">
        <gtest request="GET /servlet-tests/GetParameter_1Test HTTP/1.0"
            testName="GetParameter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetParameter_1Test.html"
            assertion="Returns null as the parameter does not exist., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletRequest.getParameter() method"
        />
    </target>

    <target name="GetProtocolTest">
        <gtest request="GET /servlet-tests/GetProtocolTest HTTP/1.0"
            testName="GetProtocolTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetProtocolTest.html"
            assertion="Returns the name and version of the protocol the request  uses in the form protocol/majorVersion.minorVersion, for  example, HTTP/1.1., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getProtocol() method"
        />
    </target>

    <target name="GetReaderTest">
        <gtest request="GET /servlet-tests/GetReaderTest HTTP/1.0"
            testName="GetReaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetReaderTest.html"
            assertion="Retrieves the body of the request as character data using a BufferedReader., specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Get an InputStream object using  ServletRequest.getInputStream()"
        />
    </target>

    <target name="GetReader_1Test">
        <gtest request="GET /servlet-tests/GetReader_1Test HTTP/1.0"
            testName="GetReader_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetReader_1Test.html"
            assertion="Retrieves the body of the request as character data using a  BufferedReader., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletRequest.getReader() method.  Get an InputStream object using  ServletRequest.getInputStream() then try to get the Reader  Object. An IllegalStateException should be thrown"
        />
    </target>

    <target name="GetRemoteAddrTest">
        <gtest request="GET /servlet-tests/GetRemoteAddrTest?Address=127.0.0.1 HTTP/1.0"
            testName="GetRemoteAddrTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetRemoteAddrTest.html"
            assertion="Returns the Internet Protocol (IP) address of the client  that sent the request., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getRemoteAddress() method"
        />
    </target>

    <target name="GetRemoteHostTest">
        <gtest request="GET /servlet-tests/GetRemoteHostTest?Address=localhost&amp;Address=127.0.0.1 HTTP/1.0"
            testName="GetRemoteHostTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetRemoteHostTest.html"
            assertion="Returns the fully qualified name of the client that sent the request, or the IP address of the client if the name cannot  be determined., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getRemoteHost() method"
        />
    </target>

    <target name="GetSchemeTest">
        <gtest request="GET /servlet-tests/GetSchemeTest HTTP/1.0"
            testName="GetSchemeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetSchemeTest.html"
            assertion="Returns the name of the scheme used to make this request,  for example, http, https, or ftp.., specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getScheme() method"
        />
    </target>

    <target name="GetServerNameTest">
        <gtest request="GET /servlet-tests/GetServerNameTest?hostname=localhost HTTP/1.0"
            testName="GetServerNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetServerNameTest.html"
            assertion="Returns the host name of the server that received the request specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getServerName() method"
        />
    </target>

    <target name="GetServerPortTest">
        <gtest request="GET /servlet-tests/GetServerPortTest?port=${port} HTTP/1.0"
            testName="GetServerPortTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/GetServerPortTest.html"
            assertion="Returns the port number on which this request was received., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for ServletRequest.getServerPort() method"
        />
    </target>

    <target name="ServletRequestGetAttributeNamesTest">
        <gtest request="GET /servlet-tests/ServletRequestGetAttributeNamesTest HTTP/1.0"
            testName="ServletRequestGetAttributeNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetAttributeNamesTest.html"
            assertion="Returns an Enumeration containing the names of the  attributes available to this request specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getAttributeNames() method"
        />
    </target>

    <target name="ServletRequestGetAttributeTest">
        <gtest request="GET /servlet-tests/ServletRequestGetAttributeTest HTTP/1.0"
            testName="ServletRequestGetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetAttributeTest.html"
            assertion="Returns the value of the named attribute as an Object specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test For ServletRequest.getAttributeName(String) method"
        />
    </target>

    <target name="ServletRequestGetAttribute_01Test">
        <gtest request="GET /servlet-tests/ServletRequestGetAttribute_01Test HTTP/1.0"
            testName="ServletRequestGetAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetAttribute_01Test.html"
            assertion="Returns null if no attribute of the given name exists., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test For ServletRequest.getAttributeName(String) method"
        />
    </target>

    <target name="ServletRequestGetCharacterEncodingTest">
        <gtest request="GET /servlet-tests/ServletRequestGetCharacterEncodingTest HTTP/1.0"
            testName="ServletRequestGetCharacterEncodingTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain; charset=ISO-8859-1"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetCharacterEncodingTest.html"
            assertion="Returns the name of the character encoding used in the body  of this request encoding, specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Servlet verifies is receives the default encoding of  IS0-8858-1 method"
        />
    </target>

    <target name="ServletRequestGetCharacterEncoding_1Test">
        <gtest request="GET /servlet-tests/ServletRequestGetCharacterEncoding_1Test HTTP/1.0"
            testName="ServletRequestGetCharacterEncoding_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetCharacterEncoding_1Test.html"
            assertion="Returns  a null if the request does not specify a character  encoding, specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="Servlet verifies it receives a null result"
        />
    </target>

    <target name="ServletRequestSetCharacterEncoding_1Test">
        <gtest request="GET /servlet-tests/ServletRequestSetCharacterEncoding_1Test HTTP/1.0"
            testName="ServletRequestSetCharacterEncoding_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestSetCharacterEncoding_1Test.html"
            assertion="Throws java.io.UnsupportedEncodingException if the encoding specified is not valid encoding, specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="servlet attempt to set an invalid encoding and exception should be thrown"
        />
    </target>

    <target name="ServletRequestGetRequestDispatcherTest">
        <gtest request="GET /servlet-tests/ServletRequestGetRequestDispatcherTest HTTP/1.0"
            testName="ServletRequestGetRequestDispatcherTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestGetRequestDispatcherTest.html"
            assertion="Returns a RequestDispatcher object that acts as a wrapper  for the resource located at the given path., specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for ServletRequest.getRequestDispatcher() method"
        />
    </target>

    <target name="ServletRequestSetAttributeTest">
        <gtest request="GET /servlet-tests/ServletRequestSetAttributeTest HTTP/1.0"
            testName="ServletRequestSetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequest/ServletRequestSetAttributeTest.html"
            assertion="Stores an attribute in this request, specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet sets an attribute and then verifies it can be read back"
        />
    </target>

    <target name="GetUnavailableSecondsTest">
        <gtest request="GET /servlet-tests/GetUnavailableSecondsTest HTTP/1.0"
            testName="GetUnavailableSecondsTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/UnavailableException/GetUnavailableSecondsTest.html"
            assertion="Returns the number of seconds the servlet expects to be  temporarily unavailable., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="A test for UnavailableException.getUnavailableSeconds() method."
        />
    </target>

    <target name="IsPermanentTest">
        <gtest request="GET /servlet-tests/IsPermanentTest HTTP/1.0"
            testName="IsPermanentTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/UnavailableException/IsPermanentTest.html"
            assertion="Returns a boolean indicating whether the servlet is permanently unavailable., specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="A test for UnavailableException.isPermanent() method."
        />
    </target>

    <target name="UnavailableException_Constructor1Test">
        <gtest request="GET /servlet-tests/UnavailableException_Constructor1Test HTTP/1.0"
            testName="UnavailableException_Constructor1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/UnavailableException/UnavailableException_Constructor1Test.html"
            assertion="Constructs a new exception with a descriptive message  indicating that the servlet is permanently unavailable.,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for UnavailableException(String mesg). It  constructs an UnavailabaleException object for the  specified servlet. This constructor tests for  permanent unavailability"
        />
    </target>

    <target name="UnavailableException_Constructor2Test">
        <gtest request="GET /servlet-tests/UnavailableException_Constructor2Test HTTP/1.0"
            testName="UnavailableException_Constructor2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/UnavailableException/UnavailableException_Constructor2Test.html"
            assertion="Constructs a new exception with a descriptive message  indicating that the servlet is temporarily unavailable and  giving an estimate of how long it will be unavailable., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for UnavailableException(String mesg). It  constructs an UnavailabaleException object for the  specified servlet. This constructor tests for  temporarily unavailability"
        />
    </target>

    <target name="FlushBufferTest">
        <gtest request="GET /servlet-tests/FlushBufferTest HTTP/1.0"
            testName="FlushBufferTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/FlushBufferTest.html"
            assertion="Forces any content in the buffer to be written to the client specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet writes data in the buffer and flushes it"
        />
    </target>

    <target name="GetBufferSizeTest">
        <gtest request="GET /servlet-tests/GetBufferSizeTest HTTP/1.0"
            testName="GetBufferSizeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/GetBufferSizeTest.html"
            assertion="Returns the actual buffer size used for the response.,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for ServletResponse.getBufferSize() method"
        />
    </target>

    <target name="GetOutputStream_1Test">
        <gtest request="GET /servlet-tests/GetOutputStream_1Test HTTP/1.0"
            testName="GetOutputStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/GetOutputStream_1Test.html"
            assertion="illegalStateException is thrown if the getWriter method has  been called on this response ,specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for ServletResponse.getOutputStream()  method. We will get a PrintWriter object first and we  will try to get an OutPutStream Object.  IllegalStateException should be thrown"
        />
    </target>

    <target name="GetWriter_1Test">
        <gtest request="GET /servlet-tests/GetWriter_1Test HTTP/1.0"
            testName="GetWriter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/GetWriter_1Test.html"
            assertion="IllegalStateException is thrown if the getOutputStream  method has already been called for this response object , specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for ServletResponse.getWriter() method. We will get a PrintWriter object first and we will  try to get an OutPutStream Object.  IllegalStateException should be thrown."
        />
    </target>

    <target name="IsCommittedTest">
        <gtest request="GET /servlet-tests/IsCommittedTest HTTP/1.0"
            testName="IsCommittedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/IsCommittedTest.html"
            assertion="Returns a boolean indicating if the response has been  committed., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.isCommitted() method"
        />
    </target>

    <target name="ResetTest">
        <gtest request="GET /servlet-tests/ResetTest HTTP/1.0"
            testName="ResetTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/ResetTest.html"
            assertion="Clears any data that exists in the buffer,specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Servlet writes out to buffer then clears it. Should only get pass message back"
        />
    </target>

    <target name="Reset_1Test">
        <gtest request="GET /servlet-tests/Reset_1Test HTTP/1.0"
            testName="Reset_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/Reset_1Test.html"
            assertion="Throws IllegalStateException if the response has already been committed, specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="A negative Test for ServletResponse.reset() method.  Commit the response has been committed, and test if  this method throws an IllegalStateException."
        />
    </target>

    <target name="ServletResponseGetCharacterEncodingTest">
        <gtest request="GET /servlet-tests/ServletResponseGetCharacterEncodingTest HTTP/1.0"
            testName="ServletResponseGetCharacterEncodingTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/ServletResponseGetCharacterEncodingTest.html"
            assertion="Returns the name of the charset used for the MIME body sent in this response., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for ServletResponse.getCharacterEncoding() method"
        />
    </target>

    <target name="SetBufferSizeTest">
        <gtest request="GET /servlet-tests/SetBufferSizeTest HTTP/1.0"
            testName="SetBufferSizeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/SetBufferSizeTest.html"
            assertion="Sets the preferred buffer size for the body of the response. specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for ServletResponse.setBufferSize() method"
        />
    </target>

    <target name="SetBufferSize_1Test">
        <gtest request="GET /servlet-tests/SetBufferSize_1Test HTTP/1.0"
            testName="SetBufferSize_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/SetBufferSize_1Test.html"
            assertion="illegalStateException is thrown if this method is called  after content has been written, specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for ServletResponse.setBufferSize()  method. Invoke setBufferSize method, after the content is written using ServletOutputStream. Test for  IllegalStateException error"
        />
    </target>

    <target name="SetContentLengthTest">
        <gtest request="GET /servlet-tests/SetContentLengthTest HTTP/1.0"
            testName="SetContentLengthTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Length:31"
            goldenFile="${wgdir}/javax_servlet/ServletResponse/SetContentLengthTest.html"
            assertion="Sets the length of the content body in the response, specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for ServletResponse.setContentLength() method."
        />
    </target>

    <target name="SetContentTypeTest">
        <gtest request="GET /servlet-tests/SetContentTypeTest HTTP/1.0"
            testName="SetContentTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Type:text/html"
            assertion="Sets the content type of the response being sent to the  client., specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for ServletResponse.setContentType() method."
        />
    </target>

    <target name="SetLocaleTest">
        <gtest request="GET /servlet-tests/SetLocaleTest HTTP/1.0"
            testName="SetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Language:en-US"
            assertion="Sets the locale of the response, setting the headers  (including the Content-Type's charset) as appropriate.,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for ServletResponse.setLocale() method."
        />
    </target>

    <target name="GetFilterNameTest">
        <gtest request="GET /servlet-tests/GetFilterNameTest HTTP/1.0"
            testName="GetFilterNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetFilterNameTest.html"
            assertion="This method returns the filter-name of this filter as  defined in the deployment descriptor, specified in the Java  Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.FilterConfig.getFilterName method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />
    </target>

    <target name="GetInitParamNamesTest">
        <gtest request="GET /servlet-tests/GetInitParamNamesTest HTTP/1.0"
            testName="GetInitParamNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetInitParamNamesTest.html"
            assertion="The Filter returns the names of the servlet's initialization  parameters as an Enumeration of String objects, specified in  the Java Servlet Pages Specification v2.3, Sec 14  - javax.servlet.Config.getInitParamterNames method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />
    </target>

    <target name="GetInitParamNamesNullTest">
        <gtest request="GET /servlet-tests/GetInitParamNamesNullTest HTTP/1.0"
            testName="GetInitParamNamesNullTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetInitParamNamesNullTest.html"
            assertion="The Filter returns an empty Enumeration if the   names of the servlet's initialization parameters do not exist, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Config.getInitParamterNames method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />
    </target>

    <target name="GetInitParamTest">
        <gtest request="GET /servlet-tests/GetInitParamTest HTTP/1.0"
            testName="GetInitParamTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetInitParamTest.html"
            assertion="The Filter returns a String containing the value of the  named initialization parameter, specified in the Java  Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Config.getInitParameter method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />
    </target>

    <target name="GetInitParamNullTest">
        <gtest request="GET /servlet-tests/GetInitParamNullTest HTTP/1.0"
            testName="GetInitParamNullTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetInitParamNullTest.html"
            assertion="The Filter returns a null if the parameter does not exist, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Config.getInitParameter method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />
    </target>

    <target name="GetServletContextFilterTest">
        <gtest request="GET /servlet-tests/GetServletContextFilterTest HTTP/1.0"
            testName="GetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterConfig/GetServletContextTest.html"
            assertion="A reference to the ServletContext object is returned,  specified in the Java Servlet Pages Specification v2.3,  Sec 14 - javax.servlet.Config.getServletContext method"
            testStrategy="Client attempts to access a servlet and the filter configured for that servlet should be invoked."
        />
    </target>

    <target name="FilterChainTest">
        <gtest request="GET /servlet-tests/FilterChainTest HTTP/1.0"
            testName="FilterChainTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/FilterChain/FilterChainTest.html"
            assertion="The next filter in the chain to be invoked, or if the  calling filter is the last filter in the chain, causes the  resource at the end of the chain to be invoked, specified in  the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.FilterChain.doFilter method"
            testStrategy="Client attempts to access a servlet and both filters configured for that servlet should be invoked."
        />
    </target>

    <target name="ServletContextAttributeAddedTest">
        <gtest request="GET /servlet-tests/ServletContextAttributeAddedTest HTTP/1.0"
            testName="ServletContextAttributeAddedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeListener/ServletContextAttributeAddedTest.html"
            assertion="Test that a notification is generated that a new attribute  was added to the servlet context, specified in the Java  Servlet Pages Specification v2.3, Sec 14 - javax.servlet. ServletContextAttributeListener.attributeAdded method"
            testStrategy="Client calls a servlet that adds an attribute. The  listener should detect the add and write a message out to a static log file. Servlet then reads the file and sends the files contents back to the client."
        />
    </target>

    <target name="ServletContextAttributeRemovedTest">
        <gtest request="GET /servlet-tests/ServletContextAttributeRemovedTest HTTP/1.0"
            testName="ServletContextAttributeRemovedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeListener/ServletContextAttributeRemovedTest.html"
            assertion="Test that a notification is generated that an existing attribute has been removed from the servlet context,  specified in the Java Servlet Pages Specification v2.3,  Sec 14 - javax.servlet.ServletContextAttributeListener. attributeRemoved method"
            testStrategy="Client calls a servlet that adds/removes an attribute.  The listener should detect the two actions and write  a message out to a static log file. Servlet then reads  the file and sends the files contents back to the  client."
        />
    </target>

    <target name="ServletContextAttributeReplacedTest">
        <gtest request="GET /servlet-tests/ServletContextAttributeReplacedTest HTTP/1.0"
            testName="ServletContextAttributeReplacedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeListener/ServletContextAttributeReplacedTest.html"
            assertion="Test that a notification is generated that an existing attribute has been replaced from the servlet context,  specified in the Java Servlet Pages Specification v2.3,  Sec 14 - javax.servlet.ServletContextAttributeListener. attributeReplaced method"
            testStrategy="Client calls a servlet that adds/replaces an attribute.  The listener should detect the two actions and write  a message to a static log file. Servlet then reads  the file and sends the files contents back to the  client."
        />
    </target>

    <target name="ContextInitializedTest">
        <gtest request="GET /servlet-tests/ContextInitializedTest HTTP/1.0"
            testName="ContextInitializedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextListener/ContextInitializedTest.html"
            assertion="Test for notification that the web application is ready to  process requests after the context is initialized, specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextListener.contextInitialized  method"
            testStrategy="A ServletContext Listener is deployed and the listener write a message indicating so to a static log file. The client calls a servlet that reads the log and send the info back to the client"
        />
    </target>

    <target name="ServletContextAttributeAddedEventTest">
        <gtest request="GET /servlet-tests/ServletContextAttributeAddedEventTest HTTP/1.0"
            testName="ServletContextAttributeAddedEventTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeEvent/ServletContextAttributeAddedEventTest.html"
            assertion="Test that a notification is generated that a new attribute  was added to the servlet context, specified in the Java  Servlet Pages Specification v2.3, Sec 14 - javax.servlet. ServletContextAttributeListener.attributeAdded method"
            testStrategy="Client calls a servlet that adds an attribute. The  listener should detect the add and write the name and value out to a static log file. Servlet then reads  the log file and sends the contents back to the client."
        />
    </target>

    <target name="ServletContextAttributeRemovedEventTest">
        <gtest request="GET /servlet-tests/ServletContextAttributeRemovedEventTest HTTP/1.0"
            testName="ServletContextAttributeRemovedEventTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeEvent/ServletContextAttributeRemovedEventTest.html"
            assertion="Test that a notification is generated that an existing attribute has been removed from the servlet context,  specified in the Java Servlet Pages Specification v2.3,  Sec 14 - javax.servlet.ServletContextAttributeListener. attributeRemoved method"
            testStrategy="Client calls a servlet that adds/removes an attribute.  The listener should detect the two actions and write  the name and value out to a static log file. Servlet  then reads the log file and sends the contents back to the client."
        />
    </target>

    <target name="ServletContextAttributeReplacedEventTest">
        <gtest request="GET /servlet-tests/ServletContextAttributeReplacedEventTest HTTP/1.0"
            testName="ServletContextAttributeReplacedEventTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeEvent/ServletContextAttributeReplacedEventTest.html"
            assertion="Test that a notification is generated that an existing attribute has been replaced from the servlet context,  specified in the Java Servlet Pages Specification v2.3,  Sec 14 - javax.servlet.ServletContextAttributeListener. attributeReplaced method"
            testStrategy="Client calls a servlet that adds/replaces an attribute.  The listener should detect the two actions and write  the name and value out to a static log file. Servlet then reads the log file and sends the contents back to  the client."
        />
    </target>

    <target name="ServletContextAttributeEventConstructorTest">
        <gtest request="GET /servlet-tests/ServletContextAttributeEventConstructorTest HTTP/1.0"
            testName="ServletContextAttributeEventConstructorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextAttributeEvent/ServletContextAttributeEventConstructorTest.html"
            assertion="Test that  ServletContextAttributeEvent can be constructed from the given context for the given attribute name and value specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.ServletContextAttributeEvent."
            testStrategy="Client calls a servlet that creates a  ServletContextAttributeEvent object."
        />
    </target>

    <target name="ServletContextGetSourceTest">
        <gtest request="GET /servlet-tests/ServletContextGetSourceTest HTTP/1.0"
            testName="ServletContextGetSourceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextEvent/ServletContextGetSourceTest.html"
            assertion="Test for the object on which the Event initially occurred specified in the java.util.EventObject.getSource method"
            testStrategy="Deploy a servlet context event listener. When the context gets initialized, write a status message to a  static log. Client calls servlet which reads the static log looking for a specific message and returns the  message to the client."
        />
    </target>

    <target name="ServletContextGetServletContextTest">
        <gtest request="GET /servlet-tests/ServletContextGetServletContextTest HTTP/1.0"
            testName="ServletContextGetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletContextEvent/ServletContextGetServletContextTest.html"
            assertion="Returns the ServletContext that has changed, specified in  the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.ServletContextEvent.getServletContext method"
            testStrategy="Deploy a servlet context event listener. When the context gets initialized, write a status message to a  static log. Client calls servlet which reads the static log looking for a specific message and returns the  message to the client."
        />
    </target>

    <target name="ServletRequestWrapperGetAttributeNamesTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetAttributeNamesTest HTTP/1.0"
            testName="ServletRequestWrapperGetAttributeNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetAttributeNamesTest.html"
            assertion="The default behavior of this method is to call  getAttributeNames() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetAttributeTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetAttributeTest HTTP/1.0"
            testName="ServletRequestWrapperGetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetAttributeTest.html"
            assertion="The default behavior of this method is to call  getAttribute(String name)on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3, Sec  14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetAttribute_01Test">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetAttribute_01Test HTTP/1.0"
            testName="ServletRequestWrapperGetAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetAttribute_01Test.html"
            assertion="The default behavior of this method is to call  getAttribute(String name)on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3, Sec  14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that null is returned for a get of an attribute  that does not exist and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetCharacterEncodingTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetCharacterEncodingTest HTTP/1.0"
            testName="ServletRequestWrapperGetCharacterEncodingTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain; charset=ISO-8859-1"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetCharacterEncodingTest.html"
            assertion="The default behavior of this method is to return  getCharacterEncoding() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetContentLengthTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetContentLengthTest HTTP/1.0"
            testName="ServletRequestWrapperGetContentLengthTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetContentLengthTest.html"
            content="calling ServletRequestWrapperGetContentLengthTest"
            assertion="The default behavior of this method is to return  getContentLength() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetContentTypeTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetContentTypeTest HTTP/1.0"
            testName="ServletRequestWrapperGetContentTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Content-Type:text/plain"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetContentTypeTest.html"
            assertion="The default behavior of this method is to return  getContentLength() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetInputStreamTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetInputStreamTest HTTP/1.0"
            testName="ServletRequestWrapperGetInputStreamTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetInputStreamTest.html"
            assertion="The default behavior of this method is to return  getInputStream() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetInputStream_1Test">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetInputStream_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetInputStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetInputStream_1Test.html"
            assertion="The default behavior of this method is to return  getInputStream() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then attempts to get a reader object after one has already been gotten, then the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetLocaleTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetLocaleTest HTTP/1.0"
            testName="ServletRequestWrapperGetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-us"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetLocaleTest.html"
            assertion="The default behavior of this method is to return  getLocale() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetLocalesTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetLocalesTest HTTP/1.0"
            testName="ServletRequestWrapperGetLocalesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-US,en-GB"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetLocalesTest.html"
            assertion="The default behavior of this method is to return  getLocales() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetParameterMapTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetParameterMapTest?BestLanguage=Java&amp;BestJSP=Java2 HTTP/1.0"
            testName="ServletRequestWrapperGetParameterMapTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterMapTest.html"
            assertion="The default behavior of this method is to return  getParameterMap() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetParameterNamesTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetParameterNamesTest?BestLanguage=Java&amp;BestJSP=Java2 HTTP/1.0"
            testName="ServletRequestWrapperGetParameterNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterNamesTest.html"
            assertion="The default behavior of this method is to return  getParameterNames() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetParameterNames_1Test">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetParameterNames_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetParameterNames_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterNames_1Test.html"
            assertion="The default behavior of this method is to return  getParameterNames() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that no paramters are returned if none are set  and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetParameterTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetParameterTest?BestLanguage=Java HTTP/1.0"
            testName="ServletRequestWrapperGetParameterTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterTest.html"
            assertion="The default behavior of this method is to return  getParameter(String) on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetParameterValuesTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetParameterValuesTest?Containers=JSP&amp;Containers=Servlet HTTP/1.0"
            testName="ServletRequestWrapperGetParameterValuesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterValuesTest.html"
            assertion="The default behavior of this method is to return  getParameterValues(String) on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetParameterValues_1Test">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetParameterValues_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetParameterValues_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameterValues_1Test.html"
            assertion="The default behavior of this method is to return  getParameterValues(String) on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that a null is returned for a non existing item and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetParameter_1Test">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetParameter_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetParameter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetParameter_1Test.html"
            assertion="The default behavior of this method is to return  getParameter(String) on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that null is returned for a non-existing parameter and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetProtocolTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetProtocolTest HTTP/1.0"
            testName="ServletRequestWrapperGetProtocolTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetProtocolTest.html"
            assertion="The default behavior of this method is to return  getProtocol() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetReaderTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetReaderTest HTTP/1.0"
            testName="ServletRequestWrapperGetReaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetReaderTest.html"
            assertion="The default behavior of this method is to return  getReader() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetReader_1Test">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetReader_1Test HTTP/1.0"
            testName="ServletRequestWrapperGetReader_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetReader_1Test.html"
            assertion="The default behavior of this method is to return  getReader() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests that an exception is thrown when an attempt to get a reader after one has altready been gotten and returns  the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetRemoteAddrTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetRemoteAddrTest?Address=127.0.0.1 HTTP/1.0"
            testName="ServletRequestWrapperGetRemoteAddrTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetRemoteAddrTest.html"
            assertion="The default behavior of this method is to return  getRemoteAddr() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetRemoteHostTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetRemoteHostTest?Address=localhost&amp;Address=127.0.0.1 HTTP/1.0"
            testName="ServletRequestWrapperGetRemoteHostTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetRemoteHostTest.html"
            assertion="The default behavior of this method is to return  getRemoteHost() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetRequestDispatcherTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetRequestDispatcherTest HTTP/1.0"
            testName="ServletRequestWrapperGetRequestDispatcherTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetRequestDispatcherTest.html"
            assertion="The default behavior of this method is to return  getRequestDispatcher() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetSchemeTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetSchemeTest HTTP/1.0"
            testName="ServletRequestWrapperGetSchemeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetSchemeTest.html"
            assertion="The default behavior of this method is to return  getScheme() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetServerNameTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetServerNameTest?hostname=localhost HTTP/1.0"
            testName="ServletRequestWrapperGetServerNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetServerNameTest.html"
            assertion="The default behavior of this method is to return  getServerName() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperGetServerPortTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperGetServerPortTest?port=${port} HTTP/1.0"
            testName="ServletRequestWrapperGetServerPortTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperGetServerPortTest.html"
            assertion="The default behavior of this method is to return  getServerPort() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperIsSecureTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperIsSecureTest HTTP/1.0"
            testName="ServletRequestWrapperIsSecureTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperIsSecureTest.html"
            assertion="The default behavior of this method is to return  isSecure() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperRemoveAttributeTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperRemoveAttributeTest HTTP/1.0"
            testName="ServletRequestWrapperRemoveAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperRemoveAttributeTest.html"
            assertion="The default behavior of this method is to return  removeAttribute() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletRequestWrapperSetAttributeTest">
        <gtest request="GET /servlet-tests/ServletRequestWrapperSetAttributeTest HTTP/1.0"
            testName="ServletRequestWrapperSetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletRequestWrapper/ServletRequestWrapperSetAttributeTest.html"
            assertion="The default behavior of this method is to return  setAttribute() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperFlushBufferTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperFlushBufferTest HTTP/1.0"
            testName="ServletResponseWrapperFlushBufferTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperFlushBufferTest.html"
            assertion="The default behavior of this method is to call flushBuffer() on the wrapped response object, specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperGetBufferSizeTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperGetBufferSizeTest HTTP/1.0"
            testName="ServletResponseWrapperGetBufferSizeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetBufferSizeTest.html"
            assertion="The default behavior of this method is to return  getBufferSize() on the wrapped response object , specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperGetCharacterEncodingTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperGetCharacterEncodingTest HTTP/1.0"
            testName="ServletResponseWrapperGetCharacterEncodingTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetCharacterEncodingTest.html"
            assertion="The default behavior of this method is to return  getCharacterEncoding() on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperGetOutputStream_1Test">
        <gtest request="GET /servlet-tests/ServletResponseWrapperGetOutputStream_1Test HTTP/1.0"
            testName="ServletResponseWrapperGetOutputStream_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetOutputStream_1Test.html"
            assertion="The default behavior of this method is to return  getOutputStream() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperGetWriter_1Test">
        <gtest request="GET /servlet-tests/ServletResponseWrapperGetWriter_1Test HTTP/1.0"
            testName="ServletResponseWrapperGetWriter_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetWriter_1Test.html"
            assertion="The default behavior of this method is to return getWriter()  on the wrapped response object, specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperIsCommittedTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperIsCommittedTest HTTP/1.0"
            testName="ServletResponseWrapperIsCommittedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperIsCommittedTest.html"
            assertion="The default behavior of this method is to return  isCommitted() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperResetBufferTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperResetBufferTest HTTP/1.0"
            testName="ServletResponseWrapperResetBufferTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Type:text/html"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperResetBufferTest.html"
            assertion="The default behavior of this method is to call resetBuffer() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperResetTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperResetTest HTTP/1.0"
            testName="ServletResponseWrapperResetTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperResetTest.html"
            assertion="The default behavior of this method is to call reset() on  the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperReset_1Test">
        <gtest request="GET /servlet-tests/ServletResponseWrapperReset_1Test HTTP/1.0"
            testName="ServletResponseWrapperReset_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperReset_1Test.html"
            assertion="When the response has been committed, this method throws an  IllegalStateException, specified in the Java Servlet Pages  Specification v2.3, Sec 14."
            testStrategy="Client calls a servlet who's response has been wrapped. The servlet attempts to reset the buffer after it has already been flushed.  The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperSetBufferSizeTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperSetBufferSizeTest HTTP/1.0"
            testName="ServletResponseWrapperSetBufferSizeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetBufferSizeTest.html"
            assertion="The default behavior of this method is to call  setBufferSize(int size) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperSetBufferSize_1Test">
        <gtest request="GET /servlet-tests/ServletResponseWrapperSetBufferSize_1Test HTTP/1.0"
            testName="ServletResponseWrapperSetBufferSize_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetBufferSize_1Test.html"
            assertion="The default behavior of this method is to call  setBufferSize(int size) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperSetContentLengthTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperSetContentLengthTest HTTP/1.0"
            testName="ServletResponseWrapperSetContentLengthTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Length:58"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetContentLengthTest.html"
            assertion="The default behavior of this method is to call  setContentLength(int len) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperSetContentTypeTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperSetContentTypeTest HTTP/1.0"
            testName="ServletResponseWrapperSetContentTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Type:text/html"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetContentTypeTest.html"
            assertion="The default behavior of this method is to call  setContentType(String type) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperSetLocaleTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperSetLocaleTest HTTP/1.0"
            testName="ServletResponseWrapperSetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Content-Language:en-US"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperSetLocaleTest.html"
            assertion="The default behavior of this method is to call  setLocale(Locale loc) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletResponseWrapperGetLocaleTest">
        <gtest request="GET /servlet-tests/ServletResponseWrapperGetLocaleTest HTTP/1.0"
            testName="ServletResponseWrapperGetLocaleTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/ServletResponseWrapper/ServletResponseWrapperGetLocaleTest.html"
            assertion="The default behavior of this method is to return getLocale() on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet then tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="ServletToServletErrorPageTest">
        <gtest request="GET /servlet-tests/ServletToServletErrorPageTest HTTP/1.0"
            testName="ServletToServletErrorPageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToServletErrorPageTest.html"
            assertion="Returns the error handling request attributes from a  servlet error page(SERVLET)., specified in the Java Servlet  Pages Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.ArithmeticException and  the error page (servlet) for that exception is  executed."
        />
    </target>

    <target name="ServletToServletError501PageTest">
        <gtest request="GET /servlet-tests/ServletToServletError501PageTest HTTP/1.0"
            testName="ServletToServletError501PageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToServletError501PageTest.html"
            assertion="Returns the error handling request attributes from a servlet error page(SERVLET)., specified in the Java Servlet Pages Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.ArithmeticException and the error page (servlet) for that exception is executed."
        />
    </target>

    <target name="ServletToJSPErrorPageTest">
        <gtest request="GET /servlet-tests/ServletToJSPErrorPageTest HTTP/1.0"
            testName="ServletToJSPErrorPageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToJSPErrorPageTest.html"
            assertion="Returns the error handling request attributes from an  error page (JSP)., specified in the Java Servlet Pages  Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.ArrayIndexOutOfBoundsException and the error page (servlet) for that exception is  executed."
        />
    </target>

    <target name="ServletToJSPError502PageTest">
        <gtest request="GET /servlet-tests/ServletToJSPError502PageTest HTTP/1.0"
            testName="ServletToJSPError502PageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToJSPError502PageTest.html"
            assertion="Returns the error handling request attributes from an error page (JSP)., specified in the Java Servlet Pages Specification v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.ArrayIndexOutOfBoundsException and the error page (servlet) for that exception is executed."
        />
    </target>

    <target name="ServletToHTMLErrorPageTest">
        <gtest request="GET /servlet-tests/ServletToHTMLErrorPageTest HTTP/1.0"
            testName="ServletToHTMLErrorPageTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet/Error/ServletToHTMLErrorPageTest.html"
            assertion="Serves back the resource (HTML) as indicated by the location entry, specified in the Java Servlet Pages Specification  v2.3, Chapter 9"
            testStrategy="A servlet throws java.lang.NumberFormatException and the error page (HTML) for that exception is  executed."
        />
    </target>

    <target name="GetAuthTypeWithoutProtectionTest">
        <gtest request="GET /servlet-tests/GetAuthTypeWithoutProtectionTest HTTP/1.0"
            testName="GetAuthTypeWithoutProtectionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetAuthTypeWithoutProtectionTest.html"
            assertion="Returns null if the request was not authenticated,specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for HttpServletRequest.getAuthType() method"
        />
    </target>

    <target name="GetContextPathTest">
        <gtest request="GET /servlet-tests/GetContextPathTest HTTP/1.0"
            testName="GetContextPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetContextPathTest.html"
            assertion="Returns the portion of the request URI that indicates the context of the request.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for HttpServletRequest.getContextPath() method"
        />
    </target>

    <target name="GetCookiesTest">
        <gtest request="GET /servlet-tests/GetCookiesTest HTTP/1.0"
            testName="GetCookiesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Cookie:BestLanguage=Java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetCookiesTest.html"
            assertion="Returns an array containing all of the Cookie objects the  client sent with this request.,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for HttpServletRequest.getCookies() method"
        />
    </target>

    <target name="GetCookies_01Test">
        <gtest request="GET /servlet-tests/GetCookies_01Test HTTP/1.0"
            testName="GetCookies_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetCookies_01Test.html"
            assertion="Returns returns null if no cookies were sent with the request ,specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for HttpServletRequest.getCookies()  method"
        />
    </target>

    <target name="GetDateHeaderTest">
        <gtest request="GET /servlet-tests/GetDateHeaderTest HTTP/1.0"
            testName="GetDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:Sat, 01 Jan 2000 00:00:01 GMT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeaderTest.html"
            assertion="Returns the value of the specified request header as a long value that represents a Date object.,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader()  method"
        />
    </target>

    <target name="GetDateHeaderLCaseTest">
        <gtest request="GET /servlet-tests/GetDateHeaderLCaseTest HTTP/1.0"
            testName="GetDateHeaderLCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:sat, 01 jan 2000 00:00:01 gmt"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeaderLCaseTest.html"
            assertion="Interprets and returns the lower case value of the specified request header as a long value that represents a Date object.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method"
        />
    </target>

    <target name="GetDateHeaderMxCaseTest">
        <gtest request="GET /servlet-tests/GetDateHeaderMxCaseTest HTTP/1.0"
            testName="GetDateHeaderMxCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:SaT, 01 jAn 2000 00:00:01 GmT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeaderMxCaseTest.html"
            assertion="Interprets and returns the mixed case value of the specified request header as a long value that represents a Date object.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method"
        />
    </target>

    <target name="GetDateHeader_01Test">
        <gtest request="GET /servlet-tests/GetDateHeader_01Test HTTP/1.0"
            testName="GetDateHeader_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeader_01Test.html"
            assertion="If the request did not have a header of the specified name, this method returns -1,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader()  method. We sent no Header from the client side, so we  should get a value of '-1'"
        />
    </target>

    <target name="GetDateHeader_02Test">
        <gtest request="GET /servlet-tests/GetDateHeader_02Test HTTP/1.0"
            testName="GetDateHeader_02Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeader_02Test.html"
            assertion="Throws illegalArgumentException, If the header value can't be converted to a date, specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader()  method. We sent a Header which is not of 'Date'  format so we should get IllegalArgumentException."
        />
    </target>

    <target name="GetDateHeader_02LCaseTest">
        <gtest request="GET /servlet-tests/GetDateHeader_02LCaseTest HTTP/1.0"
            testName="GetDateHeader_02LCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeader_02LCaseTest.html"
            assertion="Throws illegalArgumentException, even when using a lowercase header it's value can't be converted to a date, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method. We sent a Header which is not of 'Date' format so we should get IllegalArgumentException."
        />
    </target>

    <target name="GetDateHeader_02MxCaseTest">
        <gtest request="GET /servlet-tests/GetDateHeader_02MxCaseTest HTTP/1.0"
            testName="GetDateHeader_02MxCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetDateHeader_02MxCaseTest.html"
            assertion="Throws illegalArgumentException, even when using a mixed case header it's value can't be converted to a date, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getDateHeader() method. We sent a Header which is not of 'Date' format so we should get IllegalArgumentException."
        />
    </target>

    <target name="GetHeaderNamesTest">
        <gtest request="GET /servlet-tests/GetHeaderNamesTest HTTP/1.0"
            testName="GetHeaderNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Cookie:BestLanguage=java|If-Modified-Since:Sat, 01 Jan 2000 00:00:01 GMT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaderNamesTest.html"
            assertion="Returns an enumeration of all the header names this request contains., specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeaderNames() method."
        />
    </target>

    <target name="GetHeader_01Test">
        <gtest request="GET /servlet-tests/GetHeader_01Test HTTP/1.0"
            testName="GetHeader_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeader_01Test.html"
            assertion="Returns null if the request does not have a header of that  name,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getHeader()  method."
        />
    </target>

    <target name="GetHeadersTest">
        <gtest request="GET /servlet-tests/GetHeadersTest HTTP/1.0"
            testName="GetHeadersTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-us|Accept-Language:ga-us"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeadersTest.html"
            assertion="Returns all the values of the specified request header as  an Enumeration of String objects.,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeaders() method."
        />
    </target>

    <target name="GetHeadersEmptyTest">
        <gtest request="GET /servlet-tests/GetHeadersEmptyTest HTTP/1.0"
            testName="GetHeadersEmptyTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeadersEmptyTest.html"
            assertion="If the specified request header doesn't exist an empty Enumeration is returned.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeaders() method."
        />
    </target>

    <target name="GetHeaders_01Test">
        <gtest request="GET /servlet-tests/GetHeaders_01Test HTTP/1.0"
            testName="GetHeaders_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaders_01Test.html"
            assertion="Returns an empty enumeration if the request does not have  a header of the specified name, specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getHeaders()  method."
        />
    </target>

    <target name="GetIntHeaderTest">
        <gtest request="GET /servlet-tests/GetIntHeaderTest HTTP/1.0"
            testName="GetIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyIntHeader:123"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeaderTest.html"
            assertion="Returns the value of the specified request header as an integer.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getIntHeader() method."
        />
    </target>

    <target name="GetIntHeaderLCaseTest">
        <gtest request="GET /servlet-tests/GetIntHeaderLCaseTest HTTP/1.0"
            testName="GetIntHeaderLCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyIntHeader:123"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeaderLCaseTest.html"
            assertion="Returns the value of the specified lower cased request header as an integer.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getIntHeader() method."
        />
    </target>

    <target name="GetIntHeaderMxCaseTest">
        <gtest request="GET /servlet-tests/GetIntHeaderMxCaseTest HTTP/1.0"
            testName="GetIntHeaderMxCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyIntHeader:123"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeaderMxCaseTest.html"
            assertion="Returns the value of the specified mixed case request header as an integer.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getIntHeader() method."
        />
    </target>

    <target name="GetIntHeader_1Test">
        <gtest request="GET /servlet-tests/GetIntHeader_1Test HTTP/1.0"
            testName="GetIntHeader_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyNonIntHeader:Java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeader_1Test.html"
            assertion="Throws NumberFormatException, if the header value can't be  converted to an int,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getIntHeader()  method."
        />
    </target>

    <target name="GetIntHeader_2Test">
        <gtest request="GET /servlet-tests/GetIntHeader_2Test HTTP/1.0"
            testName="GetIntHeader_2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetIntHeader_2Test.html"
            assertion="Returns -1 if the request doesn't have a header of this name ,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getIntHeader()  method."
        />
    </target>

    <target name="GetMethodTest">
        <gtest request="GET /servlet-tests/GetMethodTest HTTP/1.0"
            testName="GetMethodTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetMethodTest.html"
            assertion="Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.,specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getMethod() method."
        />
    </target>

    <target name="GetMethod_HEADTest">
        <gtest request="HEAD /servlet-tests/GetMethod_HEADTest HTTP/1.0"
            testName="GetMethod_HEADTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200" expectHeaders="status:GetMethod_HEADTest PASSED"
            assertion="Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.,specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getMethod() HEAD method."
        />
    </target>

    <target name="GetMethod_POSTTest">
        <gtest request="POST /servlet-tests/GetMethod_POSTTest HTTP/1.0"
            testName="GetMethod_POSTTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetMethod_POSTTest.html"
            assertion="Returns the name of the HTTP method with which this request was made, for example, GET, POST, or PUT.,specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getMethod() POST method."
        />
    </target>

    <target name="GetPathInfoTest">
        <gtest request="GET /servlet-tests/GetPathInfoTest/pathinfostring1/pathinfostring2 HTTP/1.0"
            testName="GetPathInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathInfoTest.html"
            assertion="Returns any extra path information associated with the URL the client sent when it made this request.,specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getPathInfo() method."
        />
    </target>

    <target name="GetPathInfo_01Test">
        <gtest request="GET /servlet-tests/GetPathInfo_01Test HTTP/1.0"
            testName="GetPathInfo_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathInfo_01Test.html"
            assertion="Returns null if there was no extra path information sent with this request.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getPathInfo()  method."
        />
    </target>

    <target name="GetPathTranslatedTest">
        <gtest request="GET /servlet-tests/GetPathTranslatedTest/javax_servlet HTTP/1.0"
            testName="GetPathTranslatedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathTranslatedTest.html"
            assertion="Returns any extra path information after the servlet name  but before the query string, and translates it to a real  path.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getPathTranslated()  method."
        />
    </target>

    <target name="GetPathTranslatedNullTest">
        <gtest request="GET /servlet-tests/GetPathTranslatedNullTest HTTP/1.0"
            testName="GetPathTranslatedNullTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathTranslatedNullTest.html"
            assertion="Returns null if the URL has no extra path information after the servlet name but before the query string,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getPathTranslated() method."
        />
    </target>

    <target name="GetPathTranslated_01Test">
        <gtest request="GET /servlet-tests/GetPathTranslated_01Test HTTP/1.0"
            testName="GetPathTranslated_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetPathTranslated_01Test.html"
            assertion="Returns null if the URL does not have any extra path  information.,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative test for  HttpServletRequest.getPathTranslated() method."
        />
    </target>

    <target name="GetQueryStringTest">
        <gtest request="GET /servlet-tests/GetQueryStringTest?language=Java HTTP/1.0"
            testName="GetQueryStringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetQueryStringTest.html"
            assertion="Returns the query string that is contained in the request  URL after the path, specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getQueryString() method."
        />
    </target>

    <target name="GetQueryString_01Test">
        <gtest request="GET /servlet-tests/GetQueryString_01Test HTTP/1.0"
            testName="GetQueryString_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetQueryString_01Test.html"
            assertion="Returns null if the URL contains no query string, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpServletRequest.getQueryString()  method."
        />
    </target>

    <target name="GetRemoteUser_01Test">
        <gtest request="GET /servlet-tests/GetRemoteUser_01Test HTTP/1.0"
            testName="GetRemoteUser_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetRemoteUser_01Test.html"
            assertion="Returns null if the user has not been authenticated., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for HttpServletRequest.getRemoteUser()  method."
        />
    </target>

    <target name="GetRequestURITest">
        <gtest request="GET /servlet-tests/GetRequestURITest HTTP/1.0"
            testName="GetRequestURITest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetRequestURITest.html"
            assertion="Returns the part of this request's URL from the protocol name up to the query string in the first line of the HTTP  request.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getRequestURI() method."
        />
    </target>

    <target name="GetRequestURIWithQSTest">
        <gtest request="GET /servlet-tests/GetRequestURIWithQSTest?language=java HTTP/1.0"
            testName="GetRequestURIWithQSTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetRequestURIWithQSTest.html"
            assertion="Returns the part of this request's URL from the protocol  name up to the query string in the first line of the HTTP  request.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getRequestURI() testing  with query string."
        />
    </target>

    <target name="GetRequestedSessionId_01Test">
        <gtest request="GET /servlet-tests/GetRequestedSessionId_01Test HTTP/1.0"
            testName="GetRequestedSessionId_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetRequestedSessionId_01Test.html"
            assertion="Returns null if the request did not specify a session ID, specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for  HttpServletRequest.getRequestedSessionId() method."
        />
    </target>

    <target name="GetServletPathTest">
        <gtest request="GET /servlet-tests/GetServletPathTest HTTP/1.0"
            testName="GetServletPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetServletPathTest.html"
            assertion="Returns the part of this request's URL that calls the  servlet.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getServletPath() method."
        />
    </target>

    <target name="IsRequestedSessionIdFromCookie_01Test">
        <gtest request="GET /servlet-tests/IsRequestedSessionIdFromCookie_01Test HTTP/1.0"
            testName="IsRequestedSessionIdFromCookie_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/IsRequestedSessionIdFromCookie_01Test.html"
            assertion="Returns false if session Id did not come in as a cookie ,specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for  HttpServletRequest.isRequestedSessionIdFromCookie()  method."
        />
    </target>

    <target name="IsRequestedSessionIdFromURL_01Test">
        <gtest request="GET /servlet-tests/IsRequestedSessionIdFromURL_01Test HTTP/1.0"
            testName="IsRequestedSessionIdFromURL_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/IsRequestedSessionIdFromURL_01Test.html"
            assertion="Returns false if session Id did not come in as part of a URL, specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for  HttpServletRequest.isRequestedSessionIdFromURL() method"
        />
    </target>

    <target name="IsRequestedSessionIdValid_01Test">
        <gtest request="GET /servlet-tests/IsRequestedSessionIdValid_01Test HTTP/1.0"
            testName="IsRequestedSessionIdValid_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/IsRequestedSessionIdValid_01Test.html"
            assertion="Returns false if this request does not have an id for a  valid session in the current session context, specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for  HttpServletRequest.isRequestedSessionIdValid() method."
        />
    </target>

    <target name="GetHeaderTest">
        <gtest request="GET /servlet-tests/GetHeaderTest HTTP/1.0"
            testName="GetHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="User-Agent:Mozilla/4.0"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaderTest.html"
            assertion="Returns the value of the specified request header as a String, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeader() method"
        />
    </target>

    <target name="GetHeaderLCaseTest">
        <gtest request="GET /servlet-tests/GetHeaderLCaseTest HTTP/1.0"
            testName="GetHeaderLCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="User-Agent:Mozilla/4.0"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaderLCaseTest.html"
            assertion="Returns the value of the specified lower cased request header as a String, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeader() method"
        />
    </target>

    <target name="GetHeaderMxCaseTest">
        <gtest request="GET /servlet-tests/GetHeaderMxCaseTest HTTP/1.0"
            testName="GetHeaderMxCaseTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="User-Agent:Mozilla/4.0"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetHeaderMxCaseTest.html"
            assertion="Returns the value of the specified mixed case request header as a String, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequest.getHeader() method"
        />
    </target>

    <target name="GetSession_01Test">
        <gtest request="GET /servlet-tests/GetSession_01Test HTTP/1.0"
            testName="GetSession_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequest/GetSession_01Test.html"
            assertion="Returns null if create is false and the request has no  valid HttpSession, specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="Tests that getSession(false) returns null"
        />
    </target>

    <target name="CookieCloneTest">
        <gtest request="GET /servlet-tests/CookieCloneTest HTTP/1.0"
            testName="CookieCloneTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/CookieCloneTest.html"
            assertion="Overrides the standard java.lang.Object.clone() method to  return a copy of this cookie.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.clone() method"
        />
    </target>

    <target name="Cookie_ConstructorTest">
        <gtest request="GET /servlet-tests/Cookie_ConstructorTest HTTP/1.0"
            testName="Cookie_ConstructorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/Cookie_ConstructorTest.html"
            assertion="Constructs a cookie with a specified name and value., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test for Cookie(String name,String value) constructor"
        />
    </target>

    <target name="Cookie_Constructor_1Test">
        <gtest request="GET /servlet-tests/Cookie_Constructor_1Test HTTP/1.0"
            testName="Cookie_Constructor_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/Cookie_Constructor_1Test.html"
            assertion="Throws IllegalArgumentException if the cookie name contains  illegal characters (for example, a comma, space, or  semicolon) or it is one of the tokens reserved for use by  the cookie protocol, specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative Test for Cookie(String name,String value)  constructor. We include some invalid  chars in the  Cookie name and test for IllegalArgumentException"
        />
    </target>

    <target name="GetCommentTest">
        <gtest request="GET /servlet-tests/GetCommentTest HTTP/1.0"
            testName="GetCommentTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetCommentTest.html"
            assertion="Returns the comment describing the purpose of this cookie., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test for Cookie.getComment() method"
        />
    </target>

    <target name="GetComment_01Test">
        <gtest request="GET /servlet-tests/GetComment_01Test HTTP/1.0"
            testName="GetComment_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetComment_01Test.html"
            assertion="Returns null if the cookie has no comment.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getComment() method"
        />
    </target>

    <target name="GetDomainTest">
        <gtest request="GET /servlet-tests/GetDomainTest HTTP/1.0"
            testName="GetDomainTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetDomainTest.html"
            assertion="Returns the domain name set for this cookie.,specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getDomain() method"
        />
    </target>

    <target name="GetMaxAgeTest">
        <gtest request="GET /servlet-tests/GetMaxAgeTest HTTP/1.0"
            testName="GetMaxAgeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetMaxAgeTest.html"
            assertion="Returns the maximum age of the cookie, specified in seconds ,specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test for Cookie.getMaxAge() method"
        />
    </target>

    <target name="GetMaxAge_1Test">
        <gtest request="GET /servlet-tests/GetMaxAge_1Test HTTP/1.0"
            testName="GetMaxAge_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetMaxAge_1Test.html"
            assertion="Returns by default, -1 indicating the cookie will persist  until browser shutdown.,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative test for Cookie.getMaxAge() method. We will  try to get Cookies default maxAge which is '-1'"
        />
    </target>

    <target name="GetNameTest">
        <gtest request="GET /servlet-tests/GetNameTest HTTP/1.0"
            testName="GetNameTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetNameTest.html"
            assertion="Returns the name of the cookie.,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getName() method"
        />
    </target>

    <target name="GetPathTest">
        <gtest request="GET /servlet-tests/GetPathTest HTTP/1.0"
            testName="GetPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetPathTest.html"
            assertion="Returns the path on the server to which the browser returns this cookie.,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getPath() method"
        />
    </target>

    <target name="GetSecureTest">
        <gtest request="GET /servlet-tests/GetSecureTest HTTP/1.0"
            testName="GetSecureTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetSecureTest.html"
            assertion="Returns false if the browser can send cookies  using any protocol.,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getSecure() method"
        />
    </target>

    <target name="GetValueTest">
        <gtest request="GET /servlet-tests/GetValueTest HTTP/1.0"
            testName="GetValueTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetValueTest.html"
            assertion="Returns the value of the cookie.,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getValue() method"
        />
    </target>

    <target name="GetVersionTest">
        <gtest request="GET /servlet-tests/GetVersionTest HTTP/1.0"
            testName="GetVersionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/GetVersionTest.html"
            assertion="Returns the version of the protocol this cookie complies  with, 0 if the cookie complies with the original Netscape  specification,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.getVersion() method"
        />
    </target>

    <target name="SetCommentTest">
        <gtest request="GET /servlet-tests/SetCommentTest HTTP/1.0"
            testName="SetCommentTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetCommentTest.html"
            assertion="Specifies a comment that describes a cookie's purpose., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test for Cookie.setComment() method"
        />
    </target>

    <target name="SetDomainTest">
        <gtest request="GET /servlet-tests/SetDomainTest HTTP/1.0"
            testName="SetDomainTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetDomainTest.html"
            assertion="Specifies the domain within which this cookie should be  presented.,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setDomain() method"
        />
    </target>

    <target name="SetMaxAgeTest">
        <gtest request="GET /servlet-tests/SetMaxAgeTest HTTP/1.0"
            testName="SetMaxAgeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetMaxAgeTest.html"
            assertion="Sets the maximum age of the cookie in seconds.,specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setMaxAge() method"
        />
    </target>

    <target name="SetPathTest">
        <gtest request="GET /servlet-tests/SetPathTest HTTP/1.0"
            testName="SetPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetPathTest.html"
            assertion="Specifies a path for the cookie to which the client should  return the cookie.,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setPath() method"
        />
    </target>

    <target name="SetSecureTest">
        <gtest request="GET /servlet-tests/SetSecureTest HTTP/1.0"
            testName="SetSecureTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetSecureTest.html"
            assertion="Indicates to the browser whether the cookie should only be  sent using a secure protocol, such as HTTPS or SSL., the  default value is false specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setSecureTest() method"
        />
    </target>

    <target name="SetValueTest">
        <gtest request="GET /servlet-tests/SetValueTest HTTP/1.0"
            testName="SetValueTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetValueTest.html"
            assertion="Assigns a new value to a cookie after the cookie is created. specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A Test for Cookie.setValueTest() method"
        />
    </target>

    <target name="SetVersionTest">
        <gtest request="GET /servlet-tests/SetVersionTest HTTP/1.0"
            testName="SetVersionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/Cookie/SetVersionTest.html"
            assertion="Sets the version of the cookie protocol this cookie  complies with, 0 if the cookie should comply with the  original Netscape specification;,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A Test for Cookie.setVersion() method"
        />
    </target>

    <target name="AddCookieTest">
        <gtest request="GET /servlet-tests/AddCookieTest HTTP/1.0"
            testName="AddCookieTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="Set-Cookie:BestLanguage=Java"
            assertion="Adds the specified cookie to the response.,specified in  the Java Servl et Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.addCookie() method."
        />
    </target>

    <target name="AddDateHeaderTest">
        <gtest request="GET /servlet-tests/AddDateHeaderTest HTTP/1.0"
            testName="AddDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="DateInfo:Sat, 25 Apr 1970 07:29:03 GMT"
            assertion="Adds a response header with the given name and date-value., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for HttpServletResponse.addDateHeader() method."
        />
    </target>

    <target name="AddHeaderTest">
        <gtest request="GET /servlet-tests/AddHeaderTest HTTP/1.0"
            testName="AddHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:Java|MyStrHeader:Java2|MyStrHeader2:Java3"
            assertion="Adds a response header with the given name and value., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for HttpServletResponse.addHeader() method."
        />
    </target>

    <target name="AddIntHeaderTest">
        <gtest request="GET /servlet-tests/AddIntHeaderTest HTTP/1.0"
            testName="AddIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader2:4|MyIntHeader:2|MyIntHeader:3"
            assertion="Adds a response header with the given name and integer  value.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.addIntHeader() method."
        />
    </target>

    <target name="ContainsHeaderTest">
        <gtest request="GET /servlet-tests/ContainsHeaderTest HTTP/1.0"
            testName="ContainsHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader:20"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponse/ContainsHeaderTest.html"
            assertion="Returns true if the named response header has already been  set.,specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for HttpServletResponse.containsHeader() method."
        />
    </target>

    <target name="ContainsHeader_01Test">
        <gtest request="GET /servlet-tests/ContainsHeader_01Test HTTP/1.0"
            testName="ContainsHeader_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponse/ContainsHeader_01Test.html"
            assertion="Returns false if  the named response header has not already  been set.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A negative test for HttpServletResponse.containsHeader() method."
        />
    </target>

    <target name="SendErrorTest">
        <gtest request="GET /servlet-tests/SendErrorTest HTTP/1.0"
            testName="SendErrorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            assertion="Sends an error response to the client using the specified  status code,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendError(int sc) method."
        />
    </target>

    <target name="SendErrorIgnoreHeaderTest">
        <gtest request="GET /servlet-tests/SendErrorIgnoreHeaderTest HTTP/1.0"
            testName="SendErrorIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            unexpectedHeaders="HttpServletResponse:sendErrorIgnoreHeader"
            assertion="Verify that headers added after sendError(int) are ignored by the container.  Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Issue a request to target servlet which will call sendError() and then add a header to the response. The added header should not be visible to the client."
        />
    </target>

<!-- START EXCLUDE SendError_StringTest

     Test has been excluded due to ambiguity in the spec regarding 
     the HTTP status line's reason-phrase being populated with the value
     of msg in a call to response.sendError(int,String).
     This is on the slate to be clarified for the next spec.

    <target name="SendError_StringTest">
        <gtest request="GET /servlet-tests/SendError_StringTest HTTP/1.0"
            testName="SendError_StringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100" returnCodeMsg="in SendError_StringTest servlet"
            assertion="Sends an error response to the client using the specified  status code and descriptive message,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendError(int sc,  java.lang.String msg) method."
        />
    </target>

END EXCLUDE SendError_StringTest -->

    <target name="SendError_StringIgnoreHeaderTest">
        <gtest request="GET /servlet-tests/SendError_StringIgnoreHeaderTest HTTP/1.0"
            testName="SendError_StringIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100" 
            unexpectedHeaders="HttpServletResponse:sendErrorMsgIgnoreHeader"
            assertion="Verify that headers added after sendError(int,String) are ignored by the container.  Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Issue a request to target servlet which will call sendError() and then add a header to the response. The added header should not be visible to the client."
        />
    </target>

    <target name="SendRedirectTest">
        <gtest request="GET /servlet-tests/SendRedirectTest HTTP/1.0"
            testName="SendRedirectTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            expectHeaders="Location:http://${host}:${port}/RedirectedTest"
            assertion="Sends a temporary redirect response to the client using  the specified redirect location URL that is based on the server root,specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendRedirect() method."
        />
    </target>

    <target name="SendRedirectIgnoreHeaderTest">
        <gtest request="GET /servlet-tests/SendRedirectIgnoreHeaderTest HTTP/1.0"
            testName="SendRedirectIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            unexpectedHeaders="HttpServletResponse:sendRedirectIgnoreHeader"
            assertion="Verify that headers added after sendRedirect(String) are ignored by the container.  Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Issue a request to target servlet which will call sendRedirect() and then add a header to the response. The added header should not be visible to the client."
        />
    </target>

    <target name="SendRedirectForWebAppTest">
        <gtest request="GET /servlet-tests/SendRedirectForWebAppTest HTTP/1.0"
            testName="SendRedirectForWebAppTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            expectHeaders="Location:http://${host}:${port}/servlet-tests/RedirectedTest"
            assertion="Sends a temporary redirect response to the client using the specified redirect location URL that is based on the context-root,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.sendRedirect() method."
        />
    </target>

    <target name="SendRedirect_1Test">
        <gtest request="GET /servlet-tests/SendRedirect_1Test HTTP/1.0"
            testName="SendRedirect_1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponse/SendRedirect_1Test.html"
            assertion="Throws IllegalStateException if the response was committed ,specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for HttpServletResponse.sendRedirect()  method."
        />
    </target>

    <target name="SetDateHeaderTest">
        <gtest request="GET /servlet-tests/SetDateHeaderTest HTTP/1.0"
            testName="SetDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="DateInfo:Sat, 25 Apr 1970 07:29:03 GMT"
            assertion="Sets a response header with the given name and date-value., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for HttpServletResponse.sendDateHeader() method."
        />
    </target>

    <target name="SetHeaderTest">
        <gtest request="GET /servlet-tests/SetHeaderTest HTTP/1.0"
            testName="SetHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:Java"
            assertion="Sets a response header with the given name and value., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for HttpServletResponse.setHeader() method."
        />
    </target>

    <target name="SetIntHeaderTest">
        <gtest request="GET /servlet-tests/SetIntHeaderTest HTTP/1.0"
            testName="SetIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader:2"
            assertion="Sets a response header with the given name and integer  value.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.setIntHeader() method."
        />
    </target>

    <target name="SetStatusTest">
        <gtest request="GET /servlet-tests/SetStatusTest HTTP/1.0"
            testName="SetStatusTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            assertion="Sets the status code for this response.,specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletResponse.setStatus() method."
        />
    </target>

    <target name="GetCreationTimeTest">
        <gtest request="GET /servlet-tests/GetCreationTimeTest HTTP/1.0"
            testName="GetCreationTimeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/GetCreationTimeTest.html"
            assertion="Returns the time when this session was created, measured  in milliseconds since midnight January 1, 1970 GMT., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for HttpSession.getCreationTime() method."
        />
    </target>

    <target name="GetIdTest">
        <gtest request="GET /servlet-tests/GetIdTest HTTP/1.0"
            testName="GetIdTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/GetIdTest.html"
            assertion="Returns a string containing the unique identifier assigned  to this session.,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getId() method."
        />
    </target>

    <target name="GetLastAccessedTimeTest">
        <gtest request="GET /servlet-tests/GetLastAccessedTimeTest HTTP/1.0"
            testName="GetLastAccessedTimeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/GetLastAccessedTimeTest.html"
            assertion="Returns the last time the client sent a request associated  with this session, as the number of milliseconds since  midnight January 1, 1970 GMT.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getLastAccessedTime() method."
        />
    </target>

    <target name="GetMaxInactiveIntervalTest">
        <gtest request="GET /servlet-tests/GetMaxInactiveIntervalTest HTTP/1.0"
            testName="GetMaxInactiveIntervalTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/GetMaxInactiveIntervalTest.html"
            assertion="Returns the maximum time interval, in seconds, that the  servlet container will keep this session open between  client accesses.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getMaxInactiveInterval() method."
        />
    </target>

    <target name="SetMaxInactiveIntervalTest">
        <gtest request="GET /servlet-tests/SetMaxInactiveIntervalTest HTTP/1.0"
            testName="SetMaxInactiveIntervalTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/SetMaxInactiveIntervalTest.html"
            assertion="Specifies the time, in seconds, between client requests  before the servlet container will invalidate this session ,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.setMaxInactiveInterval() method."
        />
    </target>

    <target name="HttpSessionGetAttributeNamesTest">
        <gtest request="GET /servlet-tests/HttpSessionGetAttributeNamesTest HTTP/1.0"
            testName="HttpSessionGetAttributeNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttributeNamesTest.html"
            assertion="Returns an Enumeration of String objects containing the  names of all the objects bound to this session.,specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getAttributeNames() method."
        />
    </target>

    <target name="HttpSessionGetAttributeNamesEmptyTest">
        <gtest request="GET /servlet-tests/HttpSessionGetAttributeNamesEmptyTest HTTP/1.0"
            testName="HttpSessionGetAttributeNamesEmptyTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttributeNamesEmptyTest.html"
            assertion="Returns an empty Enumeration since there were no attributes objects bound to this session.,specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.getAttributeNames() method."
        />
    </target>

    <target name="HttpSessionGetAttributeNames_01Test">
        <gtest request="GET /servlet-tests/HttpSessionGetAttributeNames_01Test HTTP/1.0"
            testName="HttpSessionGetAttributeNames_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttributeNames_01Test.html"
            assertion="Throws IllegalStateException if this method is called on an  invalidated session,specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.getAttributeNames()  method."
        />
    </target>

    <target name="HttpSessionGetAttributeTest">
        <gtest request="GET /servlet-tests/HttpSessionGetAttributeTest HTTP/1.0"
            testName="HttpSessionGetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttributeTest.html"
            assertion="Returns the object bound with the specified name in this  session, specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpSession.getAttribute() method."
        />
    </target>

    <target name="HttpSessionGetAttribute_01Test">
        <gtest request="GET /servlet-tests/HttpSessionGetAttribute_01Test HTTP/1.0"
            testName="HttpSessionGetAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetAttribute_01Test.html"
            assertion="Returns null if no object is bound under the name., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A negative test for HttpSession.getAttribute() method."
        />
    </target>

    <target name="InvalidateTest">
        <gtest request="GET /servlet-tests/InvalidateTest HTTP/1.0"
            testName="InvalidateTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/InvalidateTest.html"
            assertion="Invalidates this session and unbinds any objects bound to  it.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpSession.invalidate() method."
        />
    </target>

    <target name="IsNewTest">
        <gtest request="GET /servlet-tests/IsNewTest HTTP/1.0"
            testName="IsNewTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/IsNewTest.html"
            assertion="Returns true if the client does not yet know about the  session or if the client chooses not to join the session., specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="A test for HttpSession.getIsNew() method."
        />
    </target>

    <target name="IsNew_01Test">
        <gtest request="GET /servlet-tests/IsNew_01Test HTTP/1.0"
            testName="IsNew_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/IsNew_01Test.html"
            assertion="Throws IllegalStateException if this method is called on an  already invalidated session, specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.IsNew() method."
        />
    </target>

    <target name="RemoveAttributeTest">
        <gtest request="GET /servlet-tests/RemoveAttributeTest HTTP/1.0"
            testName="RemoveAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/RemoveAttributeTest.html"
            assertion="Removes the object bound with the specified name from this  session.,specified in the Java Servlet Pages Specification  v2.3, Sec 14"
            testStrategy="A test for HttpSession.removeAttribute() method."
        />
    </target>

    <target name="RemoveAttribute_01Test">
        <gtest request="GET /servlet-tests/RemoveAttribute_01Test HTTP/1.0"
            testName="RemoveAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/RemoveAttribute_01Test.html"
            assertion="Throws IllegalStateException if this method is called on an  invalidated session ,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.removeAttribute() method"
        />
    </target>

    <target name="SetAttributeTest">
        <gtest request="GET /servlet-tests/SetAttributeTest HTTP/1.0"
            testName="SetAttributeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/SetAttributeTest.html"
            assertion="Binds an object to this session, using the name specified. If an object of the same name is already bound to the  session, the object is replaced, specified in the Java  Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpSession.setAttribute() method."
        />
    </target>

    <target name="SetAttribute_01Test">
        <gtest request="GET /servlet-tests/SetAttribute_01Test HTTP/1.0"
            testName="SetAttribute_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/SetAttribute_01Test.html"
            assertion="Throws IllegalStateException if this method is called on an  invalidated session, specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="A negative test for HttpSession.setAttribute() method."
        />
    </target>

    <target name="HttpSessionGetServletContextTest">
        <gtest request="GET /servlet-tests/HttpSessionGetServletContextTest HTTP/1.0"
            testName="HttpSessionGetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSession/HttpSessionGetServletContextTest.html"
            assertion="Returns the ServletContext to which this session belongs, specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Call a servlet that makes API call for servlet context"
        />
    </target>

    <target name="HttpServletRequestWrapperConstructorTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperConstructorTest HTTP/1.0"
            testName="HttpServletRequestWrapperConstructorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperConstructorTest.html"
            assertion="A HttpServletRequestWrapper object should be returned when the request object is passed into the constructor. Java  Specification v2.3 Sec 14."
            testStrategy="Construct a request object wrapping the given request."
        />
    </target>

    <target name="HttpServletRequestWrapperGetContextPathTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetContextPathTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetContextPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetContextPathTest.html"
            assertion="Test for default behavior of this method to return  getContextPath() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetCookiesTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetCookiesTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetCookiesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Cookie:BestLanguage=Java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetCookiesTest.html"
            assertion="Test for default behavior of this method to return  getCookies() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetDateHeaderTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetDateHeaderTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="If-Modified-Since:Sat, 01 Jan 2000 00:00:01 GMT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetDateHeaderTest.html"
            assertion="Test for default behavior of this method to return  getDateHeader(String name) on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3,  Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetHeaderNamesTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetHeaderNamesTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetHeaderNamesTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Accept-Language:en-us|Accept-Language2:ga-us"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetHeaderNamesTest.html"
            assertion="Test for default behavior of this method to return getHeaders(String name) on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetHeadersTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetHeadersTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetHeadersTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyHeader:myheadervalue1|MyHeader:myheadervalue2"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetHeadersTest.html"
            assertion="Test for default behavior of this method to return  getHeaders(String name) on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetIntHeaderTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetIntHeaderTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="MyIntHeader:123"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetIntHeaderTest.html"
            assertion="Test for default behavior of this method to return  getIntHeader(String name) on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetMethodTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetMethodTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetMethodTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetMethodTest.html"
            assertion="Test for default behavior of this method to return getMethod() on the wrapped request object, specified in the Java Servlet  Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetPathInfoTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetPathInfoTest/pathinfostring1/pathinfostring2 HTTP/1.0"
            testName="HttpServletRequestWrapperGetPathInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetPathInfoTest.html"
            assertion="Test for default behavior of this method to return  getPathInfo() on the wrapped request object, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetPathTranslatedTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetPathTranslatedTest/javax_servlet HTTP/1.0"
            testName="HttpServletRequestWrapperGetPathTranslatedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetPathTranslatedTest.html"
            assertion="Test for default behavior of this method to return  getPathTranslated() on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetQueryStringTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetQueryStringTest?language=Java HTTP/1.0"
            testName="HttpServletRequestWrapperGetQueryStringTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetQueryStringTest.html"
            assertion="Test for default behavior of this method to return  getQueryString() on the wrapped request object, specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetRequestURITest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetRequestURITest HTTP/1.0"
            testName="HttpServletRequestWrapperGetRequestURITest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetRequestURITest.html"
            assertion="Test for default behavior of this method to return  getRequestURI() on the wrapped request object, specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetServletPathTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetServletPathTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetServletPathTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetServletPathTest.html"
            assertion="Test for default behavior of this method to return  getServletPath() on the wrapped request object, specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetHeaderTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetHeaderTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="User-Agent:Mozilla/4.0"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetHeaderTest.html"
            assertion="Test for default behavior of this method to return  getHeader(String name) on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetAuthTypeTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetAuthTypeTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetAuthTypeTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetAuthTypeTest.html"
            assertion="Test if method returns the default getAuthType on the wrapped request object,specified in the Java Servlet Pages  Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetRemoteUserTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetRemoteUserTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetRemoteUserTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetRemoteUserTest.html"
            assertion="Test for default behavior of this method to return  getRemoteUser() on the wrapped request object, specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetRequestedSessionIdTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetRequestedSessionIdTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetRequestedSessionIdTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetRequestedSessionIdTest.html"
            assertion="Test for default behavior of this method to return  getRequestedSessionId() on the wrapped request object,  specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetRequestURLTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetRequestURLTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetRequestURLTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            requestHeaders="Cookie:prefix=http|Cookie:server=${host}|Cookie:port=${port}|Cookie:servletpath=_servlet-tests_hsreqw_HttpServletRequestWrapperGetRequestURLTest"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetRequestURLTest.html"
            assertion="Test for default behavior of this method to return  getRequestURL() on the wrapped request object, specified in  the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetSessionTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetSessionTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetSessionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetSessionTest.html"
            assertion="Test for default behavior of this method to return  getSession() on the wrapped request object, specified in the  Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Client calls a servlet who's request has been wrapped. The wrapper object writes a message to a static log file and calls the wrapped objects method. Servlet the tests the returned value and returns the result of the test plus the contents of the static log file."
        />
    </target>

    <target name="HttpServletRequestWrapperGetSessionBooleanTest">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperGetSessionBooleanTest HTTP/1.0"
            testName="HttpServletRequestWrapperGetSessionBooleanTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperGetSessionBooleanTest.html"
            assertion="Test for default behavior of this method to return  getSession(boolean) on the wrapped request object, specified  in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="A test for HttpServletRequestWrapper.getSession(boolean)  method"
        />
    </target>

    <target name="HttpServletRequestWrapperIsRequestedSessionIdFromCookie_01Test">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperIsRequestedSessionIdFromCookie_01Test HTTP/1.0"
            testName="HttpServletRequestWrapperIsRequestedSessionIdFromCookie_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperIsRequestedSessionIdFromCookie_01Test.html"
            assertion="Test for a false return from this method on the wrapped request object, specified in the Java Servlet Pages Specification v2.3 Sec 14"
            testStrategy="A test for HttpServletRequestWrapper.isRequestedSessionIdFromCookie() method"
        />
    </target>

    <target name="HttpServletRequestWrapperIsRequestedSessionIdFromURL_01Test">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperIsRequestedSessionIdFromURL_01Test HTTP/1.0"
            testName="HttpServletRequestWrapperIsRequestedSessionIdFromURL_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperIsRequestedSessionIdFromURL_01Test.html"
            assertion="Test for a false return from this method on the wrapped request object, specified in the Java Servlet Pages Specification v2.3 Sec 14"
            testStrategy="A test for HttpServletRequestWrapper.isRequestedSessionIdFromURL() method"
        />
    </target>

    <target name="HttpServletRequestWrapperIsRequestedSessionIdValid_01Test">
        <gtest request="GET /servlet-tests/hsreqw/HttpServletRequestWrapperIsRequestedSessionIdValid_01Test HTTP/1.0"
            testName="HttpServletRequestWrapperIsRequestedSessionIdValid_01Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletRequestWrapper/HttpServletRequestWrapperIsRequestedSessionIdValid_01Test.html"
            assertion="Test for a false return from this method on the wrapped request object, specified in the Java Servlet Pages Specification v2.3 Sec 14"
            testStrategy="A test for HttpServletRequestWrapper.isRequestedSessionIdValid() method"
        />
    </target>

    <target name="HttpSessionCreatedTest">
        <gtest request="GET /servlet-tests/HttpSessionCreatedTest HTTP/1.0"
            testName="HttpSessionCreatedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionListener/HttpSessionCreatedTest.html"
            assertion="Test for notification that a session was created, specified in the Java Servlet Pages Specification v2.3, Sec 14  - javax.servlet.http.HttpSessionListener.sessionCreated  method"
            testStrategy="Client calls a servlet that creates a session. The  listener should detect the creation and write a message to a static log file. The Servlet then reads the log file and sends the contents back to the client. As a result of the test, the  javax.servlet.http.HttpSessionEvent.getSession() method is tested."
        />
    </target>

    <target name="HttpSessionDestroyedTest">
        <gtest request="GET /servlet-tests/HttpSessionDestroyedTest HTTP/1.0"
            testName="HttpSessionDestroyedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionListener/HttpSessionDestroyedTest.html"
            assertion="Test for notification that a session was invalidated,  specified in the Java Servlet Pages Specification v2.3, Sec 14  - javax.servlet.http.HttpSessionListener.sessionCreated  method"
            testStrategy="Client calls a servlet that creates and the invalidates a session. The listener should detect the changes and write a message to a static log file. The Servlet  then reads the log file and sends the contents back to  the client. As a result of the test, the  javax.servlet.http.HttpSessionEvent.getSession() method is tested."
        />
    </target>

    <target name="HttpSessionAttributeAddedTest">
        <gtest request="GET /servlet-tests/HttpSessionAttributeAddedTest HTTP/1.0"
            testName="HttpSessionAttributeAddedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionAttributeListener/HttpSessionAttributeAddedTest.html"
            assertion="Test that a notification is generated that a new attribute  was added to the session, specified in the Java  Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http .HttpSessionAttributeListener.attributeAdded method"
            testStrategy="Client calls a servlet that adds an attribute. The  listener should detect the add and writes a message out to a static log file. Servlet then reads the log  and sends the contents back to the client."
        />
    </target>

    <target name="HttpSessionAttributeRemovedTest">
        <gtest request="GET /servlet-tests/HttpSessionAttributeRemovedTest HTTP/1.0"
            testName="HttpSessionAttributeRemovedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionAttributeListener/HttpSessionAttributeRemovedTest.html"
            assertion="Test for notification that an attribute has been removed  from a session, specified in the Java Servlet Pages  Specification v2.3, Sec 14  - javax.servlet.http.HttpSessionAttributeListener .attributeRemoved method"
            testStrategy="Client calls a servlet that adds/Removes an attribute. The listener should detect the changes and writes a  message out to a static log file. Servlet then reads  the log and sends the contents back to the client."
        />
    </target>

    <target name="HttpSessionAttributeReplacedTest">
        <gtest request="GET /servlet-tests/HttpSessionAttributeReplacedTest HTTP/1.0"
            testName="HttpSessionAttributeReplacedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionAttributeListener/HttpSessionAttributeReplacedTest.html"
            assertion="Test for notification that an attribute has been replaced  in a session, specified in the Java Servlet Pages  Specification v2.3, Sec 14 -  javax.servlet.ServletContextAttributeListener. attributeReplaced method"
            testStrategy="Client calls a servlet that adds/Replaces an attribute. The listener should detect the changes and writes a message out to a static log file. Servlet then reads  the log and sends the contents back to the client."
        />
    </target>

    <target name="HttpSessionEventGetSessionTest">
        <gtest request="GET /servlet-tests/HttpSessionEventGetSessionTest HTTP/1.0"
            testName="HttpSessionEventGetSessionTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionEvent/HttpSessionEventGetSessionTest.html"
            assertion="Test for the returned session that has changed, specified in  the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.HttpSessionEvent.getSession method"
            testStrategy="Client calls a servlet that creates a session. The  listener writes the sessionid of the event to a static log file. The Servlet then reads the log file and sends the contents back to the client."
        />
    </target>

    <target name="HttpSessionEventGetSourceTest">
        <gtest request="GET /servlet-tests/HttpSessionEventGetSourceTest HTTP/1.0"
            testName="HttpSessionEventGetSourceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionEvent/HttpSessionEventGetSourceTest.html"
            assertion="Test for the object on which the Event initially occured, specified in the java.util.EventObject.getSource method"
            testStrategy="Client calls a servlet that creates a session. The  listener writes the source of the event to a static log file. The Servlet then reads the log file and sends the contents back to the client."
        />
    </target>

    <target name="HttpSessionBindingEventAddedTest">
        <gtest request="GET /servlet-tests/HttpSessionBindingEventAddedTest HTTP/1.0"
            testName="HttpSessionBindingEventAddedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventAddedTest.html"
            assertion="Test that when a new attribute is added to the session, the getName() method returns the name with which the object is  bound to, the getSession() method returns the session that  changed, and the getValue() method returns the value of the attribute being added -  specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http .HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that adds an attribute. The  listener should detect the add and writes the values  returned by the getName, getSession(), and getValue()  methods to a static log file. Servlet then reads the log and sends the contents back to the client."
        />
    </target>

    <target name="HttpSessionBindingEventRemovedTest">
        <gtest request="GET /servlet-tests/HttpSessionBindingEventRemovedTest HTTP/1.0"
            testName="HttpSessionBindingEventRemovedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventRemovedTest.html"
            assertion="Test that when an attribute is removed from the session, the getName() method returns the name with which the object was  bound to, the getSession() method returns the session that  changed, and the getValue() method returns the value of the attribute being removed - specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http .HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that adds/removes an attribute. The listener should detect the changes and writes the  values returned by the getName, getSession(), and  getValue() methods to a static log file. Servlet then  reads the log and sends the contents back to the client."
        />
    </target>

    <target name="HttpSessionBindingEventReplacedTest">
        <gtest request="GET /servlet-tests/HttpSessionBindingEventReplacedTest HTTP/1.0"
            testName="HttpSessionBindingEventReplacedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventReplacedTest.html"
            assertion="Test that when an attribute is replaced from the session, the getName() method returns the name with which the object is  bound to, the getSession() method returns the session that  changed, and the getValue() method returns the new value of the attribute - specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.http .HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that adds/replaces an attribute. The listener should detect the changes and writes the  values returned by the getName, getSession(), and  getValue() methods to a static log file. Servlet then  reads the log and sends the contents back to the client. the log and sends the contents back to the client."
        />
    </target>

    <target name="HttpSessionBindingEventConstructor1Test">
        <gtest request="GET /servlet-tests/HttpSessionBindingEventConstructor1Test HTTP/1.0"
            testName="HttpSessionBindingEventConstructor1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventConstructor1Test.html"
            assertion="Constructs an event that notifies an object that it has been bound to or unbound from a session. To receive the event, the object must implement HttpSessionBindingListener  specified in the Java Servlet Pages Specification v2.3,  Sec 14 - javax.servlet.http.HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that creates a  HttpSessionBindingEvent object using the 2 argument  method."
        />
    </target>

    <target name="HttpSessionBindingEventConstructor2Test">
        <gtest request="GET /servlet-tests/HttpSessionBindingEventConstructor2Test HTTP/1.0"
            testName="HttpSessionBindingEventConstructor2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingEvent/HttpSessionBindingEventConstructor2Test.html"
            assertion="Constructs an event that notifies an object that it has been bound to or unbound from a session. To receive the event, the object must implement HttpSessionBindingListener  specified in the Java Servlet Pages Specification v2.3,  Sec 14 - javax.servlet.http.HttpSessionBindingEvent"
            testStrategy="Client calls a servlet that creates a  HttpSessionBindingEvent object using the 2 argument  method."
        />
    </target>

    <target name="HttpSessionValueUnBoundTest">
        <gtest request="GET /servlet-tests/HttpSessionValueUnBoundTest HTTP/1.0"
            testName="HttpSessionValueUnBoundTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingListener/HttpSessionValueUnBoundTest.html"
            assertion="Test for notification that the object is being unbound to a session specified in the Java Servlet Pages Specification  v2.3, Sec 14 - javax.servlet.http.HttpSessionBindingListener. valueUnBound method"
            testStrategy="Client calls a servlet that sets/removes an attribute  from the session. That attribute happens to be a Binding listener. The Listeners valueBound/valueUnbound methods should be called and messages written to a static log  file. The servlet then reads the log file and sends the data back to the client."
        />
    </target>

    <target name="HttpSessionValueBoundTest">
        <gtest request="GET /servlet-tests/HttpSessionValueBoundTest HTTP/1.0"
            testName="HttpSessionValueBoundTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpSessionBindingListener/HttpSessionValueBoundTest.html"
            assertion="Test for notification that the object is being bound to a session specified in the Java Servlet Pages Specification  v2.3, Sec 14 - javax.servlet.http.HttpSessionBindingListener. valueBound method"
            testStrategy="Client calls a servlet that sets an attribute to the  session. That attribute happens to be a Binding listener. The Listeners valueBound method should be  called and a message is written to a static log file. The servlet then reads the log file and sends the data back to the client."
        />
    </target>

    <target name="HttpServletResponseWrapperConstructorTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperConstructorTest HTTP/1.0"
            testName="HttpServletResponseWrapperConstructorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperConstructorTest.html"
            assertion="Construct a request object wrapping the given request,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper"
            testStrategy="Client calls a servlet who constructs a Wrapper object from the response object."
        />
    </target>

    <target name="HttpServletResponseWrapperAddCookieTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperAddCookieTest HTTP/1.0"
            testName="HttpServletResponseWrapperAddCookieTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="GenericResponseWrapper:addCookie|Set-Cookie:BestLanguage=Java"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperAddCookieTest.html"
            assertion="Test for default behavior of this method is to call  addCookie(Cookie cookie) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper.addCookie() method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses addCookie method."
        />
    </target>

    <target name="HttpServletResponseWrapperAddDateHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperAddDateHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperAddDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyDateHeader:Mon, 12 Jan 1970 10:20:54 GMT|GenericResponseWrapper:addDateHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperAddDateHeaderTest.html"
            assertion="Test for default behavior of this method is to call  addDateHeader(String long) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper.addDateHeader() method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses addDateHeader method."
        />
    </target>

    <target name="HttpServletResponseWrapperAddHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperAddHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperAddHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:Java|MyStrHeader:Java2|GenericResponseWrapper:addHeader|GenericResponseWrapper:addHeader|GenericResponseWrapper:addHeader|MyStrHeader2:Java3"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperAddHeaderTest.html"
            assertion="Test for default behavior of this method is to return  addHeader(String name, String value) on the wrapped response object, specified in the Java Servlet Pages Specification  v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. addHeader() method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses addHeader method."
        />
    </target>

    <target name="HttpServletResponseWrapperAddIntHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperAddIntHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperAddIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader:2|GenericResponseWrapper:addIntHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperAddIntHeaderTest.html"
            assertion="Test for default behavior of this method is to call  addIntHeader(String name, int value) on the wrapped response object, specified in the Java Servlet Pages Specification  v2.3, Sec 14 - javax.servlet.HttpServletResponseWrapper. addIntHeader(String,Int) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses addIntHeader method."
        />
    </target>

    <target name="HttpServletResponseWrapperContainsHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperContainsHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperContainsHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:HttpServletResponseWrapperContainsHeaderTest|GenericResponseWrapper:setHeader|GenericResponseWrapper:containsHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperContainsHeaderTest.html"
            assertion="Test for default behavior of this method is to call  containsHeader(String name) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. containsHeader(String) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses containsHeader method."
        />
    </target>

    <target name="HttpServletResponseWrapperEncodeURLTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperEncodeURLTest HTTP/1.0"
            testName="HttpServletResponseWrapperEncodeURLTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="GenericResponseWrapper:encodeURL"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperEncodeURLTest.html"
            assertion="Test for default behavior of this method is to call  encodeURL(String url) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper.encodeURL() method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses encodeURL method."
        />
    </target>

    <target name="HttpServletResponseWrapperEncodeRedirectURLTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperEncodeRedirectURLTest HTTP/1.0"
            testName="HttpServletResponseWrapperEncodeRedirectURLTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="GenericResponseWrapper:encodeRedirectURL"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperEncodeRedirectURLTest.html"
            assertion="Test for default behavior of this method is to return  encodeRedirectURL(String url) on the wrapped response object, specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. encodeRedirectURL(String) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses  encodeRedirectURL method."
        />
    </target>

    <target name="HttpServletResponseWrapperSendErrorTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSendErrorTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendErrorTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            expectHeaders="GenericResponseWrapper:sendError"
            assertion="Test for default behavior of this method is to call  sendError(int sc) on the wrapped response object, specified  in the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.HttpServletResponseWrapper.sendError(int) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses sendError method."
        />
    </target>

<!-- START EXCLUDE HttpServletResponseWrapperSendErrorMsgTest

     Test has been excluded due to ambiguity in the spec regarding 
     the HTTP status line's reason-phrase being populated with the value
     of msg in a call to response.sendError(int,String).
     This is on the slate to be clarified for the next spec.
                    
    <target name="HttpServletResponseWrapperSendErrorMsgTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSendErrorMsgTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendErrorMsgTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200" returnCodeMsg="in HttpServletResponseWrapperSendErrorMsgTest servlet"
            expectHeaders="GenericResponseWrapper:sendErrorMsg"
            assertion="Test for default behavior of this method is to call  sendError(int, String) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. sendError(int sc, String msg) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses sendError method."
        />
    </target>

END EXCLUDE HttpServletResponseWrapperSendErrorMsgTest -->

    <target name="HttpServletResponseWrapperSendErrorMsgIgnoreHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSendErrorMsgIgnoreHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendErrorMsgIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            unexpectedHeaders="GenericResponseWrapper:sendErrorMsgIgnoreHeader"
            assertion="Test that headers added after a call to sendError(int,String), will be ignored by the container and will not be sent to the client.  See Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Client calls a servlet whose response has been wrapped.  The wrapper object will call sendError() and then add a header. The header should not be visible to the client."
        />
    </target>

    <target name="HttpServletResponseWrapperSendErrorIgnoreHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSendErrorIgnoreHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendErrorIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="100"
            unexpectedHeaders="GenericResponseWrapper:sendErrorIgnoreHeader"
            assertion="Test that headers added after a call to sendError(int), will be ignored by the container and will not be sent to the client.  See Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Client calls a servlet whose response has been wrapped.  The wrapper object will call sendError() and then add a header. The header should not be visible to the client."
        />
    </target>

    <target name="HttpServletResponseWrapperSendRedirectTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSendRedirectTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendRedirectTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            expectHeaders="Location:http://${host}:${port}/HttpServletResponseWrapperRedirectedTest"
            assertion="Test for default behavior of this method is to return  sendRedirect(String) on the wrapped response object of a  URL that is based on the server root, specified in the  Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. sendRedirect(String location) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses sendRedirect method."
        />
    </target>

    <target name="HttpServletResponseWrapperSendRedirectIgnoreHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSendRedirectIgnoreHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendRedirectIgnoreHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            unexpectedHeaders="GenericResponseWrapper:sendRedirectIgnoreHeader"
            assertion="Test that headers added after a call to sendRedirect(), will be ignored by the container and will not be sent to the client.  See Servlet Specification 2.3 section SRV.5.2."
            testStrategy="Client calls a servlet whose response has been wrapped.  The wrapper object will call sendRedirect() and then add a header. The header should not be visible to the client."
        />
    </target>

    <target name="HttpServletResponseWrapperSendRedirectForWebAppTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSendRedirectForWebAppTest HTTP/1.0"
            testName="HttpServletResponseWrapperSendRedirectForWebAppTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="302"
            expectHeaders="Location:http://${host}:${port}/servlet-tests/hsresw/HttpServletResponseWrapperRedirectedTest"
            assertion="Test for default behavior of this method is to return  sendRedirect(String) on the wrapped response object of a  URL that is based on the context-root, specified in the  Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. sendRedirect(String location) method"
            testStrategy="Client calls a servlet who's response has been wrapped. The wrapper object adds a specific header to the response object and calls the responses sendRedirect method."
        />
    </target>

    <target name="HttpServletResponseWrapperSetDateHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSetDateHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetDateHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="GenericResponseWrapper:setDateHeader|DateInfo:Sat, 25 Apr 1970 07:29:03 GMT"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperSetDateHeaderTest.html"
            assertion="Test for default behavior of this method is to call  setDateHeader(String, long) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. setDateHeader(String name, long date) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses setDateHeader method."
        />
    </target>

    <target name="HttpServletResponseWrapperSetHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSetHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyStrHeader:Java|GenericResponseWrapper:addHeader|GenericResponseWrapper:setHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperSetHeaderTest.html"
            assertion="Test for default behavior of this method is to return  setHeader(String, String) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. setHeader(String name, String value) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses setHeader method."
        />
    </target>

    <target name="HttpServletResponseWrapperSetIntHeaderTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSetIntHeaderTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetIntHeaderTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            expectHeaders="MyIntHeader:2|GenericResponseWrapper:addIntHeader|GenericResponseWrapper:setIntHeader"
            goldenFile="${wgdir}/javax_servlet_http/HttpServletResponseWrapper/HttpServletResponseWrapperSetIntHeaderTest.html"
            assertion="Test for default behavior of this method is to call  setIntHeader(String, int) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. setIntHeader(String name, int value) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses setIntHeader method."
        />
    </target>

    <target name="HttpServletResponseWrapperSetStatusMsgTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSetStatusMsgTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetStatusMsgTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200" returnCodeMsg="in HttpServletResponseWrapperSetStatusMsgTest servlet"
            expectHeaders="GenericResponseWrapper:setStatusMsg"
            assertion="Test for default behavior of this method is to call  setStatus(int, String) on the wrapped response object,  specified in the Java Servlet Pages Specification v2.3, Sec  14 - javax.servlet.HttpServletResponseWrapper. setStatus(int sc, String msg) method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses setStatus method."
        />
    </target>

    <target name="HttpServletResponseWrapperSetStatusTest">
        <gtest request="GET /servlet-tests/HttpServletResponseWrapperSetStatusTest HTTP/1.0"
            testName="HttpServletResponseWrapperSetStatusTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            expectHeaders="GenericResponseWrapper:setStatus"
            assertion="Test for default behavior of this method is to call  setStatus(int) on the wrapped response object, specified in  the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.HttpServletResponseWrapper.setStatus(int sc)  method"
            testStrategy="Client calls a servlet who's response has been wrapped.  The wrapper object adds a specific header to the  response object and calls the responses setStatus method."
        />
    </target>

    <target name="HttpServletDoDestroyedTest">
        <gtest request="GET /servlet-tests/HttpServletDoDestroyedTest HTTP/1.0"
            testName="HttpServletDoDestroyedTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoDestroyedTest.html"
            assertion="Called by the servlet container to indicate to a servlet  that the servlet is being taken out of service, specified  in the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Servlet.destroy() method"
            testStrategy="Testing that destroy method is not called during service method execution"
        />
    </target>

    <target name="HttpServletDoInit1Test">
        <gtest request="GET /servlet-tests/HttpServletDoInit1Test HTTP/1.0"
            testName="HttpServletDoInit1Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="503"
            assertion="Called by the servlet container to indicate to a servlet  that the servlet is being placed into service., specified  in the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Servlet.init() method"
            testStrategy="A negative test for the init method. We will throw  UnavailableException from inside init.The Servlet  should not be initialized"
        />
    </target>

    <target name="HttpServletDoInit2Test">
        <gtest request="GET /servlet-tests/HttpServletDoInit2Test HTTP/1.0"
            testName="HttpServletDoInit2Test" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoInit2Test.html"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being placed into service., specified in the Java Servlet Pages Specification v2.3, Sec 14 - javax.servlet.Servlet.init() method"
            testStrategy="Inside CoreServletTest, which is the parent servlet, we are implementing init() and setting a boolean variable to true. We'll check for the variables here in the HttpServletDoInit2Test"
        />
    </target>

    <target name="HttpServletDoServletConfigTest">
        <gtest request="GET /servlet-tests/HttpServletDoServletConfigTest HTTP/1.0"
            testName="HttpServletDoServletConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoServletConfigTest.html"
            assertion="Returns a ServletConfig object, which contains initialization and startup parameters for this servlet., specified in the  Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Servlet.getServletConfig() method"
            testStrategy="Create a servlet and test for the getServletConfig()  method to be a non-null value and an initial paramter can be retrieved"
        />
    </target>

    <target name="HttpServletDoServletInfoTest">
        <gtest request="GET /servlet-tests/HttpServletDoServletInfoTest HTTP/1.0"
            testName="HttpServletDoServletInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoServletInfoTest.html"
            assertion="Returns information about the servlet, such as author,  version, and copyright., specified in the Java Servlet Pages Specification v2.3, Sec 14 -  javax.servlet.Servlet.getServletInfo() method"
            testStrategy="Create a servlet and test that information is returned"
        />
    </target>

    <target name="HttpServletDoServiceTest">
        <gtest request="GET /servlet-tests/HttpServletDoServiceTest HTTP/1.0"
            testName="HttpServletDoServiceTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletDoServiceTest.html"
            assertion="Called by the servlet container to allow the servlet to  respond to a request, specified in the Java Servlet Pages  Specification v2.3, Sec 14 - javax.servlet.Servlet.service() method"
            testStrategy="Inside HttpServletCoreServletTest, which is the parent servlet, we will override init method and assign some value to the  String. We'll check for that value in the service method"
        />
    </target>

    <target name="HttpServletPUTest">
        <gtest request="GET /servlet-tests/HttpServletPUTest HTTP/1.0"
            testName="HttpServletPUTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletPUTest.html"
            assertion="Servlet lifecycle test, check if UnavailableException.isPermanent() is true, specified in the Java Servlet Pages Specification v2.3, Sec 14"
            testStrategy="Create a servlet, throw UnavailableException and test if isPermanent() method is true"
        />
    </target>

    <target name="HttpServletDestroyTest">
        <gtest request="GET /servlet-tests/HttpServletDestroyTest HTTP/1.0"
            testName="HttpServletDestroyTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            returnCode="200"
            assertion="Called by the servlet container to indicate to a servlet that the servlet is being taken out of service., specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.Destroy() method"
            testStrategy="Create a servlet and take out of service using destroy method"
        />
    </target>

    <target name="HttpServletGetServletConfigTest">
        <gtest request="GET /servlet-tests/HttpServletGetServletConfigTest HTTP/1.0"
            testName="HttpServletGetServletConfigTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletGetServletConfigTest.html"
            assertion="Returns this servlet's ServletConfig object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletConfig() method"
            testStrategy="Create a servlet and check for its ServletConfig object existence"
        />
    </target>

    <target name="HttpServletGetServletContextTest">
        <gtest request="GET /servlet-tests/HttpServletGetServletContextTest HTTP/1.0"
            testName="HttpServletGetServletContextTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletGetServletContextTest.html"
            assertion="Returns this servlet's ServletContext object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletContext() method"
            testStrategy="Create a servlet and check for its ServletContext object existence"
        />
    </target>

    <target name="HttpServletGetServletInfoTest">
        <gtest request="GET /servlet-tests/HttpServletGetServletInfoTest HTTP/1.0"
            testName="HttpServletGetServletInfoTest" debug="0"
            host="${host}" port="${port}" exactMatch="true"
            goldenFile="${wgdir}/javax_servlet_http/HttpServlet/HttpServletGetServletInfoTest.html"
            assertion="Returns this servlet's ServletInfo object, specified in the Java Servlet Pages Specification v2.3, Sec 16 - javax.servlet.GenericServlet.ServletContext() method"
            testStrategy="Create a servlet and check for its ServletInfo object values"
        />
    </target>

</project>
